<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="otp__vfs__core_8c" kind="file" language="C++">
    <compoundname>otp_vfs_core.c</compoundname>
    <includes refid="otp__vfs__api_8h" local="yes">otp_vfs_api.h</includes>
    <includes refid="svc__otps_8h" local="yes">svc_otps.h</includes>
    <includes local="yes">crc32.h</includes>
    <includes local="yes">wsf_buf.h</includes>
    <includes local="yes">wsf_efs.h</includes>
    <includes local="yes">wsf_trace.h</includes>
    <includes local="yes">wsf_types.h</includes>
    <incdepgraph>
      <node id="2">
        <label>otp_vfs_api.h</label>
        <link refid="otp__vfs__api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c</label>
        <link refid="otp__vfs__core_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>otp_vfs_main.h</label>
        <link refid="otp__vfs__main_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>svc_otps.h</label>
        <link refid="svc__otps_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>att_api.h</label>
      </node>
      <node id="8">
        <label>att_defs.h</label>
      </node>
      <node id="12">
        <label>crc32.h</label>
      </node>
      <node id="7">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="13">
        <label>wsf_buf.h</label>
      </node>
      <node id="14">
        <label>wsf_efs.h</label>
      </node>
      <node id="15">
        <label>wsf_trace.h</label>
      </node>
      <node id="9">
        <label>wsf_types.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_otp_v_f_s_c_core_list" prot="public">OtpVFSCCoreList</innerclass>
    <innerclass refid="struct___otp_v_f_s_core_meta_data" prot="public">_OtpVFSCoreMetaData</innerclass>
    <innerclass refid="struct___otp_v_f_s_core_block" prot="public">_OtpVFSCoreBlock</innerclass>
    <innerclass refid="struct___otp_v_f_s_core" prot="public">_OtpVFSCore</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="otp__vfs__core_8c_1aa4d90413a8a7007fa4eed2b581d82b26" prot="public" static="no">
        <name>OTP_VFS_CORE_MAX_SUPPORTED_FILE_NO</name>
        <initializer>(0x20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="31" column="9" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="otp__vfs__core_8c_1aaf6884c36d22483b88d7765fd47babc2" prot="public" static="no">
        <name>OTP_VFS_CORE_BLOCK_SIZE</name>
        <initializer>(512)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="32" column="9" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="otp__vfs__core_8c_1a103170efe7f30e6675a7f53e57d97584" prot="public" static="no">
        <name>OTP_VFS_CORE_BLOCK_NO</name>
        <initializer>(40)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="33" column="9" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="otp__vfs__core_8c_1ae54899a52fda2045e655400eb9e30699" prot="public" static="no">
        <name>OTP_VFS_RAM_SIZE</name>
        <initializer>(OTP_VFS_PAGE_SIZE * OTP_VFS_PAGE_NO)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="35" column="9" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="otp__vfs__core_8c_1a5237d37e6852240dcf1c1cde68492fb7" prot="public" static="no">
        <name>OTP_VFS_CRC_SIZE</name>
        <initializer>(64)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="36" column="9" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="otp__vfs__core_8c_1aace7b2fa3ab67d577c71c10252b13d7c" prot="public" static="no">
        <type>struct <ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref></type>
        <definition>typedef struct OtpVFSCCoreList OtpVFSCCoreList</definition>
        <argsstring></argsstring>
        <name>OtpVFSCCoreList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="43" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="otp__vfs__core_8c_1aec359c48c674cde1facac4801a10dec8" prot="public" static="no">
        <type>struct <ref refid="struct___otp_v_f_s_core_meta_data" kindref="compound">_OtpVFSCoreMetaData</ref></type>
        <definition>typedef struct _OtpVFSCoreMetaData OtpVFSCoreMetaData</definition>
        <argsstring></argsstring>
        <name>OtpVFSCoreMetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="53" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="otp__vfs__core_8c_1a7ebd00d3fed817e8eed4d0f73936111c" prot="public" static="no">
        <type>struct <ref refid="struct___otp_v_f_s_core_block" kindref="compound">_OtpVFSCoreBlock</ref></type>
        <definition>typedef struct _OtpVFSCoreBlock OtpVFSCoreBlock</definition>
        <argsstring></argsstring>
        <name>OtpVFSCoreBlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="64" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="otp__vfs__core_8c_1a51c02d6e0c227155988805b357bf9424" prot="public" static="no">
        <type>struct <ref refid="struct___otp_v_f_s_core" kindref="compound">_OtpVFSCore</ref></type>
        <definition>typedef struct _OtpVFSCore OtpVFSCore</definition>
        <argsstring></argsstring>
        <name>OtpVFSCore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="73" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="otp__vfs__core_8c_1ad6f5e1548363f8c883df7ccf0e69533b" prot="public" static="yes" mutable="no">
        <type><ref refid="struct___otp_v_f_s_core" kindref="compound">OtpVFSCore</ref></type>
        <definition>OtpVFSCore OtpVFSCoreCtx</definition>
        <argsstring></argsstring>
        <name>OtpVFSCoreCtx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="75" column="19" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="otp__vfs__core_8c_1a8af3be72243df431586467ea59192655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OtpVFSCoreUtilListInit</definition>
        <argsstring>(OtpVFSCCoreList *node)</argsstring>
        <name>OtpVFSCoreUtilListInit</name>
        <param>
          <type><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Initialize a doubly-linked list node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the node to be initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="84" column="6" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="otp__vfs__core_8c_1a0c0f8a074557594003bb44b40e879025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OtpVFSCoreUtilListInsert</definition>
        <argsstring>(OtpVFSCCoreList *head, OtpVFSCCoreList *node)</argsstring>
        <name>OtpVFSCoreUtilListInsert</name>
        <param>
          <type><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref> *</type>
          <declname>head</declname>
        </param>
        <param>
          <type><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Insert a node into a doubly-linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the head of the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the node to be inserted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="98" column="6" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="98" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="otp__vfs__core_8c_1adf8dd1f04b74e8fb04d66e250e756755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OtpVFSCoreUtilListRemove</definition>
        <argsstring>(OtpVFSCCoreList *node)</argsstring>
        <name>OtpVFSCoreUtilListRemove</name>
        <param>
          <type><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Remove a node from a doubly-linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the node to be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="113" column="6" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="113" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="otp__vfs__core_8c_1a0ecfaab463b9ab7e11c11fe7e849b7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OtpVFSCoreInitialize</definition>
        <argsstring>(void)</argsstring>
        <name>OtpVFSCoreInitialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize the OTP VFS core. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="126" column="6" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="126" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="otp__vfs__core_8c_1a9ac4fd14b06211592aa8f2ac0b13f0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t OtpVFSCoreCreate</definition>
        <argsstring>(uint32_t size)</argsstring>
        <name>OtpVFSCoreCreate</name>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create an entry in the OTP VFS core. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the entry to be created.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle for the created entry, or OTP_VFS_CORE_INVALID_HANDLE if creation fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="158" column="10" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="158" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="otp__vfs__core_8c_1a41a00167903597ddc6afdb72b8b1369c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t OtpVFSCoreWrite</definition>
        <argsstring>(uint16_t hdl, uint32_t offset, uint8_t *buff, uint32_t len)</argsstring>
        <name>OtpVFSCoreWrite</name>
        <param>
          <type>uint16_t</type>
          <declname>hdl</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Write data to the OTP Filesystem. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hdl</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle for the entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset within the entry to start writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to be written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes successfully written. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="209" column="10" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="209" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="otp__vfs__core_8c_1af8ea8e25c8f7a0058549a25ccb70e327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t OtpVFSCoreRead</definition>
        <argsstring>(uint16_t hdl, uint32_t offset, uint8_t *buff, uint32_t len)</argsstring>
        <name>OtpVFSCoreRead</name>
        <param>
          <type>uint16_t</type>
          <declname>hdl</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read data from the OTP VFS core. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hdl</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle for the entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset within the entry to start reading. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to store the read data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes successfully read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="313" column="10" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="313" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="otp__vfs__core_8c_1ad64f05491517440e0c7fd200d18c98b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t OtpVFSCoreCRCRead</definition>
        <argsstring>(uint16_t hdl, uint32_t offset, uint32_t len)</argsstring>
        <name>OtpVFSCoreCRCRead</name>
        <param>
          <type>uint16_t</type>
          <declname>hdl</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read data from the OTP VFS core and calculate CRC32. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hdl</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle for the entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset within the entry to start reading. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to read and calculate CRC32.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CRC32 value calculated from the read data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="384" column="10" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="384" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="otp__vfs__core_8c_1aa7cfa910c1c66488953b6685a425a523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t OtpVFSCoreDelete</definition>
        <argsstring>(uint16_t hdl)</argsstring>
        <name>OtpVFSCoreDelete</name>
        <param>
          <type>uint16_t</type>
          <declname>hdl</declname>
        </param>
        <briefdescription>
<para>Delete an entry from the OTP VFS core. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hdl</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle for the entry to be deleted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle of the deleted entry or OTP_VFS_CORE_INVALID_HANDLE if unsuccessful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="488" column="10" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="488" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="otp__vfs__core_8c_1a56b9ab64ba8f0bef2f4cf35776ea196c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void otpsUtilityCoreDumpData</definition>
        <argsstring>(uint8_t *pInput, int size, const char *label)</argsstring>
        <name>otpsUtilityCoreDumpData</name>
        <param>
          <type>uint8_t *</type>
          <declname>pInput</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Dump data in hexadecimal format with a label and size information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pInput</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be dumped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data to be dumped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Label for the dumped data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="534" column="6" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="534" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="otp__vfs__core_8c_1a87cea65ae20dc90e55ac292835628391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OtpVFSCoreDumpBlockStatus</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>OtpVFSCoreDumpBlockStatus</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Dump the status of an OTP VFS core block. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the OTP VFS core block to be dumped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" line="569" column="6" bodyfile="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c" bodystart="569" bodyend="574"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Virtual filesystem implementation for OTP, OTS. Includes functions to handle objects stored in memory. </para>
    </briefdescription>
    <detaileddescription>
<para>Copyright (c) 2012-2019 Arm Ltd. All Rights Reserved.</para>
<para>Copyright (c) 2019-2024 Packetcraft, Inc. All rights reserved. Packetcraft, Inc. confidential and proprietary.</para>
<para>IMPORTANT. Your use of this file is governed by a Software License Agreement (&quot;Agreement&quot;) that must be accepted in order to download or otherwise receive a copy of this file. You may not use or copy this file for any purpose other than as described in the Agreement. If you do not agree to all of the terms of the Agreement do not use this file and delete all copies in your possession or control; if you do not have a copy of the Agreement, you must contact Packetcraft, Inc. prior to any use, copying or further distribution of this software. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="otp__vfs__api_8h" kindref="compound">otp_vfs_api.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="svc__otps_8h" kindref="compound">svc_otps.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;crc32.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wsf_buf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wsf_efs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wsf_trace.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wsf_types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OTP_VFS_CORE_MAX_SUPPORTED_FILE_NO<sp/>(0x20)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OTP_VFS_CORE_BLOCK_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(512)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OTP_VFS_CORE_BLOCK_NO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(40)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OTP_VFS_RAM_SIZE<sp/>(OTP_VFS_PAGE_SIZE<sp/>*<sp/>OTP_VFS_PAGE_NO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OTP_VFS_CRC_SIZE<sp/>(64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Structure<sp/>representing<sp/>a<sp/>doubly-linked<sp/>list<sp/>node<sp/>for<sp/>the<sp/>VFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="struct_otp_v_f_s_c_core_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>*<sp/>pPrev;<sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>previous<sp/>node<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>*<sp/>pNext;<sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>next<sp/>node<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}<sp/><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Structure<sp/>representing<sp/>metadata<sp/>for<sp/>an<sp/>OTP<sp/>VFSoperation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="struct___otp_v_f_s_core_meta_data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___otp_v_f_s_core_meta_data" kindref="compound">_OtpVFSCoreMetaData</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref><sp/>head;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Head<sp/>of<sp/>the<sp/>list<sp/>for<sp/>this<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flag<sp/>indicating<sp/>whether<sp/>this<sp/>metadata<sp/>is<sp/>in<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedBlock;<sp/><sp/></highlight><highlight class="comment">//<sp/>Index<sp/>of<sp/>the<sp/>used<sp/>block<sp/>associated<sp/>with<sp/>this<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>for<sp/>identifying<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>of<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">}<sp/><ref refid="struct___otp_v_f_s_core_meta_data" kindref="compound">OtpVFSCoreMetaData</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Structure<sp/>representing<sp/>a<sp/>block<sp/>of<sp/>data<sp/>in<sp/>the<sp/>OTP<sp/>VFS<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="struct___otp_v_f_s_core_block" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___otp_v_f_s_core_block" kindref="compound">_OtpVFSCoreBlock</ref></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref><sp/>link;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Link<sp/>to<sp/>include<sp/>the<sp/>block<sp/>in<sp/>a<sp/>linked<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>of<sp/>the<sp/>data<sp/>in<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flag<sp/>indicating<sp/>whether<sp/>this<sp/>block<sp/>is<sp/>in<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sequence<sp/>number<sp/>for<sp/>ordering<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[OTP_VFS_CORE_BLOCK_SIZE];<sp/><sp/></highlight><highlight class="comment">//<sp/>Actual<sp/>data<sp/>stored<sp/>in<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>for<sp/>identifying<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">}<sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Structure<sp/>representing<sp/>the<sp/>OTP<sp/>VFS<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="struct___otp_v_f_s_core" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___otp_v_f_s_core" kindref="compound">_OtpVFSCore</ref></highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>int8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emptyBlockNo;<sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>empty<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref><sp/><sp/><sp/><sp/>freeBlocks;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>of<sp/>free<sp/>blocks<sp/>available<sp/>for<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="struct___otp_v_f_s_core_meta_data" kindref="compound">OtpVFSCoreMetaData</ref><sp/>hdl[OTP_VFS_CORE_MAX_SUPPORTED_FILE_NO];<sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>object<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref><sp/><sp/><sp/><sp/>block[OTP_VFS_CORE_BLOCK_NO];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>core<sp/>data<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/><ref refid="struct___otp_v_f_s_core" kindref="compound">OtpVFSCore</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct___otp_v_f_s_core" kindref="compound">OtpVFSCore</ref><sp/>OtpVFSCoreCtx;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="otp__vfs__core_8c_1a8af3be72243df431586467ea59192655" kindref="member">OtpVFSCoreUtilListInit</ref>(<ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>node-&gt;pPrev<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>node-&gt;pNext<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="otp__vfs__core_8c_1a0c0f8a074557594003bb44b40e879025" kindref="member">OtpVFSCoreUtilListInsert</ref>(<ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>*<sp/>head,<sp/><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>head-&gt;pPrev-&gt;pNext<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>node-&gt;pPrev<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>head-&gt;pPrev;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>node-&gt;pNext<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>head-&gt;pPrev<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="otp__vfs__core_8c_1adf8dd1f04b74e8fb04d66e250e756755" kindref="member">OtpVFSCoreUtilListRemove</ref>(<ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>node-&gt;pNext-&gt;pPrev<sp/>=<sp/>node-&gt;pPrev;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>node-&gt;pPrev-&gt;pNext<sp/>=<sp/>node-&gt;pNext;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>node-&gt;pNext<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>node-&gt;pPrev<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="otp__vfs__core_8c_1a0ecfaab463b9ab7e11c11fe7e849b7e1" kindref="member">OtpVFSCoreInitialize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>memset(&amp;OtpVFSCoreCtx,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct___otp_v_f_s_core" kindref="compound">OtpVFSCore</ref>));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>core<sp/>operation<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>OTP_VFS_CORE_MAX_SUPPORTED_FILE_NO;<sp/>i++)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>OtpVFSCoreCtx.hdl[i].hdl<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="otp__vfs__core_8c_1a8af3be72243df431586467ea59192655" kindref="member">OtpVFSCoreUtilListInit</ref>(&amp;OtpVFSCoreCtx.hdl[i].head);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="otp__vfs__core_8c_1a8af3be72243df431586467ea59192655" kindref="member">OtpVFSCoreUtilListInit</ref>(&amp;OtpVFSCoreCtx.freeBlocks);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>core<sp/>operation<sp/>data<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>OTP_VFS_CORE_BLOCK_NO;<sp/>i++)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="otp__vfs__core_8c_1a8af3be72243df431586467ea59192655" kindref="member">OtpVFSCoreUtilListInit</ref>(&amp;OtpVFSCoreCtx.block[i].link);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="otp__vfs__core_8c_1a0c0f8a074557594003bb44b40e879025" kindref="member">OtpVFSCoreUtilListInsert</ref>(&amp;OtpVFSCoreCtx.freeBlocks,<sp/>&amp;OtpVFSCoreCtx.block[i].link);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>OtpVFSCoreCtx.block[i].seq<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">uint32_t<sp/><ref refid="otp__vfs__core_8c_1a9ac4fd14b06211592aa8f2ac0b13f0f3" kindref="member">OtpVFSCoreCreate</ref>(uint32_t<sp/>size)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>int8_t<sp/>needBlockSize;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>number<sp/>of<sp/>blocks<sp/>needed<sp/>for<sp/>the<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>%<sp/>OTP_VFS_CORE_BLOCK_SIZE<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>needBlockSize<sp/>=<sp/>size<sp/>/<sp/>OTP_VFS_CORE_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>needBlockSize<sp/>=<sp/>size<sp/>/<sp/>OTP_VFS_CORE_BLOCK_SIZE<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>there<sp/>are<sp/>enough<sp/>empty<sp/>blocks<sp/>to<sp/>create<sp/>the<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OtpVFSCoreCtx.emptyBlockNo<sp/>-<sp/>needBlockSize<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OTP_VFS_CORE_INVALID_HANDLE;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>a<sp/>free<sp/>handle<sp/>for<sp/>the<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>OTP_VFS_CORE_MAX_SUPPORTED_FILE_NO;<sp/>i++)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OtpVFSCoreCtx.hdl[i].used<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>entry<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OtpVFSCoreCtx.hdl[i].used<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OtpVFSCoreCtx.hdl[i].usedBlock<sp/>=<sp/>needBlockSize;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OtpVFSCoreCtx.emptyBlockNo<sp/>-=<sp/>needBlockSize;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>handle<sp/>for<sp/>the<sp/>created<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OtpVFSCoreCtx.hdl[i].hdl;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>an<sp/>invalid<sp/>handle<sp/>if<sp/>no<sp/>free<sp/>handle<sp/>is<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OTP_VFS_CORE_INVALID_HANDLE;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">uint32_t<sp/><ref refid="otp__vfs__core_8c_1a41a00167903597ddc6afdb72b8b1369c" kindref="member">OtpVFSCoreWrite</ref>(uint16_t<sp/>hdl,<sp/>uint32_t<sp/>offset,<sp/>uint8_t*<sp/>buff,<sp/>uint32_t<sp/>len)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="struct___otp_v_f_s_core_meta_data" kindref="compound">OtpVFSCoreMetaData</ref>*<sp/>pMeta;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copySize<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currOffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*<sp/><sp/><sp/><sp/>node;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>int32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyLen<sp/><sp/><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedBlock<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OtpVFSCoreCtx.hdl[hdl].hdl<sp/>!=<sp/>hdl)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OTP_VFS_CORE_INVALID_HANDLE;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>pMeta<sp/>=<sp/>&amp;OtpVFSCoreCtx.hdl[hdl];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>node<sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)pMeta-&gt;head.pNext;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>while<sp/>(node<sp/>!=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)&amp;pMeta-&gt;head)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*<sp/>pB;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>pB<sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)node;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>start<sp/>+<sp/>OTP_VFS_CORE_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>usedBlock++;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>data<sp/>start<sp/>from<sp/>start<sp/>to<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currOffset<sp/>&gt;=<sp/>start<sp/>&amp;&amp;<sp/>currOffset<sp/>&lt;<sp/>end)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>segBeforeCurrOffset<sp/>=<sp/>currOffset<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>originalSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pB-&gt;size;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/><sp/>blockRemain<sp/>=<sp/>(int32_t)OTP_VFS_CORE_BLOCK_SIZE<sp/>-<sp/>(int32_t)segBeforeCurrOffset;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockRemain<sp/>&lt;=<sp/>copyLen)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copySize<sp/>=<sp/>blockRemain;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copySize<sp/>=<sp/>copyLen;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(pB-&gt;data<sp/>+<sp/>(currOffset<sp/>-<sp/>start),<sp/>buff<sp/>+<sp/>copyOffset,<sp/>copySize);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyOffset<sp/>+=<sp/>copySize;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currOffset<sp/>+=<sp/>copySize;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyLen<sp/>-=<sp/>copySize;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segBeforeCurrOffset<sp/>+<sp/>copySize<sp/>&gt;<sp/>originalSize)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>the<sp/>write<sp/>is<sp/>just<sp/>to<sp/>update<sp/>the<sp/>existing<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pB-&gt;size<sp/>=<sp/>segBeforeCurrOffset<sp/>+<sp/>copySize;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pB-&gt;hdl<sp/><sp/>=<sp/>hdl;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pB-&gt;used<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copyLen<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)node-&gt;link.pNext;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(copyLen<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*<sp/>pB<sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)OtpVFSCoreCtx.freeBlocks.pNext;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(pB<sp/>==<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)&amp;OtpVFSCoreCtx.freeBlocks)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Full<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copyOffset;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OtpVFSCoreCtx.hdl[hdl].usedBlock<sp/>&lt;<sp/>usedBlock)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copyOffset;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="otp__vfs__core_8c_1adf8dd1f04b74e8fb04d66e250e756755" kindref="member">OtpVFSCoreUtilListRemove</ref>((<ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>*)pB);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="otp__vfs__core_8c_1a0c0f8a074557594003bb44b40e879025" kindref="member">OtpVFSCoreUtilListInsert</ref>(&amp;pMeta-&gt;head,<sp/>(<ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>*)pB);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copyLen<sp/>&gt;=<sp/>OTP_VFS_CORE_BLOCK_SIZE)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(pB-&gt;data,<sp/>buff<sp/>+<sp/>copyOffset,<sp/>OTP_VFS_CORE_BLOCK_SIZE);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyOffset<sp/>+=<sp/>OTP_VFS_CORE_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyLen<sp/>-=<sp/>OTP_VFS_CORE_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pB-&gt;size<sp/>=<sp/>OTP_VFS_CORE_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(pB-&gt;data,<sp/>buff<sp/>+<sp/>copyOffset,<sp/>copyLen);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyOffset<sp/>+=<sp/>copyLen;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pB-&gt;size<sp/>=<sp/>copyLen;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyLen<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>pB-&gt;used<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>pB-&gt;hdl<sp/><sp/>=<sp/>hdl;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copyOffset;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">uint32_t<sp/><ref refid="otp__vfs__core_8c_1af8ea8e25c8f7a0058549a25ccb70e327" kindref="member">OtpVFSCoreRead</ref>(uint16_t<sp/>hdl,<sp/>uint32_t<sp/>offset,<sp/>uint8_t*<sp/>buff,<sp/>uint32_t<sp/>len)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><ref refid="struct___otp_v_f_s_core_meta_data" kindref="compound">OtpVFSCoreMetaData</ref>*<sp/>pMeta;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copySize<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currOffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*<sp/><sp/><sp/><sp/>node;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>int32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyLen<sp/>=<sp/>(int32_t)len;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>handle<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OtpVFSCoreCtx.hdl[hdl].hdl<sp/>!=<sp/>hdl)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>pMeta<sp/>=<sp/>&amp;OtpVFSCoreCtx.hdl[hdl];</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>node<sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)pMeta-&gt;head.pNext;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>the<sp/>blocks<sp/>to<sp/>find<sp/>the<sp/>appropriate<sp/>block<sp/>for<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>while<sp/>(node<sp/>!=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)&amp;pMeta-&gt;head)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*<sp/>pB;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>pB<sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)node;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>start<sp/>+<sp/>pB-&gt;size;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>current<sp/>offset<sp/>is<sp/>within<sp/>the<sp/>range<sp/>of<sp/>the<sp/>current<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currOffset<sp/>&gt;=<sp/>start<sp/>&amp;&amp;<sp/>currOffset<sp/>&lt;<sp/>end)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>size<sp/>to<sp/>copy<sp/>based<sp/>on<sp/>the<sp/>remaining<sp/>data<sp/>in<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copyLen<sp/>+<sp/>currOffset<sp/>&gt;<sp/>end)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copySize<sp/>=<sp/>end<sp/>-<sp/>currOffset;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copySize<sp/>=<sp/>copyLen;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>data<sp/>from<sp/>the<sp/>block<sp/>to<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buff<sp/>+<sp/>copyOffset,<sp/>pB-&gt;data<sp/>+<sp/>(currOffset<sp/>-<sp/>start),<sp/>copySize);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>offsets<sp/>and<sp/>lengths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyOffset<sp/>+=<sp/>copySize;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currOffset<sp/>+=<sp/>copySize;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyLen<sp/>-=<sp/>copySize;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Break<sp/>the<sp/>loop<sp/>if<sp/>all<sp/>data<sp/>is<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copyLen<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)node-&gt;link.pNext;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>successfully<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copyOffset;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">uint32_t<sp/><ref refid="otp__vfs__core_8c_1ad64f05491517440e0c7fd200d18c98b5" kindref="member">OtpVFSCoreCRCRead</ref>(uint16_t<sp/>hdl,<sp/>uint32_t<sp/>offset,<sp/>uint32_t<sp/>len)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><ref refid="struct___otp_v_f_s_core_meta_data" kindref="compound">OtpVFSCoreMetaData</ref>*<sp/>pMeta;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currOffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainLen<sp/><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>availLen<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calLen<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*<sp/><sp/><sp/><sp/>node;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initCrc<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>uint8_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pBuf;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intStart;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>handle<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OtpVFSCoreCtx.hdl[hdl].hdl<sp/>!=<sp/>hdl)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>pMeta<sp/>=<sp/>&amp;OtpVFSCoreCtx.hdl[hdl];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>node<sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)pMeta-&gt;head.pNext;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>the<sp/>blocks<sp/>to<sp/>find<sp/>the<sp/>appropriate<sp/>block<sp/>for<sp/>reading<sp/>and<sp/>calculating<sp/>CRC32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>while<sp/>(node<sp/>!=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)&amp;pMeta-&gt;head)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*<sp/>pB;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>pB<sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)node;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>start<sp/>+<sp/>pB-&gt;size;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>current<sp/>offset<sp/>is<sp/>within<sp/>the<sp/>range<sp/>of<sp/>the<sp/>current<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currOffset<sp/>&gt;=<sp/>start<sp/>&amp;&amp;<sp/>currOffset<sp/>&lt;<sp/>end)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intStart<sp/>=<sp/>currOffset<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>availLen<sp/>=<sp/>end<sp/>-<sp/>intStart;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Limit<sp/>the<sp/>available<sp/>length<sp/>to<sp/>the<sp/>size<sp/>of<sp/>the<sp/>CRC<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(availLen<sp/>&gt;<sp/>OTP_VFS_CRC_SIZE)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>availLen<sp/>=<sp/>OTP_VFS_CRC_SIZE;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>length<sp/>to<sp/>calculate<sp/>CRC32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainLen<sp/>&lt;=<sp/>availLen)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calLen<sp/>=<sp/>remainLen;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calLen<sp/>=<sp/>availLen;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>within<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pBuf<sp/>=<sp/>&amp;pB-&gt;data[intStart];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>CRC32<sp/>for<sp/>the<sp/>current<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainLen<sp/>-<sp/>calLen<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initCrc<sp/>=<sp/>CalcSegmentCrc32(initCrc,<sp/>calLen,<sp/>pBuf,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initCrc<sp/>=<sp/>CalcSegmentCrc32(initCrc,<sp/>calLen,<sp/>pBuf,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>offsets<sp/>and<sp/>lengths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remainLen<sp/>-=<sp/>calLen;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currOffset<sp/>+=<sp/>calLen;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Break<sp/>the<sp/>loop<sp/>if<sp/>all<sp/>data<sp/>is<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainLen<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>starting<sp/>position<sp/>within<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intStart<sp/>+=<sp/>calLen;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>block<sp/>if<sp/>the<sp/>current<sp/>block<sp/>is<sp/>fully<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intStart<sp/>==<sp/>end)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)node-&gt;link.pNext;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)node-&gt;link.pNext;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>calculated<sp/>CRC32<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initCrc;</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">uint32_t<sp/><ref refid="otp__vfs__core_8c_1aa7cfa910c1c66488953b6685a425a523" kindref="member">OtpVFSCoreDelete</ref>(uint16_t<sp/>hdl)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><ref refid="struct___otp_v_f_s_core_meta_data" kindref="compound">OtpVFSCoreMetaData</ref>*<sp/>pMeta;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>*<sp/><sp/><sp/><sp/>node;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><ref refid="struct_otp_v_f_s_c_core_list" kindref="compound">OtpVFSCCoreList</ref>*<sp/><sp/><sp/><sp/>pNext;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>handle<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OtpVFSCoreCtx.hdl[hdl].hdl<sp/>!=<sp/>hdl)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OTP_VFS_CORE_INVALID_HANDLE;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>pMeta<sp/>=<sp/>&amp;OtpVFSCoreCtx.hdl[hdl];</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>node<sp/><sp/>=<sp/>pMeta-&gt;head.pNext;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>the<sp/>blocks<sp/>of<sp/>the<sp/>entry<sp/>and<sp/>release<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>&amp;pMeta-&gt;head)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*<sp/>pB;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>pNext<sp/>=<sp/>node-&gt;pNext;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="otp__vfs__core_8c_1adf8dd1f04b74e8fb04d66e250e756755" kindref="member">OtpVFSCoreUtilListRemove</ref>(node);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>pB<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*)node;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>pB-&gt;size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>pB-&gt;used<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>pB-&gt;seq<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(pB-&gt;data,<sp/>0x55,<sp/>OTP_VFS_CORE_BLOCK_SIZE);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="otp__vfs__core_8c_1a0c0f8a074557594003bb44b40e879025" kindref="member">OtpVFSCoreUtilListInsert</ref>(&amp;OtpVFSCoreCtx.freeBlocks,<sp/>node);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>pNext;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>metadata<sp/>of<sp/>the<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>pMeta-&gt;used<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>OtpVFSCoreCtx.emptyBlockNo<sp/>+=<sp/>pMeta-&gt;usedBlock;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>pMeta-&gt;usedBlock<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdl;</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="otp__vfs__core_8c_1a56b9ab64ba8f0bef2f4cf35776ea196c" kindref="member">otpsUtilityCoreDumpData</ref>(uint8_t*<sp/>pInput,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>label)</highlight></codeline>
<codeline lineno="535"><highlight class="normal">{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>i;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tempData[60];</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>APP_TRACE_INFO0(</highlight><highlight class="stringliteral">&quot;----------START---------&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>APP_TRACE_INFO1(</highlight><highlight class="stringliteral">&quot;DUMP<sp/>Data:%s&quot;</highlight><highlight class="normal">,<sp/>label);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>APP_TRACE_INFO1(</highlight><highlight class="stringliteral">&quot;DUMP<sp/>data<sp/>size:%d&quot;</highlight><highlight class="normal">,<sp/>size);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>the<sp/>data<sp/>and<sp/>print<sp/>in<sp/>hexadecimal<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/>16<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(tempData,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tempData));</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(tempData<sp/>+<sp/>3<sp/>*<sp/>(i<sp/>%<sp/>16),<sp/></highlight><highlight class="stringliteral">&quot;%02X<sp/>&quot;</highlight><highlight class="normal">,<sp/>pInput[i]);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/>16<sp/>==<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>APP_TRACE_INFO1(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>tempData);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>remaining<sp/>data<sp/>if<sp/>not<sp/>aligned<sp/>to<sp/>16<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>%<sp/>16<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>APP_TRACE_INFO1(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>tempData);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>APP_TRACE_INFO0(</highlight><highlight class="stringliteral">&quot;-----------END-------------&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="otp__vfs__core_8c_1a87cea65ae20dc90e55ac292835628391" kindref="member">OtpVFSCoreDumpBlockStatus</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><ref refid="struct___otp_v_f_s_core_block" kindref="compound">OtpVFSCoreBlock</ref>*<sp/>block<sp/>=<sp/>&amp;OtpVFSCoreCtx.block[index];</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>APP_TRACE_INFO3(</highlight><highlight class="stringliteral">&quot;hdl:%d,<sp/>used:%d,<sp/>size:%d&quot;</highlight><highlight class="normal">,<sp/>block-&gt;hdl,<sp/>block-&gt;used,<sp/>block-&gt;size);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><ref refid="otp__vfs__core_8c_1a56b9ab64ba8f0bef2f4cf35776ea196c" kindref="member">otpsUtilityCoreDumpData</ref>(block-&gt;data,<sp/>block-&gt;size,<sp/></highlight><highlight class="stringliteral">&quot;DATA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/emm-drjenkins/ado-agent-03/_work/43/T9305_DEV/sdk/utils/doc_generator/build/src_tmp/libs/third_party/emb/packetcraft/ble-profiles/sources/profiles/otp/otp_vfs_core.c"/>
  </compounddef>
</doxygen>
