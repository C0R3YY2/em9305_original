Lock information pages
^^^^^^^^^^^^^^^^^^^^^^^^^

Overview
--------

The information pages can be permanently locked by setting the appropriate bits
in the right place in the flash memory.
At startup during the ROM boot sequence, these bits are read and used to configure
the device. Once configured, an information page is protected against erase, and
then consequently against rewrite.

This documentation page explains how to configure the information pages lock bits.

JSON file configuration
-----------------------

The lock bits for the information pages are stored in information page 3 and are
duplicated in information page 2.

The lock bits in information page 3 are used to lock some NVM parts like typically
the information page 3 which contains configuration values that must not be changed
in order to have the device work properly.
These lock bits let other information pages opened for the customer to store its
own configuration parameters and to freely decide which of the non locked page he
wants to lock.

So, usually the customer receives devices with information page 3 locked. Since
it is not possible for the customer to complete the locking information in information
page 3 (because it is locked), then he has the possibility to use the same data
structure but in information page 2 which is not locked.

Note that once a page is locked, it cannot be unlocked. So if information page 3
(reserved for EM usage) is locked while information page 2 is unlocked, the
customer might want to enforce value 0 for information page 3 lock bit in its
own reserved page. However, such action will have no effect and the information
page 3 will stay locked anyway.

The previous chapter above shows how to read the content of either the information
page 3 or the information page 2. The outcome of such read is a JSON file which
contains all the fields in a human readable format.

The following screenshot is an extract showing the part of the file that contains
the locking information.


| "Lock Bits": {
|     "address": "0x1D00",
|     "type": "registers",
|     "force": true,
|     "data": {
|         "RegNvmLockMain0": {
|             "RegNvmLockMain0": null
|         },
|         "RegNvmLockMain1": {
|             "RegNvmLockMain1": null
|         },
|         "RegNvmLockInfo": {
|             "NvmEraseLockInfoPage0": null,
|             "NvmWriteLockInfoPage0": null,
|             "NvmLockInfoPage": null
|         },



Modifying lock bits
-------------------

From the snippet above, there is the field "RegNvmLockInfo" that defines the
information pages lock structure.
Within this field, the "NvmLockInfoPage" introduces the bits that are used to
define the locking configuration.
This field contains 4 bits, each bit being dedicated to one information page:

* bit 3 ==> information page 3 *(0: unlocked, 1: locked)*
* bit 2 ==> information page 2 …
* bit 1 ==> information page 1 …
* bit 0 ==> information page 0 …

Of course, a combination of those bits can be set to lock more than one page in
one single operation.

For example, the decimal value 13 (*b1101*) will permanently lock information pages 3, 2 and 0.

The modification has to be done manually by editing the JSON file using a simple
text editor:

| …
|         "RegNvmLockInfo": {
|             "NvmEraseLockInfoPage0": null,
|             "NvmWriteLockInfoPage0": null,
|             "NvmLockInfoPage": **13**
|         },
| …

Then using the BLEngine tool, this file is then used to update the content
of information page 3 or 2.


For example, the following command line will write data from the *user_config.json*
file into the user information page in flash memory (page 2):

.. code-block:: bash

  python blengine_cli.py --port COMYY run nvm_write -p user -in config.json

Now you know how to read an information page, how to modify it and how to store
your new configuration.
