=========================================================================
ADC in Single mode Example
=========================================================================


Overview
--------

The purpose of this example is to show how to use the ADC driver library
in single mode with callback through interruption and timer with QPC to sample the ADC at 10 Hz.

This example shows how to configure the ADC with different voltage sources and print the value to the UART.

Setup
-----

The output (Tx UART signal) is on GPIO7. This signal can be accessed from two header connectors (see picture below).

.. image:: imgs/UART_Tx_GPIO7_connection.jpg
   :scale: 50 %
   :alt: Tx/GPIO7 electrical connection
	 :align: center

You can then connect a USB to UART device to GPIO7 and use a terminal software (for example docklight, PuTTy, â€¦) to connect to the COM port of your device.

.. warning::

  Double check you connected the jumpers D+(07) and D-(06) on the DVK.
  The GPIO6 and GPIO7 pins are connected by default to the USB connector.

The adc single application example do an ADC measurement at 10 Hz and print the adc raw value and converted
voltage.

Implementation details
----------------------

This example code use the implementation of the printf example, please check documentation
of this example for UART implementation details.

The function *NVM_ApplicationEntry()* is the entry point of the customer application.
It configure QPC and create one task for the project. It is also reponsible to resume 
the peripheral after the SOC exit sleep mode.

When the application start, it generate Q_ENTRY_SIG signal. This code initialise the printf over UART,
enable and configure the ADC using interruptions (IT) by providing a callback function. It also create and 
start a timer at 10 Hz.

When the timer expire, the callback Timer_Callback is called and post SIG_TIMER_TICK signal to the task.
Then the task receive the signal and start a convertion using interruption by calling ADC_StartSingleConversionIT.

When the convertion of ADC is ready, it call ADC_ISR_Callback callback function and post a signal SIG_ADC_ISR
to the task.

Then the task receive the SIG_ADC_ISR signal and get the ADC result by calling ADC_GetConversionResult and
print it over UART. 

Build
-----

The build target of this example is: **adc_single_example**

.. code-block:: bash

  cd <sdk>\build
  cmake --build . --target adc_single_example


Run
---

To program and run the example:

.. code-block:: bash

  cd <sdk>\tools\blengine
  python blengine_cli.py --port COMYY run emsystem_prog ..\..\build\projects\adc_single_example\adc_single_example.ihex --progress

With YY = the COM port number used to program your DVK (the one connected to BRG_USB port).


Then, launch your terminal software and connect to the DVK (UART port) using the second COM port dynamically created
at connection. Note that this port is different than the one used to program the application into the flash memory.

Once you have identified the right COM port, then in your terminal software, configure the speed to be 115200 bit/s
and open the connection.

You will then see the counter messages on your terminal like shown in screenshot below.

.. image:: imgs/Terminal_ADC.jpg
	:align: center
