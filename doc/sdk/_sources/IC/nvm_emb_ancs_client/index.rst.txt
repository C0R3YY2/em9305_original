=========================================================================
ANCS Client Example
=========================================================================


Overview
--------

This example demonstrates how a BLE client can connect to an iOS device and receive notifications of various events in the Apple operating system.

ANCS is a proprietary BLE profile consisting of a root service and characteristics beneath it. It requires pairing and for the user to accept that the iOS device will send notifications to 9305 device. ANCS mirrors how BLE Peripherals typically exist, with the server being in the Central.

You can read more about it on Apple's website:
https://developer.apple.com/library/archive/documentation/CoreBluetooth/Reference/AppleNotificationCenterServiceSpecification/Specification/Specification.html

This demo app enumerates the ANCS Primary Service and two of the characteristics beneath it to receive event notifications and send optional replies. It also implements basic messaging to request more information about an event, for example, the phone number associated with an incoming phone call.

Since an ANCS-equipped peripheral can receive information and send replies, it is essentially an Human Interface Device so it advertises the 16-bit Bluetooth UUID for an HID. This also permits it to show up under "Other Devices" on the Bluetooth settings page of iOS so that it can easily be selected for pairing.


Build
-----

The build target of this example is: **nvm_emb_ancs_client**

.. code-block:: bash

  cd <sdk>\build
  cmake --build . --target nvm_emb_ancs_client


Program
-------

To program and run the example:

.. code-block:: bash

  cd <sdk>\tools\blengine
  python blengine_cli.py --port COMyy run emsystem_prog ..\..\build\projects\nvm_emb_ancs_client\nvm_emb_ancs_client.ihex --progress

With yy = the COM port number of your DVK (optional if you set it in the file ``<sdk>\tools\blengine\config.cfg``)


Test
----

To test to the demo, you need an iOS device. The sample app will advertise as "EM9305_ANCS" under "Other Devices" so select it, agree to pairing and agree to let it receive ANCS notifications.

As an option in the source code you can enable debug messages that are sent out over the UART; the GPIO configuration is in nvm_main.c and the rate is fixed to 115.2K, 8N1. To do so,  in my_app.c change:

  #define MESSAGE_DEBUGx

to

  #define MESSAGE_DEBUG

and rebuild.

Note that the existing printf() messages were intended for R&D debugging and not much beyond that. Yet they should help with a basic understanding of "what is going on."


Three basic events are implemented: answering and ending a phone call, receiving and dismissing a text message and receiving and dismissing an alarm from the Timer app. The latter can be used for testing if no second cellphone is available.

The file ble.h defines BUTTON_PRESS_CODE as what is sent around as an acknowledgement message, either originating from a terminal attached to the GPIO pins of the UART (nice for testing) or shorting a GPIO to ground (as defined in nvm_main.c). There is very basic logic to allow you to answer a phone call and then to hang up; the latter uses an undocumented event category that the development community all knows about but Apple has never recognized in updating their documentation.


Limitations
-----------

Persistent bonding data is not preserved so you will need to press on the info circle to "forget" the device on Bluetooth settings and momentarily turn Bluetooth off, so the peripheral reappears in Other Devices.

Since this is an example to show basic ANCS connection and messaging, there is no sense of a "cache" to manage stacked events with their unique UIDs, multiple events in a single category, etc.

CPU sleep is disabled for this app so received bytes on the UART are handled. If you do not need UART input support then alter the gPML_Config.sleepModeForbiden assignment in nvm_main.c