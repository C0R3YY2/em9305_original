
.. this file is auto generated by BLEngine/docs/procedures.py

=============================
key_container Procedures
=============================

.. raw:: html
    
    
    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    
.. _proc-write_key:

write_key_
**********

Write Secret Key in Key Container. Default key is a Test Key.

**API usage**

.. code-block:: python

    from blengine.hci.procedures.key_container import write_key

    write_key(engine, index=8, secret_key=None, mode=None, cipher_text=None)


**CLI usage**

.. code-block:: bash

    blengine run write_key [-h] [--index INDEX] [--mode MODE]
                      [--secret_key SECRET_KEY]


options:
  -h, --help            show this help message and exit
  --index INDEX         Key Container Index
  --mode MODE           Mode of operation 0 : Encrypt/Decrypt, 1 : Decrypt, 2
                        : Encrypt
  --secret_key SECRET_KEY
                        Secret Key (0xdc43496ddc7b4eb046f470054a14cb8d format)


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def write_key(engine, index=8, secret_key=None, mode=None, cipher_text=None):
        '''Write Secret Key in Key Container. Default key is a Test Key.'''
        if index is not None or index < 256:
            if mode is not None or mode > 0 or mode < 3:
                if secret_key is not None:
                    kc_address = KC_BASE_ADDRESS + index * 32
                    secret_key_int = int(secret_key,16)
                    key = secret_key_int.to_bytes(16,'little')
                    data = bytearray(key)
                    
                    print(f"Address: {hex(kc_address)}")
                    pkt = engine.send('EMSMM_Write_At_Address', Start_Address=kc_address, Data=data)
                    if pkt.response.get("status") != 0x00:
                        print(pkt)
                        return False, "Write Key Error"
                    data =bytearray([0, 0, 0, mode])
                    pkt = engine.send('EMSMM_Write_At_Address', Start_Address=kc_address + 16, Data=data)
                    if pkt.response.get("status") != 0x00:
                        print(pkt)
                        return False, "Write Key Attribute Error"
                else:
                    return False, "Key Index Error"
            else:
                return False, "Mode Error"
        else:
            return False, "Key Error"
        return True, "Secrete Key written successfully"
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-clear_key_container:

clear_key_container_
********************


    Erase Key container NVM Area
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.key_container import clear_key_container

    clear_key_container(engine)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def clear_key_container(engine):
        """
        Erase Key container NVM Area
        """
        pkt = engine.send("EMSMM_NVM_Erase_Page", Area = 1, Page = 0)
        return True, pkt.response.get("status")
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-encrypt_with_kc:

encrypt_with_kc_
****************


    Encrypt procedure based on key container.
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.key_container import encrypt_with_kc

    encrypt_with_kc(engine, index, plain_text)


**CLI usage**

.. code-block:: bash

    blengine run encrypt_with_kc [-h] [--index INDEX] [--plain_text PLAIN_TEXT]


options:
  -h, --help            show this help message and exit
  --index INDEX         Key Container Index
  --plain_text PLAIN_TEXT
                        Plain Text (0x00000000000000000000000000000000 format)


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def encrypt_with_kc(engine, index, plain_text):
        '''
        Encrypt procedure based on key container.
        '''
        if index is not None and index < 255:
            data = int(plain_text,16)
            data = data.to_bytes(16,'little')
            pkt = engine.send("EMSS_LE_Encrypt_KC", Key_Index=index, Plaintext_Data = data)
        if pkt.response.get("status") != 0:
            return False, pkt.response.get("status")
    
        out = int.from_bytes(pkt.response.get("Encrypted_Data"), 'little')
        return True, f"0x{out:032x}"
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-decrypt_with_kc:

decrypt_with_kc_
****************


    Decrypt procedure based on key container.
    Default values are computer for default secrete key 0xdc43496ddc7b4eb046f470054a14cb8d and default plain text 0x00000000000000000000000000000000
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.key_container import decrypt_with_kc

    decrypt_with_kc(engine, index, cipher_text)


**CLI usage**

.. code-block:: bash

    blengine run decrypt_with_kc [-h] [--index INDEX] [--cipher_text CIPHER_TEXT]


options:
  -h, --help            show this help message and exit
  --index INDEX         Key Container Index
  --cipher_text CIPHER_TEXT
                        Cipher Text (0x660ddc495759eea9ef55a5532092570e
                        format)


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def decrypt_with_kc(engine, index, cipher_text):
        '''
        Decrypt procedure based on key container.
        Default values are computer for default secrete key 0xdc43496ddc7b4eb046f470054a14cb8d and default plain text 0x00000000000000000000000000000000
        '''
        if index is not None and index < 255:
            data = int(cipher_text,16)
            data = data.to_bytes(16,'little')
            pkt = engine.send("EMSS_LE_Decrypt_KC", Key_Index=index, Encrypted_Data = data)
        if pkt.response.get("status") != 0:
            return False, pkt.response.get("status")
        out = int.from_bytes(pkt.response.get("Decrypted_Data"), 'little')
        return True, f"0x{out:032x}"
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-invalidate_key:

invalidate_key_
***************


    Invalidate key in key container at a given index.
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.key_container import invalidate_key

    invalidate_key(engine, index)


**CLI usage**

.. code-block:: bash

    blengine run invalidate_key [-h] [--index INDEX]


options:
  -h, --help     show this help message and exit
  --index INDEX  Key Container Index


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def invalidate_key(engine, index):
        '''
        Invalidate key in key container at a given index.
        '''
        if index is not None and index < 255:
            kc_address = KC_BASE_ADDRESS + index * 32
            data =bytearray([0, 0, 0, 0])
            pkt = engine.send('EMSMM_Write_At_Address', Start_Address=kc_address+20, Data=data)
        if pkt.response.get("status") != 0:
            return False, pkt.response.get("status")
        return True, "Invalidate Key success"
    


.. raw:: html
    
    </details>
    <hr>

this page is auto generated by BLEngine/docs/procedures.py