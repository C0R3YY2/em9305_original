
.. this file is auto generated by BLEngine/docs/procedures.py

=============================
l2cap Procedures
=============================

.. raw:: html
    
    
    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    
.. _proc-l2cap.configure_channel:

l2cap.configure_channel_
************************


    Configure / Register L2CAP channel
    

**API usage**

.. code-block:: python

    from blengine.host.procedures.l2cap import configure_channel

    configure_channel(engine, conn_handle, psm, hciTxCredits=0, remote_mtu=0, local_mtu=64, mps=64, permissions=0, remote_cid=0, local_cid=0, local_credits=0, remote_credits=0, rxOffset=0, txLeft=0, txDone=0, txSDULength=0, authoriz=False, secLevel=0, role=3)


**CLI usage**

.. code-block:: bash

    blengine run L2CAP.configure_channel [-h] [--hciTxCredits HCITXCREDITS]
                                    [--remote_mtu REMOTE_MTU]
                                    [--local_mtu LOCAL_MTU] [--mps MPS]
                                    [--permissions PERMISSIONS]
                                    [--remote_cid REMOTE_CID]
                                    [--local_cid LOCAL_CID]
                                    [--local_credits LOCAL_CREDITS]
                                    [--remote_credits REMOTE_CREDITS]
                                    [--rxOffset RXOFFSET] [--txLeft TXLEFT]
                                    [--txDone TXDONE]
                                    [--txSDULength TXSDULENGTH]
                                    [--authoriz AUTHORIZ]
                                    [--secLevel SECLEVEL] [--role ROLE]
                                    conn_handle psm

*Positional arguments:*

:conn_handle:

    Connection Handle

:psm:

    The PSM identifying the protocol/service for the L2CAP
                        channel


options:
  -h, --help            show this help message and exit
  --hciTxCredits HCITXCREDITS
                        The number of HCI Transmit buffers that this handler
                        is allowed to fill when sending data.
  --remote_mtu REMOTE_MTU
                        The Maximum size of the payload allowed to be sent to
                        the remote
  --local_mtu LOCAL_MTU
                        The Maximum size of the payload allowed to be sent
                        from the remote
  --mps MPS             The Maximum size of the payload allowed to be sent
                        from the remote
  --permissions PERMISSIONS
                        The local channel permissions required to this
                        Connection.
  --remote_cid REMOTE_CID
                        The remote channel Allocated to this Connection.
  --local_cid LOCAL_CID
                        The local channel Allocated to this Connection.
  --local_credits LOCAL_CREDITS
                        The local available credits.
  --remote_credits REMOTE_CREDITS
                        The number of buffer(s) available in the remote device
  --rxOffset RXOFFSET   The RX current offset
  --txLeft TXLEFT       The length of data remaining.
  --txDone TXDONE       The length of data already transmitted
  --txSDULength TXSDULENGTH
                        The total number of data to transmit
  --authoriz AUTHORIZ   EMB parameter. Indicate if authorization is required
  --secLevel SECLEVEL   EMB parameter. Security Level.
  --role ROLE           EMB parameter. Channel role to be registered:
                        initiator (0x01), acceptor (0x02) or both (0x03).


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    @procedure(prefix="L2CAP.", parser=configure_channel_parser)
    def configure_channel(engine, 
                          conn_handle,
                          psm,
                          hciTxCredits=0,
                          remote_mtu=0,
                          local_mtu=0x0040,
                          mps=0x0040,
                          permissions=0,
                          remote_cid=0,
                          local_cid=0,
                          local_credits=0,
                          remote_credits=0,
                          rxOffset=0,
                          txLeft=0,
                          txDone=0,
                          txSDULength=0,
                          authoriz=False,
                          secLevel=0x00,
                          role=0x03,
                          ):
        '''
        Configure / Register L2CAP channel
        '''
        if engine.bluetooth_host_stack == "EMB":
            if permissions == 0x04:
                permissions=0x00
                authoriz=0x01
                
            pkt = engine.send("EMSHI_L2CAP_emb_CocRegister", 
                            psm=psm,
                            mps=mps,
                            mtu=local_mtu,
                            credits=hciTxCredits,
                            authoriz=authoriz,
                            secLevel=permissions,
                            role=role,
                            )
            RegId = pkt.response.get("RegId")
    
            return RegId, pkt.response.get("status") == 0
        else:
            pkt = engine.send("EMSHI_L2CAP_Configure", 
                              connHandle=conn_handle, 
                              psm=psm,
                              hciTxCredits=hciTxCredits,
                              remoteUpperLayerMTU=remote_mtu,
                              localUpperLayerMTU=local_mtu,
                              localUpperLayerMPS=mps,
                              localAccessPermissions=permissions,
                              remoteChannelID=remote_cid,
                              localCredits=local_credits,
                              remoteCredits=remote_credits,
                              rxOffset=rxOffset,
                              txLeft=txLeft,
                              txDone=txDone,
                              txSDULength=txSDULength,
                              localChannelID=local_cid)
            
            if pkt.response.get("status") == 0:
                pkt=engine.send("EMSHI_L2CAP_AllocateReceiveBuffer")
    
            return pkt.response.get("status") == 0
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-l2cap.connect_req:

l2cap.connect_req_
******************


    Send L2CAP connection request to a given PSM. L2CAP channel shall be previously configured.
    

**API usage**

.. code-block:: python

    from blengine.host.procedures.l2cap import connect_req

    connect_req(engine, conn_handle=None, psm=None, configure=True, hciTxCredits=0, remote_mtu=0, local_mtu=64, mps=64, permissions=0, remote_cid=0, local_cid=0, local_credits=0, remote_credits=0, rxOffset=0, txLeft=0, txDone=0, txSDULength=0, authoriz=False, secLevel=0, role=3)


**CLI usage**

.. code-block:: bash

    blengine run L2CAP.connect_req [-h] [--configure CONFIGURE]
                              [--hciTxCredits HCITXCREDITS]
                              [--remote_mtu REMOTE_MTU]
                              [--local_mtu LOCAL_MTU] [--mps MPS]
                              [--permissions PERMISSIONS]
                              [--remote_cid REMOTE_CID]
                              [--local_cid LOCAL_CID]
                              [--local_credits LOCAL_CREDITS]
                              [--remote_credits REMOTE_CREDITS]
                              [--rxOffset RXOFFSET] [--txLeft TXLEFT]
                              [--txDone TXDONE] [--txSDULength TXSDULENGTH]
                              [--authoriz AUTHORIZ] [--secLevel SECLEVEL]
                              [--role ROLE]
                              conn_handle psm

*Positional arguments:*

:conn_handle:

    Connection Handle

:psm:

    The PSM identifying the protocol/service for the L2CAP
                        channel


options:
  -h, --help            show this help message and exit
  --configure CONFIGURE
                        Indicates if channel configuration is required (True)
                        or not (False) (when it has already been configured)
  --hciTxCredits HCITXCREDITS
                        The number of HCI Transmit buffers that this handler
                        is allowed to fill when sending data.
  --remote_mtu REMOTE_MTU
                        The Maximum size of the payload allowed to be sent to
                        the remote
  --local_mtu LOCAL_MTU
                        The Maximum size of the payload allowed to be sent
                        from the remote
  --mps MPS             The Maximum size of the payload allowed to be sent
                        from the remote
  --permissions PERMISSIONS
                        The local channel permissions required to this
                        Connection.
  --remote_cid REMOTE_CID
                        The remote channel Allocated to this Connection.
  --local_cid LOCAL_CID
                        The local channel Allocated to this Connection.
  --local_credits LOCAL_CREDITS
                        The local available credits.
  --remote_credits REMOTE_CREDITS
                        The number of buffer(s) available in the remote device
  --rxOffset RXOFFSET   The RX current offset
  --txLeft TXLEFT       The length of data remaining.
  --txDone TXDONE       The length of data already transmitted
  --txSDULength TXSDULENGTH
                        The total number of data to transmit
  --authoriz AUTHORIZ   EMB parameter. Indicate if authorization is required
  --secLevel SECLEVEL   EMB parameter. Security Level.
  --role ROLE           EMB parameter. Channel role to be registered:
                        initiator (0x01), acceptor (0x02) or both (0x03).


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    @procedure(prefix="L2CAP.", parser=connect_req_parser)
    def connect_req(engine,
                    conn_handle=None,
                    psm=None,
                    configure=True,
                    hciTxCredits=0,
                    remote_mtu=0,
                    local_mtu=0x0040,
                    mps=0x0040,
                    permissions=0,
                    remote_cid=0,
                    local_cid=0,
                    local_credits=0,
                    remote_credits=0,
                    rxOffset=0,
                    txLeft=0,
                    txDone=0,
                    txSDULength=0,
                    authoriz=False,
                    secLevel=0,
                    role=0x03,
                    ):
        '''
        Send L2CAP connection request to a given PSM. L2CAP channel shall be previously configured.
        '''
        if engine.bluetooth_host_stack == "EMB":
    
            configure = True # For EMB, always need to configure the channel to get the regId
    
            if configure:
                # If configure is enabled, the channel needs to be configured for initiating connection. 
                # If disabled, configuration is not required (must be already done).
                regId, status = configure_channel(engine, 
                                conn_handle=conn_handle, 
                                psm=psm,
                                hciTxCredits=hciTxCredits,
                                remote_mtu=remote_mtu,
                                local_mtu=local_mtu,
                                mps=mps,
                                permissions=permissions,
                                remote_cid=remote_cid,
                                local_cid=local_cid,
                                local_credits=local_credits,
                                remote_credits=remote_credits,
                                rxOffset=rxOffset,
                                txLeft=txLeft,
                                txDone=txDone,
                                txSDULength=txSDULength,
                                authoriz=authoriz,
                                secLevel=secLevel,
                                role=role,
                                )
                configure_ok = status
                if configure_ok is False:
                    return False
    
            pkt = engine.send("EMSHI_L2CAP_emb_CocConnectReq", connId=conn_handle, regId=regId, psm=psm)
            cid = pkt.response.get("cid")
            connectionFailureCause = pkt.response.get("result")
            status = pkt.response.get("status")
            if connectionFailureCause is not None:
                status = 1
    
            return status == 0, status, connectionFailureCause, cid
        
        else:
            if configure:
                # If configure is enabled, the channel needs to be configured for initiating connection. 
                # If disabled, configuration is not required (must be already done).
                configure_ok = configure_channel(engine, 
                                conn_handle=conn_handle, 
                                psm=psm,
                                hciTxCredits=hciTxCredits,
                                remote_mtu=remote_mtu,
                                local_mtu=local_mtu,
                                mps=mps,
                                permissions=permissions,
                                remote_cid=remote_cid,
                                local_cid=local_cid,
                                local_credits=local_credits,
                                remote_credits=remote_credits,
                                rxOffset=rxOffset,
                                txLeft=txLeft,
                                txDone=txDone,
                                txSDULength=txSDULength)
                if configure_ok is False:
                    return False
    
            pkt = engine.send("EMSHI_L2CAP_Connect")
            status = pkt.response.get("status")
            connectionFailureCause = None
            if status != 0:
                connectionFailureCause = pkt.response.get("connectionFailureCause")
                status = 1
    
            return status == 0, status, connectionFailureCause
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-l2cap.connect_rsp:

l2cap.connect_rsp_
******************


    Accept L2CAP connection from remote on a given PSM. L2CAP channel shall be previously configured.
    

**API usage**

.. code-block:: python

    from blengine.host.procedures.l2cap import connect_rsp

    connect_rsp(engine, conn_handle, psm, configure=True, hciTxCredits=0, remote_mtu=0, local_mtu=0, mps=0, permissions=0, remote_cid=0, local_cid=0, local_credits=0, remote_credits=0, rxOffset=0, txLeft=0, txDone=0, txSDULength=0, authoriz=False, secLevel=0, role=3)


**CLI usage**

.. code-block:: bash

    blengine run L2CAP.connect_rsp [-h] [--configure CONFIGURE]
                              [--hciTxCredits HCITXCREDITS]
                              [--remote_mtu REMOTE_MTU]
                              [--local_mtu LOCAL_MTU] [--mps MPS]
                              [--permissions PERMISSIONS]
                              [--remote_cid REMOTE_CID]
                              [--local_cid LOCAL_CID]
                              [--local_credits LOCAL_CREDITS]
                              [--remote_credits REMOTE_CREDITS]
                              [--rxOffset RXOFFSET] [--txLeft TXLEFT]
                              [--txDone TXDONE] [--txSDULength TXSDULENGTH]
                              [--authoriz AUTHORIZ] [--secLevel SECLEVEL]
                              [--role ROLE]
                              conn_handle psm

*Positional arguments:*

:conn_handle:

    Connection Handle

:psm:

    The PSM identifying the protocol/service for the L2CAP
                        channel


options:
  -h, --help            show this help message and exit
  --configure CONFIGURE
                        Indicates if channel configuration is required (True)
                        or not (False) (when it has already been configured)
  --hciTxCredits HCITXCREDITS
                        The number of HCI Transmit buffers that this handler
                        is allowed to fill when sending data.
  --remote_mtu REMOTE_MTU
                        The Maximum size of the payload allowed to be sent to
                        the remote
  --local_mtu LOCAL_MTU
                        The Maximum size of the payload allowed to be sent
                        from the remote
  --mps MPS             The Maximum size of the payload allowed to be sent
                        from the remote
  --permissions PERMISSIONS
                        The local channel permissions required to this
                        Connection.
  --remote_cid REMOTE_CID
                        The remote channel Allocated to this Connection.
  --local_cid LOCAL_CID
                        The local channel Allocated to this Connection.
  --local_credits LOCAL_CREDITS
                        The local available credits.
  --remote_credits REMOTE_CREDITS
                        The number of buffer(s) available in the remote device
  --rxOffset RXOFFSET   The RX current offset
  --txLeft TXLEFT       The length of data remaining.
  --txDone TXDONE       The length of data already transmitted
  --txSDULength TXSDULENGTH
                        The total number of data to transmit
  --authoriz AUTHORIZ   EMB parameter. Indicate if authorization is required
  --secLevel SECLEVEL   EMB parameter. Security Level.
  --role ROLE           EMB parameter. Channel role to be registered:
                        initiator (0x01), acceptor (0x02) or both (0x03).


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    @procedure(prefix="L2CAP.", parser=connect_rsp_parser)
    def connect_rsp(engine,
                    conn_handle,
                    psm,
                    configure=True,
                    hciTxCredits=0,
                    remote_mtu=0,
                    local_mtu=0,
                    mps=0,
                    permissions=0,
                    remote_cid=0,
                    local_cid=0,
                    local_credits=0,
                    remote_credits=0,
                    rxOffset=0,
                    txLeft=0,
                    txDone=0,
                    txSDULength=0,
                    authoriz=False,
                    secLevel=0x00,
                    role=0x03,
                    ):
        '''
        Accept L2CAP connection from remote on a given PSM. L2CAP channel shall be previously configured.
        '''
        if engine.bluetooth_host_stack == "EMB":
            # For EMB stack, to be L2CAP channel acceptor, the only step required is to configure the channel
            configure = True # EMB always requires to configure the channel
    
            if configure:
                RegId, status = configure_channel(engine, 
                                conn_handle=conn_handle, 
                                psm=psm,
                                hciTxCredits=hciTxCredits,
                                remote_mtu=remote_mtu,
                                local_mtu=local_mtu,
                                mps=mps,
                                permissions=permissions,
                                remote_cid=remote_cid,
                                local_cid=local_cid,
                                local_credits=local_credits,
                                remote_credits=remote_credits,
                                rxOffset=rxOffset,
                                txLeft=txLeft,
                                txDone=txDone,
                                txSDULength=txSDULength,
                                authoriz=authoriz,
                                secLevel=secLevel,
                                role=role,
                                )    
                
            return status==0
        
        else:
            if configure: 
                # If configure is enabled, the channel needs to be configured for accepting connection. If disabled, configuration is not required (must be already done).
                configure_ok = configure_channel(engine, 
                                conn_handle=conn_handle, 
                                psm=psm,
                                hciTxCredits=hciTxCredits,
                                remote_mtu=remote_mtu,
                                local_mtu=local_mtu,
                                mps=mps,
                                permissions=permissions,
                                remote_cid=remote_cid,
                                local_cid=local_cid,
                                local_credits=local_credits,
                                remote_credits=remote_credits,
                                rxOffset=rxOffset,
                                txLeft=txLeft,
                                txDone=txDone,
                                txSDULength=txSDULength)
                if configure_ok is False:
                    return False
        
            pkt = engine.send("EMSHI_L2CAP_RegisterListenningHandler")
    
            return pkt.response.get("status") == 0
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-l2cap.send_data:

l2cap.send_data_
****************


    Send L2CAP data packet. L2CAP channel shall be previously established.
    

**API usage**

.. code-block:: python

    from blengine.host.procedures.l2cap import send_data

    send_data(engine, data, cid=64)


**CLI usage**

.. code-block:: bash

    blengine run L2CAP.send_data [-h] [--cid CID] data

*Positional arguments:*

:data:

    Data to be sent


options:
  -h, --help  show this help message and exit
  --cid CID   Channel identifier


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    @procedure(prefix="L2CAP.", parser=send_data_parser)
    def send_data(engine, data, cid=0x0040):
        '''
        Send L2CAP data packet. L2CAP channel shall be previously established.
        '''
        if engine.bluetooth_host_stack == "EMB":
            data_len = len(data)
            pkt = engine.send("EMSHI_L2CAP_emb_CocDataReq", cid=cid, len=data_len, pPayload=data)
            return pkt.response.get("status") == 0
        else:
            data_len = len(data)
            pkt = engine.send("EMSHI_L2CAP_SendData", data_len=data_len, data=data)
            return pkt.response.get("status") == 0
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-l2cap.disconnect:

l2cap.disconnect_
*****************


    Disconnect L2CAP channel
    

**API usage**

.. code-block:: python

    from blengine.host.procedures.l2cap import disconnect

    disconnect(engine, identifier, local_cid, remote_cid)


**CLI usage**

.. code-block:: bash

    blengine run L2CAP.disconnect [-h] [--remote_cid REMOTE_CID]
                             [--local_cid LOCAL_CID]
                             identifier

*Positional arguments:*

:identifier:

    Identifier command packet rejected


options:
  -h, --help            show this help message and exit
  --remote_cid REMOTE_CID
                        The remote channel Allocated to this Connection.
  --local_cid LOCAL_CID
                        The local channel Allocated to this Connection.


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    @procedure(prefix="L2CAP.", parser=disconnect_parser)
    def disconnect(engine, identifier, local_cid, remote_cid):
        '''
        Disconnect L2CAP channel
        '''
        if engine.bluetooth_host_stack == "EMB":
            pkt=engine.send("EMSHI_L2CAP_emb_CocDisconnectReq", cid=local_cid)
            return pkt.response.get("status") == 0
        else:
            pkt = engine.send("EMSHI_L2CAP_Disconnect", identifier=identifier, cid=local_cid, cid_remote=remote_cid)
            return pkt.response.get("status") == 0
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-l2cap.reject:

l2cap.reject_
*************


    Reject invalid identifier.
    

**API usage**

.. code-block:: python

    from blengine.host.procedures.l2cap import reject

    reject(engine, identifier, local_cid, remote_cid, conn_handle, reason=2)


**CLI usage**

.. code-block:: bash

    blengine run L2CAP.reject [-h] [--reason REASON]
                         identifier remote_cid local_cid conn_handle

*Positional arguments:*

:identifier:

    Identifier command packet rejected

:remote_cid:

    Remote channel identifier.

:local_cid:

    Local channel identifier

:conn_handle:

    Connection Handle


options:
  -h, --help       show this help message and exit
  --reason REASON  Reject Reason


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    @procedure(prefix="L2CAP.", parser=reject_parser)
    def reject(engine, identifier, local_cid, remote_cid, conn_handle, reason=0x0002):
        '''
        Reject invalid identifier.
        '''
        if engine.bluetooth_host_stack == "EMB":
            pkt=engine.send("EMSHI_L2CAP_emb_SendCmdReject", handle=conn_handle, identifier=identifier, reason=reason)
            return pkt.response.get("status") == 0
        else:
            pkt = engine.send("EMSHI_L2CAP_Reject_Invalid", identifier=identifier, cid=local_cid, cid_remote=remote_cid)
            return pkt.response.get("status") == 0
    


.. raw:: html
    
    </details>
    <hr>

this page is auto generated by BLEngine/docs/procedures.py