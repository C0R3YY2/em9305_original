
.. this file is auto generated by BLEngine/docs/procedures.py

=============================
unity Procedures
=============================

.. raw:: html
    
    
    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    
.. _proc-unity_init:

unity_init_
***********


    Init Unity Engine on the client
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.unity import unity_init

    unity_init(engine)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def unity_init(engine):
        '''
        Init Unity Engine on the client
        '''
        r = engine.send("EMSUT_Init")
        print("unity init %s" % r)
        ret = unity_register_tests(engine)
        Unity.initialized = True
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-unity_deinit:

unity_deinit_
*************


    Deinit Unity Engine on the client
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.unity import unity_deinit

    unity_deinit(engine)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def unity_deinit(engine):
        '''
        Deinit Unity Engine on the client
        '''
        Unity.initialized = False
        Unity.groups = []
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-unity_run_all:

unity_run_all_
**************


    Run All test
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.unity import unity_run_all

    unity_run_all(engine, timeout=10000)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def unity_run_all(engine, timeout=UNITY_TIMEOUT):
        '''
        Run All test
        '''
        if Unity.initialized is False:
            print("initialize tests")
            print(unity_init(engine))
    
        for tg in Unity.groups:
            for tc in tg.testCases:
                print("start TG {0}, TC {1}".format(tg.name, tc.name))
                r = engine.send("EMSUT_Test_runner", wait_ack=True, timeout=timeout,
                            Test_Group=tc.groupNumber, Test_Case=tc.tcNumber)
                print (r.response.get("Verdict"))
                tc.verdict = Unity.status[r.response.get("Verdict")]
                print("Response {0}".format(r))
        return Unity.result_str()
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-unity_run:

unity_run_
**********


    Run Particular Test
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.unity import unity_run

    unity_run(engine, group, test, timeout=10000)


**CLI usage**

.. code-block:: bash

    blengine run unity_run [-h] group test

*Positional arguments:*

:group:

    Unity Group Number

:test:

    Unity Test Number


options:
  -h, --help  show this help message and exit


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def unity_run(engine, group, test, timeout=UNITY_TIMEOUT):
        '''
        Run Particular Test
        '''
        print("Group: " + str(group) + " Test: " + str(test))
    
        if Unity.initialized is False:
            print("initiliaze tests")
            print(unity_init(engine))
    
        engine.send("EMSUT_Init")
    
        if len(Unity.groups) < group:
            return "Error invalid group number"
    
        if len(Unity.groups[group-1].testCases) < test:
            return "Error invalid test number"
    
        tc = Unity.groups[group-1].testCases[test-1]
        t = time.perf_counter()
        r = engine.send(
            "EMSUT_Test_runner", wait_ack=True, Test_Group=tc.groupNumber, Test_Case=tc.tcNumber, timeout=timeout)
    
        if r.response.name == "Command_Status": 
            # this is certainly a timeout...
            assert False, "Timeout (%s s)" % (time.perf_counter()-t)
        else:
            Unity.groups[group-1].testCases[test-1].verdict = Unity.status[r.response.get("Verdict", "")]
    
        return Unity.result_str()
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-unity_register_tests:

unity_register_tests_
*********************


    Read Test Structure
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.unity import unity_register_tests

    unity_register_tests(engine)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def unity_register_tests(engine):
        '''
        Read Test Structure
        '''
        pkt = engine.send("EMSUT_Number_Of_Test_Groups")
    
        nb_groups = pkt.response.get("Number_Of_Groups") or 0
        for g in range(1, 1+nb_groups):
            pkt = engine.send("EMSUT_Group_Info", Test_Group=g)
    
            nb_test_cases = pkt.response.get("TC_Number")
            name = pkt.response.get("Name").split(b'\0')[0].decode()
            number = pkt.response.get("Number")
    
            Unity.groups.append(TestGroup(name, number, nb_test_cases))
            for t in range(1, 1+nb_test_cases):
                pkt = engine.send("EMSUT_Test_Info", Test_Group=g, Test_Case=t)
                Unity.groups[-1].addTest(TestCase(pkt.response.get("Name").split(b'\0')[0].decode(),
                                                  pkt.response.get(
                                                      "Group_Number"),
                                                  pkt.response.get("TC_Number")))
    
        return Unity.result_str()
    


.. raw:: html
    
    </details>
    <hr>

this page is auto generated by BLEngine/docs/procedures.py