
.. this file is auto generated by BLEngine/docs/procedures.py

=============================
EM9304commands Procedures
=============================

.. raw:: html
    
    
    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    
.. _proc-em9304_em_transmitter_test_end:

em9304_em_transmitter_test_end_
*******************************

 
    EM Transmitter Test End with print of the Packet Count

    Args:
        engine (hciEngine): EM9304 device from which sent the end test signal.

    Returns::
        Status (str): Number of packets transmitted during the test. 

    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.EM9304commands import em9304_em_transmitter_test_end

    em9304_em_transmitter_test_end(engine)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def em9304_em_transmitter_test_end(engine):
        ''' 
        EM Transmitter Test End with print of the Packet Count
    
        Args:
            engine (hciEngine): EM9304 device from which sent the end test signal.
    
        Returns::
            Status (str): Number of packets transmitted during the test. 
    
        '''
        pkt = engine.send("EM9304_EM_Transmitter_Test_End")
        if pkt.response:
            return "Packet Count: %s" % pkt.response.get("Packet_Count")
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-em9304_read_register:

em9304_read_register_
*********************

 
    EM9304 Read Register Procedure. Read one or more bytes at the given address.
    
    Args:
        engine (hciEngine): EM9304 device from which read the register.
        address (int): Address to start reading.
        length (int): Number of bytes to read.

    Returns::
        data (str): Data read from the specified address

    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.EM9304commands import em9304_read_register

    em9304_read_register(engine, address, length=4)


**CLI usage**

.. code-block:: bash

    blengine run em9304_read_register [-h] [--length LENGTH] address

*Positional arguments:*

:address:

    address (hex format: 0x12345678)


options:
  -h, --help       show this help message and exit
  --length LENGTH  length to read


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def em9304_read_register(engine, address, length=4):
        ''' 
        EM9304 Read Register Procedure. Read one or more bytes at the given address.
        
        Args:
            engine (hciEngine): EM9304 device from which read the register.
            address (int): Address to start reading.
            length (int): Number of bytes to read.
    
        Returns::
            data (str): Data read from the specified address
    
        '''
    
        if isinstance(address, str):
            address = int(address, 16)
    
        pkt = engine.send("EM9304_Read_At_Address",
                          Start_Address=address, Data_Length=length)
    
        return "Register (%s) Value: 0x%s" % (address, pkt.response.hex("Data"))
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-em9304_write_register:

em9304_write_register_
**********************

 
    EM9304 Write Register Procedure. Write one or more bytes at the given address
    
    Args:
        engine (hciEngine): EM9304 device to which write the register.
        address (int): Address to start writing.
        value (int): Data to write to the specified address.

    Returns::
        status (int): Transaction status returned by the engine.

    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.EM9304commands import em9304_write_register

    em9304_write_register(engine, address='0xF0000000', value='0x00000000')


**CLI usage**

.. code-block:: bash

    blengine run em9304_write_register [-h] address value

*Positional arguments:*

:address:

    address (hex format: 0x12345678)

:value:

    value (hex format: 0x12345678)


options:
  -h, --help  show this help message and exit


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def em9304_write_register(engine, address="0xF0000000", value="0x00000000"):
        ''' 
        EM9304 Write Register Procedure. Write one or more bytes at the given address
        
        Args:
            engine (hciEngine): EM9304 device to which write the register.
            address (int): Address to start writing.
            value (int): Data to write to the specified address.
    
        Returns::
            status (int): Transaction status returned by the engine.
    
        '''
        print("Writing {:s} to address {:s}".format(value, address))
        pkt = engine.send("EM9304_Write_At_Address", Start_Address=int(
            address, 16), Data=int(value, 16).to_bytes(4, 'little'))
    
        return pkt.status_text
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-em9304_write_patch:

em9304_write_patch_
*******************

 
    EM9304 Write Patch to memory

    Args:
        engine (hciEngine): EM9304 device to which write the patch.
        file (str):  File patch to be applied in the engine device.
        dest (int): 0x00 IRAM, 0x01 OTP
        spi_disable(boolean): Enable/Disable SPI configure mode.
        fast(boolean): Enable/disable the write patch procedure to wait for an ACK from the device.
        progress(boolean): Enable/disable the progress debug shown when started the patch process.

    Returns::
        status (str): Writing Patch Done.

    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.EM9304commands import em9304_write_patch

    em9304_write_patch(engine, file, dest=0, spi_disable=False, fast=False, progress=False)


**CLI usage**

.. code-block:: bash

    blengine run em9304_write_patch [-h] [--file FILE [FILE ...]] [--dest DEST]
                               [--spi_disable] [--fast] [--progress]


options:
  -h, --help            show this help message and exit
  --file FILE [FILE ...]
                        emp file
  --dest DEST           Destination Memory
  --spi_disable         Disable SPI configure mode
  --fast                fast write, can induce errors
  --progress            Show Progress


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def em9304_write_patch(engine, file, dest=0x00, spi_disable=False, fast=False, progress=False):
        ''' 
        EM9304 Write Patch to memory
    
        Args:
            engine (hciEngine): EM9304 device to which write the patch.
            file (str):  File patch to be applied in the engine device.
            dest (int): 0x00 IRAM, 0x01 OTP
            spi_disable(boolean): Enable/Disable SPI configure mode.
            fast(boolean): Enable/disable the write patch procedure to wait for an ACK from the device.
            progress(boolean): Enable/disable the progress debug shown when started the patch process.
    
        Returns::
            status (str): Writing Patch Done.
    
        '''
        engine.device_model= Ic_Id_t.EM9304.name
    
    
        if file is None:
            return "Error, no file provided."
    
        def show_progress(n, tot, dt):
            if callable(progress):
                progress(n,tot,dt)
            else:
                print("\r", end="")
                print("%s/%s (%.3f s)" % (n, tot, dt), end="")
            # fancy print:
            # print("%s%s" % ("#" * seq, "." * (n-seq)), end="\r")
    
        timeout = 0.1 if fast is True else 0
    
        wp = EM9304_Write_Patch(engine, timeout=timeout, destination_memory=dest, spi_disable=spi_disable)
        wp.directory = ""
        print("Starting to write patch...")
        files = [ f.name for f in file ]
        wp.Start(files, show_progress if progress else None)
    
        print("\nVersion: " + em9304_version(engine))
    
        return True, "\nWriting Patch Done."
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-em9304_version:

em9304_version_
***************


    Output the application version from the Chip

    Args:
        engine (hciEngine): EM9304 device from which read the version.
    
    Returns::
        version (str): Application version from the chip.

    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.EM9304commands import em9304_version

    em9304_version(engine)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def em9304_version(engine):
        """
        Output the application version from the Chip
    
        Args:
            engine (hciEngine): EM9304 device from which read the version.
        
        Returns::
            version (str): Application version from the chip.
    
        """
        rsp = engine.send("EMSHI_ARC_VersionBleHost")
        if rsp.response.get("status") != 0:
            return "Version not found"
        else:
            semver = rsp.response.get("Version")
            return ".".join(["%s" % n for n in semver])
    


.. raw:: html
    
    </details>
    <hr>

this page is auto generated by BLEngine/docs/procedures.py