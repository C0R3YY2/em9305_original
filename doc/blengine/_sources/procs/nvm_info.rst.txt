
.. this file is auto generated by BLEngine/docs/procedures.py

=============================
nvm_info Procedures
=============================

.. raw:: html
    
    
    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    
.. _proc-nvm_erase:

nvm_erase_
**********


    Read nvm info page 
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.nvm_info import nvm_erase

    nvm_erase(engine, page='em', restart_in_cm=False)


**CLI usage**

.. code-block:: bash

    blengine run nvm_erase [-h] [-p PAGE] [--restart_in_cm]


options:
  -h, --help            show this help message and exit
  -p PAGE, --page PAGE  NVM info page
  --restart_in_cm       Restart in config mode


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def nvm_erase(engine, page="em", restart_in_cm=False):
        '''
        Read nvm info page 
        '''
    
        if restart_in_cm == True:
            ok, message = power_cycle(engine, "config")
            if ok == False:
                return ok, message
    
         # execute command
        __erase(engine, page)
    
        return True, "Erase nvm info page: Successfull"
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-nvm_read:

nvm_read_
*********


    Read nvm info page 
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.nvm_info import nvm_read

    nvm_read(engine, out_file='', page='em', restart_in_cm=False)


**CLI usage**

.. code-block:: bash

    blengine run nvm_read [-h] [--page PAGE] [-out OUT_FILE] [--restart_in_cm]


options:
  -h, --help            show this help message and exit
  --page PAGE, -p PAGE  NVM info page
  -out OUT_FILE, --out_file OUT_FILE
                        Output JSON file
  --restart_in_cm       Restart in config mode


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def nvm_read(engine, out_file="", page="em", restart_in_cm=False):
        '''
        Read nvm info page 
        '''
    
        if restart_in_cm == True:
            ok, message = power_cycle(engine, "config")
            if ok == False:
                return ok, message
    
        b = __read(engine, out_file, page)
    
        return True, b
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-nvm_write:

nvm_write_
**********


    Write nvm info page 

    # restart in CM should be in the json file ?
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.nvm_info import nvm_write

    nvm_write(engine, in_file=None, page='em', out_ihex_file=None, restart_in_cm=False)


**CLI usage**

.. code-block:: bash

    blengine run nvm_write [-h] [-p PAGE] [--in_file IN_FILE] [--restart_in_cm]
                      [--out_ihex_file OUT_IHEX_FILE]


options:
  -h, --help            show this help message and exit
  -p PAGE, --page PAGE  NVM info page
  --in_file IN_FILE, -in IN_FILE
                        Input JSON file
  --restart_in_cm       Restart in config mode
  --out_ihex_file OUT_IHEX_FILE, -ihex OUT_IHEX_FILE
                        Input JSON file


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def nvm_write(engine, in_file=None, page="em", out_ihex_file=None, restart_in_cm=False):
        '''
        Write nvm info page 
    
        # restart in CM should be in the json file ?
        '''
    
        if in_file and not Path(in_file).exists():
            return False, "File %s does not exist !" % Path(in_file).resolve()
    
        if restart_in_cm == True:
            ok, message = power_cycle(engine, "config")
            if ok == False:
                return ok, message
    
        # execute command
        b = __write(engine, in_file, page, out_ihex_file)
    
        return True, { hex(k):v.hex() for k, v in b.items() }
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-nvm_dump:

nvm_dump_
*********


    Dump Memory in a hex friendly format

    This is not optimized and take a while (128 bytes blocks)
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.nvm_info import nvm_dump

    nvm_dump(engine, file='', start='0x300000', blocs=1)


**CLI usage**

.. code-block:: bash

    blengine run nvm_dump [-h] [-f FILE] [-s START] [-b BLOCS]


options:
  -h, --help            show this help message and exit
  -f FILE, --file FILE  Output file
  -s START, --start START
                        Start address (hex format e.g. 0x300000)
  -b BLOCS, --blocs BLOCS
                        Number of 128 bytes blocs


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def nvm_dump(engine, file="", start="0x300000", blocs=1):
        '''
        Dump Memory in a hex friendly format
    
        This is not optimized and take a while (128 bytes blocks)
        '''
    
        dump = """Memory dump from 0x%08x to 0x%08x
    
                00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F
    """ % (int(start,16), int(start,16)+blocs*128)
    
        for block_address in range(int(start,16), int(start,16)+blocs*128, 128):
            for address in range(block_address, block_address+128, 16):
                dump += "0x%08x  " % (address)
                for idx in range(4):
                    pkt = engine.send("EMSMM_Read_At_Address",
                        Start_Address=address+idx*4, Data_Length=4)
                    assert pkt.response.get("status") == 0
                    if idx == 2:
                        dump += " "
                    dump += "%02x " % (pkt.response.get("Data")[3])
                    dump += "%02x " % (pkt.response.get("Data")[2])
                    dump += "%02x " % (pkt.response.get("Data")[1])
                    dump += "%02x " % (pkt.response.get("Data")[0])
                dump += "\n"
            dump += 60*'-'+"\n"
    
        if len(file) > 0:
            with open(file,"w") as f:
                logger.get("NVM Dump").info("dump written to %s" % file)
                f.write(dump)
    
        return True, dump
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-nvm_dump_to_ihex:

nvm_dump_to_ihex_
*****************


    Dump Memory in a ihex file.
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.nvm_info import nvm_dump_to_ihex

    nvm_dump_to_ihex(engine, out_ihex_file=None, full=False)


**CLI usage**

.. code-block:: bash

    blengine run nvm_dump_to_ihex [-h] [--out_ihex_file OUT_IHEX_FILE] [--full]


options:
  -h, --help            show this help message and exit
  --out_ihex_file OUT_IHEX_FILE, -ihex OUT_IHEX_FILE
                        Output ihex file
  --full, -f            Dump full NVM content


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def nvm_dump_to_ihex(engine, out_ihex_file=None, full=False):
        '''
        Dump Memory in a ihex file.
        '''
    
        ih = IntelHex()
    
        if not full:
    
            device_header_ok, device_headers = get_fw_headers(engine, output=False)
    
            if device_header_ok:
                # Dump the NVM_Bootloader
                for read_address in range(0x300000, 0x302000,248):
                    read_size = min(0x302000 - read_address, 248)
                    pkt = engine.send("EMSMM_Read_At_Address", Start_Address=read_address, Data_Length=read_size)
                    ih.puts(read_address,pkt.response.get("data"))
    
                for device_header in device_headers:
                    # Write header in ihex file
                    ih.puts(device_header.get("fw_start_addr")-0x28,device_header.value)
    
                    # Dump the firmware
                    for read_address in range(device_header.get("fw_start_addr"), device_header.get("fw_end_addr"),248):
                        read_size = min(device_header.get("fw_end_addr") - read_address, 248)
                        pkt = engine.send("EMSMM_Read_At_Address", Start_Address=read_address, Data_Length=read_size)
                        ih.puts(read_address,pkt.response.get("data"))
        else:
            for read_address in range(0x300000, 0x380000,248):
                    read_size = min(0x380000 - read_address, 248)
                    pkt = engine.send("EMSMM_Read_At_Address", Start_Address=read_address, Data_Length=read_size)
                    ih.puts(read_address,pkt.response.get("data"))
        
        # store in ihex file
        ih.write_hex_file(out_ihex_file)
        return True
    


.. raw:: html
    
    </details>
    <hr>

this page is auto generated by BLEngine/docs/procedures.py