
.. this file is auto generated by BLEngine/docs/procedures.py

=============================
firmware_update Procedures
=============================

.. raw:: html
    
    
    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    
.. _proc-fwu_get_firmware_update_information:

fwu_get_firmware_update_information_
************************************


    Request the firmware update information such as firmware update firmware version, target hardware, etc. 
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import fwu_get_firmware_update_information

    fwu_get_firmware_update_information(engine)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def fwu_get_firmware_update_information(engine):
        '''
        Request the firmware update information such as firmware update firmware version, target hardware, etc. 
        '''
        pkt = engine.make("EM_FWU_get_firmware_update_info")
    
        pkt = _send_cmd(engine, pkt)
    
        return pkt.response.get("fwu_status") == 0x00, pkt.response.get("IC_Family_ID") or pkt.status_text, pkt.response.get("Silicon_Version"), pkt.response.get("Firmware_Type"), pkt.response.get("Firmware_Version")
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-fwu_get_firmware_area_count:

fwu_get_firmware_area_count_
****************************


    Retrieve the number of firmware area 
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import fwu_get_firmware_area_count

    fwu_get_firmware_area_count(engine)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def fwu_get_firmware_area_count(engine):
        '''
        Retrieve the number of firmware area 
        '''
        pkt = engine.make("EM_FWU_get_firmware_area_count")
    
        pkt = _send_cmd(engine, pkt)
    
        return pkt.response.get("fwu_status") == 0x00, pkt.response.get("Firmware_Area_Counter") or pkt.status_text
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-fwu_get_firmware_info:

fwu_get_firmware_info_
**********************


    Get the firmware header corresponding to the index 
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import fwu_get_firmware_info

    fwu_get_firmware_info(engine, index=None, dump=False)


**CLI usage**

.. code-block:: bash

    blengine run fwu_get_firmware_info [-h] [-idx INDEX] [-d]


options:
  -h, --help            show this help message and exit
  -idx INDEX, --index INDEX
                        Index of the firmware
  -d, --dump            Show the decoded header


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def fwu_get_firmware_info(engine, index=None, dump=False):
        '''
        Get the firmware header corresponding to the index 
        '''
        pkt = engine.make("EM_FWU_get_firmware_info", Index=index)
    
        pkt = _send_cmd(engine, pkt)
    
        header = None
    
        if pkt.response.get("fwu_status") == 0x00:
            header = decode_fw_header(pkt.response.get("Firmware_Header"))
    
            if dump:
                print(header)
    
        return pkt.response.get("fwu_status") == 0x00, header or pkt.status_text
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-fwu_crypto_engine_init:

fwu_crypto_engine_init_
***********************


    Initialize the firmware update crypto engine
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import fwu_crypto_engine_init

    fwu_crypto_engine_init(engine, encryption_type=None, initialization_data=None)


**CLI usage**

.. code-block:: bash

    blengine run fwu_crypto_engine_init [-h] [-enc ENCRYPTION_TYPE]
                                   [-init INITIALIZATION_DATA]


options:
  -h, --help            show this help message and exit
  -enc ENCRYPTION_TYPE, --encryption_type ENCRYPTION_TYPE
                        Encrytion Type
  -init INITIALIZATION_DATA, --initialization_data INITIALIZATION_DATA
                        Crypto Engine Initialization Data (not present or 16
                        bytes long)


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def fwu_crypto_engine_init(engine, encryption_type=None, initialization_data=None):
        '''
        Initialize the firmware update crypto engine
        '''
    
        # if it's a string, decode it
        if type(initialization_data) == str:
            encryption_type = bytearray.fromhex(encryption_type.replace('0x',''))
        # if it's a encryption_type Packet take the bytes
        elif type(encryption_type) == GenericPacket:
            encryption_type = encryption_type.value
            
        if initialization_data is not None and len(initialization_data) != 0 and len(initialization_data) != 16:
            return False, "The size of the initialization data (0x%x) is not 16" % len(initialization_data)
    
        pkt = engine.make("EM_FWU_crypto_engine_init", Encryption_Type=encryption_type, Initialization_Data=initialization_data)
    
        pkt = _send_cmd(engine, pkt)
    
        return pkt.response.get("fwu_status") == 0x00, pkt.status_text
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-fwu_crypto_engine_upload_signature_material:

fwu_crypto_engine_upload_signature_material_
********************************************


    Initialize the firmware update crypto engine
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import fwu_crypto_engine_upload_signature_material

    fwu_crypto_engine_upload_signature_material(engine, signature_x=None, signature_y=None, digest=None)


**CLI usage**

.. code-block:: bash

    blengine run fwu_crypto_engine_upload_signature_material [-h] [-x SIGNATURE_X]
                                                        [-y SIGNATURE_Y]
                                                        [-dig DIGEST]


options:
  -h, --help            show this help message and exit
  -x SIGNATURE_X, --signature_x SIGNATURE_X
                        X coordinate of the signature
  -y SIGNATURE_Y, --signature_y SIGNATURE_Y
                        Y coordinate of the signature
  -dig DIGEST, --digest DIGEST
                        Digest


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def fwu_crypto_engine_upload_signature_material(engine, signature_x=None, signature_y=None, digest = None):
        '''
        Initialize the firmware update crypto engine
        '''
    
        # if it's a string, decode it
        if type(signature_x) == str:
            signature_x = bytearray.fromhex(signature_x.replace('0x',''))
        # if it's a signature_x Packet take the bytes
        elif type(signature_x) == GenericPacket:
            signature_x = signature_x.value
    
        if signature_x is None or len(signature_x) != 32:
            return False, "The size of the signature_x data (0x%x) is not 32" % len(signature_x)
    
        # if it's a string, decode it
        if type(signature_y) == str:
            signature_y = bytearray.fromhex(signature_y.replace('0x',''))
        # if it's a signature_y Packet take the bytes
        elif type(signature_y) == GenericPacket:
            signature_y = signature_y.value
    
        if signature_y is None or len(signature_y) != 32:
            return False, "The size of the signature_y data (0x%x) is not 32" % len(signature_y)
    
        # if it's a string, decode it
        if type(digest) == str:
            digest = bytearray.fromhex(digest.replace('0x',''))
        # if it's a digest Packet take the bytes
        elif type(digest) == GenericPacket:
            digest = digest.value
    
        if digest is None or len(digest) != 32:
            return False, "The size of the digest data (0x%x) is not 32" % len(digest)
    
        pkt = engine.make("EM_FWU_crypto_engine_upload_signature_material", Signature_X=signature_x, Signature_Y=signature_y, digest=digest)
    
        pkt = _send_cmd(engine, pkt)
    
        return pkt.response.get("fwu_status") == 0x00, pkt.status_text
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-fwu_firmware_upload_init:

fwu_firmware_upload_init_
*************************


    Init the upload of a firmware package
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import fwu_firmware_upload_init

    fwu_firmware_upload_init(engine, header=None)


**CLI usage**

.. code-block:: bash

    blengine run fwu_firmware_upload_init [-h] [-hdr HEADER]


options:
  -h, --help            show this help message and exit
  -hdr HEADER, --header HEADER
                        Header to send for initialization (hex format:
                        0x12345678)


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def fwu_firmware_upload_init(engine, header=None):
        '''
        Init the upload of a firmware package
        '''
    
        # if it's a string, decode it
        if type(header) == str:
            header = bytearray.fromhex(header.replace('0x',''))
        # if it's a Header Packet take the bytes
        elif type(header) == GenericPacket:
            header = header.value
            
        if len(header) != 0x28:
            return False, "The size of the header (0x%x) is not the size of a header" % len(header)
    
        crc_check = decode_fw_header(header).get("header_crc_ctrl")
    
        if not crc_check.startswith("OK"):
            return False, "CRC Error: %s" % crc_check
    
        pkt = engine.make("EM_FWU_firmware_upload_init", Header=header)
    
        pkt = _send_cmd(engine, pkt)
    
        return pkt.response.get("fwu_status") == 0x00, pkt.response.get("Block_Size") or pkt.status_text
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-fwu_firmware_write_data_block:

fwu_firmware_write_data_block_
******************************


    Write data block of the firmware
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import fwu_firmware_write_data_block

    fwu_firmware_write_data_block(engine, data=None, chunk_size=255)


**CLI usage**

.. code-block:: bash

    blengine run fwu_firmware_write_data_block [-h] [-d DATA] [-c CHUNK_SIZE]


options:
  -h, --help            show this help message and exit
  -d DATA, --data DATA  Data to write
  -c CHUNK_SIZE, --chunk_size CHUNK_SIZE
                        Size of chunk


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def fwu_firmware_write_data_block(engine, data=None, chunk_size=255):
        '''
        Write data block of the firmware
        '''
    
        # Convert the string in bytes
        if type(data) == str:
            data = bytes.fromhex(data.replace('0x',''))
    
        blocks = math.ceil(len(data) / chunk_size)
        
        # divide the data block into chunk
        # for i in range(0, len(data), chunk_size):
        for i in range(blocks):
            d = data[i*chunk_size:i*chunk_size+chunk_size]
            pkt = engine.make("EM_FWU_Data_Chunk", Data=d)
            _send_cmd(engine, pkt, wait_ack=False)
    
        return True, "Success, sent"
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-fwu_store_firmware_block:

fwu_store_firmware_block_
*************************


    Store the firmware block
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import fwu_store_firmware_block

    fwu_store_firmware_block(engine)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def fwu_store_firmware_block(engine):
        '''
        Store the firmware block
        '''
    
        pkt = engine.make("EM_FWU_store_firmware_block")
    
        pkt = _send_cmd(engine, pkt)
    
        return pkt.response.get("fwu_status") == 0, pkt.status_text
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-fwu_validate_firmware_update:

fwu_validate_firmware_update_
*****************************


    Validate the firmware update uploaded
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import fwu_validate_firmware_update

    fwu_validate_firmware_update(engine)


**CLI usage**

.. code-block:: bash

    No Help

.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def fwu_validate_firmware_update(engine):
        '''
        Validate the firmware update uploaded
        '''
    
        pkt = engine.make("EM_FWU_validate_firmware_update")
    
        pkt = _send_cmd(engine, pkt)
        
        return pkt.response.get("fwu_status") == 0, pkt.status_text
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-fwu_reboot:

fwu_reboot_
***********


    Reboot in a given Mode 
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import fwu_reboot

    fwu_reboot(engine, mode=None, no_dump=True)


**CLI usage**

.. code-block:: bash

    blengine run fwu_reboot [-h] [-m MODE]


options:
  -h, --help            show this help message and exit
  -m MODE, --mode MODE  Reboot Mode


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def fwu_reboot(engine, mode=None, no_dump=True):
        '''
        Reboot in a given Mode 
        '''
        pkt = engine.make("EM_FWU_reboot", Mode=mode)
    
        pkt = _send_cmd(engine, pkt)
    
        return pkt.response.get("fwu_status") == 0x00, pkt.status_text
    


.. raw:: html
    
    </details>
    <hr>

.. _proc-firmware_update:

firmware_update_
****************


    Main function for Firmware Update
    

**API usage**

.. code-block:: python

    from blengine.hci.procedures.firmware_update import firmware_update

    firmware_update(engine, package_file=None, transport='BLE', target_mac=None, target_name='EM9305_FWU')


**CLI usage**

.. code-block:: bash

    blengine run firmware_update [-h] [-m TARGET_MAC] [-n TARGET_NAME]
                            [-t TRANSPORT]
                            package_file

*Positional arguments:*

:package_file:

    Path to the package file


options:
  -h, --help            show this help message and exit
  -m TARGET_MAC, --target-mac TARGET_MAC
                        Mac Address of target, format (XX:XX:XX:XX:XX:XX)
  -n TARGET_NAME, --target-name TARGET_NAME
                        Name of Target
  -t TRANSPORT, --transport TRANSPORT
                        Transport mode. Support only "BLE" for now


.. raw:: html

   <details>
   <summary><a>Show Procedure Source Code</a></summary>

.. code-block:: python

    def firmware_update(engine, package_file=None, transport="BLE", target_mac=None, target_name = "EM9305_FWU"):
        '''
        Main function for Firmware Update
        '''
        
        log = logger.get("FWU")
    
        target = engine
        icfe = {1:"EM9305"}
    
        fte = {0: "FW Updater",
               1: "EM-Core",
               3: "User App",
               4: "Customer Bootloader"}
    
        mode = False
        log.info(f"Firmware Update over {transport}")
        if transport == "BLE":
            while mode != "FW Updater":
                device = BLELocalDevice(engine)
    
                log.info("Configuring Updater Device")
    
                device.reset()
    
                # set as server/ peripheral
    
                # make a register function that merge the three following calls ?
    
                device.set_name("FIRMWARE_UPDATER")
    
                device.set_role("Central")
    
                device.set_mode("NOT_CONNECTABLE,NOT_DISCOVERABLE")
    
                device.register_client()
    
                device.engine.send("LE_Write_Suggested_Default_Data_Length", Suggested_Max_TX_Octets=251, Suggested_Max_TX_Time=0x0848)
    
                log.info(f"Searching for target {target_mac or target_name}...")
    
                device.scan(duration_ms=2000)
    
    
                target = None
                if target_mac is not None:
                    target = device.get_device(bd_addr = mac(target_mac))
                else:
                    target = device.get_device(name = target_name)
    
                # connect directly to the ceoncerneed device since we know the MAC Address...
                #target = device.connect_by_addr(mac(target_mac), conn_interval_ms=200)
                
                assert target is not None, f"Device to update {target_mac or target_name} not found." 
    
                log.info(f"Device {target_name} ({target.bd_addr}) found, connecting...")
                
                target.connect(conn_interval_ms=7.5)
    
                log.info(f"Services Discovery...")
    
                target.discover_services()
    
                target.read_all_values()
    
                dut_fwu_service = target.get_service(uuid=uuids.EM.FWU_SERVICE.upper())
                assert dut_fwu_service is not None, "Firmware Update Service not found"
    
                dut_fwu_char = dut_fwu_service.get(uuids.EM.FWU_CMD_CHAR.upper())
                assert dut_fwu_char is not None, "Firmware update command characteristic not found"
                
                dut_fwu_char_desc = dut_fwu_char.get_descriptor(uuids.Gatt.CLIENT_CHARACTERISTIC_CONFIGURATION)
                assert dut_fwu_char_desc is not None, "Firmware update command characteristic descriptor not found"
    
                dut_fw_data_char = dut_fwu_service.get(uuids.EM.FWU_FWDATA_CHAR.upper())
                assert dut_fwu_char is not None, "Firmware data characteristic not found"
    
                log.info(f"Service Discovery complete.")
    
                target.enable_indication(dut_fwu_char), "Fail to enable indications"
    
                log.info(f"Service Configuration complete.")
                status, ic, di, ft, fwv = fwu_get_firmware_update_information(target)
                if not status:
                    return status, f"Unable to get firmware update information ({ic})."
                mode = fte[ft]
                if mode == "User App":
                    log.info("User Application detected. Restarting in FW Updater")
                    status, txt = fwu_reboot(target, 0x03) # Customer Bootloader selected.
                    if status == False:
                        return False, txt
                    log.info("Target restarting...")
    
        elif transport == "SPI":
            status, ic, di, ft, fwv = fwu_get_firmware_update_information(target)
            if not status:
                return status, f"Unable to get firmware update information ({ic})."
            mode = fte[ft]
            if mode == "User App":
                log.info("User Application detected. Restarting in FW Updater")
                status, txt = fwu_reboot(target, 0x03) # Customer Bootloader selected.
                if status == False:
                    return False, txt
                log.info("Target restarting...")
    
                time.sleep(0.5)
            
                status, ic, di, ft, fwv = fwu_get_firmware_update_information(target)
                if not status:
                    return status, f"Unable to get firmware update information ({ic})."
                mode = fte[ft]
                if mode != "FW Updater":
                    return False, f"Unable to start firmware updater ({ic})."
            
        else:
            return False, f"Unknown transport {transport}"
    
    
        log.info(f"Update Started.")
    
        log.info("Getting Target Informations.")
    
        status, ic, di, ft, fwv = fwu_get_firmware_update_information(target)
        if not status:
            return status, ic
    
        # The current DI05 Reference Design have been tested with DI04 test program for Info Page 3.
        # When reading Product Information, then the wrong DI is returned (DI04 instead of DI05).
        # It is therefore not a good thing. To avoid confustion at our customer, we don't display this
        # information.
        # log.info(f"Target Information: Family ID {icfe[ic]} (DI{di:02})")
        log.info(f"Target Information: Family ID {icfe[ic]}")
        log.info(f"Firmware Version: {fwv}; Firmware Type: {fte[ft]} ({ft})")
    
        status, counter = fwu_get_firmware_area_count(target)
        if not status:
            return status, counter
        
        log.debug("FW Count: %s" % counter)
    
        status = False
        status, header = fwu_get_firmware_info(target, 0)
        if not status:
            return status, header
        
        log.debug("fw hdr: %s" % header.hex())
    
        log.info("Processing Firmware Package %s." % package_file)
    
        fw_package = fwp_codec.FW_Package()
    
        with open(package_file,'rb') as f:
            fw_package.ParseFromString(f.read())
    
        log.info("%s Firmwares found in package." % len(fw_package.fw_elements))
    
        for n, fw_element in enumerate(fw_package.fw_elements):
            
            #log.info(f"{n} - Uploading Firmware {fw_element.section_code}.")
            name = fte[fw_element.fw_hdr.section_code]
    
            log.debug(f"{name} ({n}) - Crypto Init.")
    
            status, txt = fwu_crypto_engine_init(target, fw_element.enc_type, fw_element.crypto_init_data)
            if status == False:
                return False, txt
    
            log.debug(f"{name} ({n})  > {txt}")
            log.debug(f"{name} ({n}) - Crypto Upload.")
    
            status, txt = fwu_crypto_engine_upload_signature_material(target, fw_element.fw_signature.x, fw_element.fw_signature.y, fw_element.digest)
            if status == False:
                return False, txt
        
            log.info(f"{name} ({n}) - Upload Init.")
    
            log.debug(f"{name} ({n})   > {txt}")
            log.debug(f"{name} ({n}) - Firmware Upload Init")
    
            status, block_size = fwu_firmware_upload_init(target, fw_element.fw_hdr_raw.hex())
            if status == False:
                return False, block_size
                
            log.debug(f"{name} ({n}) : - Block Size {block_size}")
            log.debug(f"{name} ({n}) - Firmware Upload")
            
            log.info(f"{name} ({n}) - Upload Start.")
    
            _show_prct = 1
            for i in range(0, fw_element.fw_hdr.fw_size, block_size):
                
                prct = int(i / fw_element.fw_hdr.fw_size * 100)
                if prct >= _show_prct:
                    log.info(f"{name} ({n}) - {prct}%")
                    _show_prct = prct + 13
    
                status, text = fwu_firmware_write_data_block(target, fw_element.fw_code_raw[i:i+block_size].hex(), 200)
                if status == False:
                    return False, text
    
                status, text = fwu_store_firmware_block(target)
                if status == False:
                    return False, text
                    
            log.info(f"{name} ({n}) - Upload Complete.")
    
            log.debug(f"{name} ({n}) - Validation")
    
            # status = False
            status, text = fwu_validate_firmware_update(target)
            if status == False:
                return False, text
            
            log.debug(f"{name} ({n})  > {text}")
    
            log.info(f"{name} ({n}) - Firmware Uploaded.")
    
        log.info(f"Target Reboot.")
    
        status = False
        status, txt = fwu_reboot(target, 0x02)
        if status == False:
            return False, txt
    
        return True, f"{package_file} Uploaded Successfully"
    


.. raw:: html
    
    </details>
    <hr>

this page is auto generated by BLEngine/docs/procedures.py