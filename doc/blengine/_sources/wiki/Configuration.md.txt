# Configuration

Interacting with external device may require an extended configuration system, so BLEngine tries to be simple.

A valid configuration file is needed to specify the devices connected to the host computer running `BLEngine`. This file also provides some application specific settings when relevant.

The engine handles a unique configuration object even if there are be more than one configuration file. At the end, all these configurations files are loaded and merged together. The values defined in the last opened configuration file take precedence and overwrite the previously defined ones.


## BLEngine Configuration files

By default BLEngine will search for a `config.cfg` file in the following directories in the order given below. It will stop searching on the first match.

   1. Current working Directory
   1. `./config` folder within the current directory
   1. In the directory designated by the `BLENGINE_CONFIG_PATH` environnment variable
   1. User Home Directory
   1. `./config` folder within the user home directory
   1. In the current executed script/executable folder location
   1. `./config` folder within the current executed script/executable folder location
   1. a config folder relative to the actual blengine python package installation (pip use case)

 You can also override the search by specifying the absolute path (or relative path to the current working directrory) on the command line with the `--config <path>` option.

For a given configuration file found and loaded, BLEngine will search in the same directory for a similarly named file with the `_local` suffix (i.e. `config_local.cfg`). If one is found, it will be merged after having loaded the original configuration file `config.cfg` allowing overwriting sections values. 
The `config_local.cfg` file allows an end user to refine its own configuration without changing any value defined in the default configuration.
However, it has to be mentioned that this local configuration file is not provided in the SDK and has to be created by the end user if needed.
For that, it can be created by getting inspired from the default original `config.cfg` file that contains extensive documentation about each entry.

## Configuration structure

The configuration system use the `configobj` module, which is basically an INI file manager on steroids. See the more details here: 

(Configobj on ReadTheDocs)[https://configobj.readthedocs.io/en/latest/configobj.html#config-files]

The configuration file is obviously an INI file with subsections support and comments with `#comment`.


## Configuration Sections

### Device Specific Sections

Those sections are used to describe all the devices that can be used by the application.
Since there might be more than one device connected to the host computer, several devices sections can be defined by assigning them a friendly name that will be easier to use, one device section per one serial connection. As many device sections as needed can be created. 

The only required parameter being just the port parameter which will be different than the one in the other device section.
The sectionâ€™s name specifies the device name to be directly used by the application either by CLI or in scripts.

There is a default device section which name is ``default_device``. This is the configuration
that is applied in case no specific device is provided when running the application.

A section can be merged or included in others section with the ``include_section`` special keyword.

The following example shows a section that defines the default serial parameters.

```ini
[default_serial_config]
baudrate = 115200 # optional, default value
rtscts = 0 # optional, default value
flowCtrl = 0 # optional, default value
timeout = 0.1 # optional, default value
device_model = EM9305 # optional, default value
```


Then, the section below shows how a device is defined. Some specific parameters are provided
like the port to use to communicate with the device. But for what concern the serial configuration, the above mentioned section is simply included.

```ini
[9305DVKBOARD-01]
port = COM4 #required anyway or taken from --port CLI option
# Serial port identifier (COM## on windows and /dev/tty### on linux)
port = COM22
# Device require HCI authentication
authentication = true
# include default serial configuration section
include_section = default_serial_config
```


It is possible to override an already defined section parameter by creating a user custom configuration `config_local.cfg` file in which the already defined section is redefined. Then, all parameters given underneath this section will override the same parameters defined into the `config.cfg` file.

In the following `config_local.cfg` example, the communication port is overriden to be COM34 instead of COM22 as previously defined above.

```ini
[9305DVKBOARD-01]
port = COM34 # this will change the device port to COM34
```

**You will likely need to update your config file to match your system requirements and devices connected before using BLEngine.**

### NVM Configuration Section

The `nvm_infos` section block specifies a list of folder paths that contain information page description files, separated by comma's. 

These paths are relative to the configuration file self location. Each json file in those sub-folders will then be recursively parsed.

**Experimental** The `from_repo` key specify a repository to download like in the example below (commented line):

```
[nvm_infos]
json_folders = ./nvm_infos/

#from_repo = https://its-ado.swatchgroup.net/EMMarinProjects/T9305/_git/T9305_Config
```

Here, the `./nvm_infos/` relative path will be used to read from/write to information pages.


### HCI Protocol configuration

Options for changing protocol timeouts:

```
[HCIPacketProtocol]
# timeout in seconds before the protocol give up on a command response
ack_timeout = 5
# Timeout in seconds for packet read (increase it in case of huge packets payload)
read_timeout = 1

```

### Logger configuration

This section block is used to control how information are logged by the engine.

```
[logger]
# name of the default top level logger
name = blengine
# level of the default logger
level = DEBUG
# specify file logging level and filename, leave emnpty to disable it
log2file = DEBUG
log2file_path = ./logs/blengine

# log to the standard output, specify level or leave empty to disable it
log2screen = INFO

[[handlers]]
    [[[default]]]
        level = DEBUG
        formatter = standard
        class = logging.StreamHandler
        stream = ext://sys.stdout
```

## In a script module

The `blengine.core.config` package contains helpers to autoload your configuration inside a script. The example below shows how to proceed:

```python
from blengine.core import config

# load a configuration file and merge it
config.load("myconfig.cfg")

# merge dictionary with the current config object
config_dict = { 
  "9305": "super"
}

config.merge(config_dict)
```

To access the global config object, get the `config` attribute of the `config` module :

```python
from blengine.core import config
# or , to work directly with the global config
# from blengine.core.config import config

global_config = config.config

# get a sub-section

subconfig = global_config.get("my_section")

# merge something with a sub section

config_dict = { 
  "9305": "super"
}

config.merge(config_dict, subconfig)
```