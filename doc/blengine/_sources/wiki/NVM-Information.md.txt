# NVM Configuration

## Summary

This section describes how the specific Device Configuration are handled with the tools provided along with EM Microelectronic SDK. 

Device configuration such as MAC Address and lock bits as well as trimming data (i.e., specific values that must be written in specific registers during boot sequence) are configured during manufacturing process. However, it is possible to e.g., read and write the Device Configuration data (authentication might be required). The representation of the data stored in NVM Information Page uses JSON format.

A new entry in the standard BLEngine configuration files defines the folder from which the json files will be loaded. For example, the following config entry will load any json files found in the `nvm_infos` folder, this folder being at the same level than the config.cfg file :

```
[nvm_infos]
json_folders=./nvm_infos
```

This entry is the default value for now, and a nvm_infos folder is included with default JSON files.

## NVM Information structure

NVM information is represented with a tree structure that contains the information category name as top-level.


Each category contains the device_model as children, then the category specific data :

```python
{
  "<category name>": {
    "<device_model>": {
      ... data ...
    }
  }
}
```

## Categories

### Description

The description category defines the memory pages name, along with page number and a content.

Each page contains a list of entries with a name, an address, a type and specific data.
The different types are described below.

```
{
    "descriptions": {
        "EM9305": {
            "em": {
                "page": 3,
                "content": {
                    "MAC Address": {
                        "address": "0x1C00",
                        "type": "mac",
                        "value": null
                    },
                    "Device ID": {
                        "address": "0x1C40",
                        "type": "id",
                        "value": null
                    },
                 }
             }
         }
     }
}
```

### Data

The data information describes memory content and is actually used to read and write in the memory, it contains a list of entries named after the descriptions above or the registers below.

```
{
    "data": {
        "EM9305": {
            "em": {
                "content": {
                    "MAC Address": {
                        "value": "A4:00:00:00:93:05"
                    },
                    "Device ID": {
                        "value": "01014e305958333334010101010031303230"
                    },
                    "Trimming Data": {
                        "data": {
                            "RegNvmTime": {
                                "NvmEraseTime": 8,
                                "NvmWriteTime": 8
                        },
                 }
             }
         }
     }
}
```

### Registers

This structure describes registers with a name, a description, an address and a default value, each register contains bitfield description with each entries beine described by a name, a description, a mask and a shift value.

```
{
"registers": {
    "EM9305": {
        "RegNvmTime": {
            "description": "NVM write/erase operation timing",
            "address": "0x00F02810",
            "default": "0x00000808",
            "bitfield": {
                "NvmEraseTime": {
                    "description": "Erase time",
                    "mask": "0x00000F00",
                    "shift": 8
                },
                "NvmWriteTime": {
                    "description": "Write time",
                    "mask": "0x0000000F",
                    "shift": 0
                }
            }
        },
      }
   }
}
```

### Configuration

The configuration information is mainly settings related to a particular device, with general information.

```
{
    "configurations": {
        "EM9305": {
            "nvm_iram_start": 1589248,
            "nvm_iram_end": 1605632,
            "nvm_main_start": 3145728,
            "nvm_main_end": 3670016,
            "nvm_info_start": 4194304,
            "nvm_info_end": 4227072,
            "nvm_info_page3": 4218880,
            "swape_size_iram": 4,
            "swape_size_main": 8,
            "swape_size_info": 8,
            "packet_size": 248,
            "file_line_size": 32,
            "padding": null,
            "nvm_prog": "8bd1a64e742e59b1",
            "nvm_info_page3_prog": 4226816,
            "device_info": {
                "product_info_version": 1,
                "ic_id": 1,
                "lot_id": "N0YX334",
                "wafer_number": 1,
                "x_position": 1,
                "y_position": 1,
                "markset": 1,
                "test_prog_rev": 0,
                "test_prog_version": "102",
                "package_type": 48
            }
        }
    }
}
```

## Entries type

### registers

### mac

### id

## Default files structure

This describa a recommended file structure, but since the JSON structure is explicit, everything can be in one file.

The default files for nvm descriptions, configuration, data and registers definitions are each in their own file, separated by products :

```
./nvm_infos
├── /<DEVICENAME>
│       configurations.json
│       nvm_default_data.json
│       nvm_descriptions.json
│       registers.json
│
└── /EM9305
        configurations.json
        nvm_default_data.json
        nvm_descriptions.json
        registers.json
```

## Default behavior on loading

The device_model level will be automatically loaded for an engine if it match with the device_model from the configuration file.