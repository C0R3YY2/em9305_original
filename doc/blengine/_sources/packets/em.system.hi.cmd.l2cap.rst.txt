
.. this file is auto generated by docs/packets.py

================================
em.system.hi.cmd.l2cap 
================================

.. contents:: Index
   :local:
   :depth: 2

.. raw:: html

    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    <div id="count">37 Packets</div>


.. _pkt-EMSHI_L2CAP_Configure:


EMSHI_L2CAP_Configure_
----------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_Configure", connHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_Configure --connHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8a01

Used by the upper layers/application to 
  |  register a LE L2CAP connection oriented channel listening handler.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8a", "1", "<B", "|  No Description"
	"**command**", "0x01", "1", "<B", "|  No Description"
	"**connHandle**", "", "2", "<H", "|  The remote device connection Handle."
	"**psm**", "0x00", "2", "<H", "|  The PSM identifying the protocol/service registering the Handler."
	"**hciTxCredits**", "0x00", "1", "<B", "|  The number of HCI Transmit buffers that this handler is allowed to 
  |                    fill when sending data."
	"**remoteUpperLayerMTU**", "0x00", "2", "<H", "|  The Maximum size of the payload allowed to be sent to the remote"
	"**localUpperLayerMTU**", "0x00", "2", "<H", "|  The Maximum size of the payload allowed to be sent from the remote"
	"**localUpperLayerMPS**", "0x00", "2", "<H", "|  The Maximum size of the payload allowed to be sent from the remote"
	"**localAccessPermissions**", "0x00", "1", "<B", "|  The local channel permissions required to this Connection."
	"**remoteChannelID**", "0x00", "2", "<H", "|  The remote channel Allocated to this Connection."
	"**localCredits**", "0x00", "2", "<H", "|  The local available credits"
	"**remoteCredits**", "0x00", "2", "<H", "|  The number of buffer(s) available in the remote device"
	"**rxOffset**", "0x00", "2", "<H", "|  The RX current offset"
	"**txLeft**", "0x00", "2", "<H", "|  The length of data remaining"
	"**txDone**", "0x00", "2", "<H", "|  The length of data already transmitted"
	"**txSDULength**", "0x00", "2", "<H", "|  The total number of data to transmit"
	"**localChannelID**", "0x00", "2", "<H", "|  The local channel Allocated to this Connection."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_AllocateReceiveBuffer:


EMSHI_L2CAP_AllocateReceiveBuffer_
----------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_AllocateReceiveBuffer")``

**CLI usage:**
``blengine send EMSHI_L2CAP_AllocateReceiveBuffer``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8a02

Used by the L2CAP upper layers to 
  |  add receive buffer to a registered Handler.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8a", "1", "<B", "|  No Description"
	"**command**", "0x02", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_RegisterListenningHandler:


EMSHI_L2CAP_RegisterListenningHandler_
--------------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_RegisterListenningHandler")``

**CLI usage:**
``blengine send EMSHI_L2CAP_RegisterListenningHandler``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8a03

Used by the upper layers/application to 
  |  register a LE L2CAP connection oriented channel listening handler.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8a", "1", "<B", "|  No Description"
	"**command**", "0x03", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_DeregisterListenningHandler:


EMSHI_L2CAP_DeregisterListenningHandler_
----------------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_DeregisterListenningHandler")``

**CLI usage:**
``blengine send EMSHI_L2CAP_DeregisterListenningHandler``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8a04

Used by the upper layers/application to 
  |  de-register a LE L2CAP connection oriented channel listening handler.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8a", "1", "<B", "|  No Description"
	"**command**", "0x04", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_SendData:


EMSHI_L2CAP_SendData_
---------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_SendData", data_len=0xXx,data=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_SendData --data_len=0xXx --data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8a05

Used by the L2CAP upper layers to send L2CAP data.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8a", "1", "<B", "|  No Description"
	"**command**", "0x05", "1", "<B", "|  No Description"
	"**data_len**", "", "2", "<H", "|  The length of data contained in the data pointer."
	"**data**", "", "0", "None", "|  A pointer to the data to send to the remote device,
  |                    the pointer should be available until the packet sent
  |                    acknowledgement. (BLEL2CAPEVENT_LEFRAME_TXCOMPLETE event)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_Connect:


EMSHI_L2CAP_Connect_
--------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_Connect")``

**CLI usage:**
``blengine send EMSHI_L2CAP_Connect``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8a06

Used by the upper layers/application to connect 
  |  with a remote device using a LE L2CAP connection oriented channel.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8a", "1", "<B", "|  No Description"
	"**command**", "0x06", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**connectionFailureCause**", "2", "<H", "|  Received Packet number"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_Reject_Invalid:


EMSHI_L2CAP_Reject_Invalid_
---------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_Reject_Invalid", identifier=0xXx,cid=0xXx,cid_remote=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_Reject_Invalid --identifier=0xXx --cid=0xXx --cid_remote=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8a07

Used by the L2CAP upper layers to reject invalid identifier



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8a", "1", "<B", "|  No Description"
	"**command**", "0x07", "1", "<B", "|  No Description"
	"**identifier**", "", "1", "<B", "|  Identifier command packet rejected."
	"**cid**", "", "2", "<2s", "|  Local Channel Idendifier"
	"**cid_remote**", "", "2", "<2s", "|  Remote Channel Identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_GetNumberReceivedPackets:


EMSHI_L2CAP_GetNumberReceivedPackets_
-------------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_GetNumberReceivedPackets")``

**CLI usage:**
``blengine send EMSHI_L2CAP_GetNumberReceivedPackets``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8a08

Used by the L2CAP to get number of received packets



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8a", "1", "<B", "|  No Description"
	"**command**", "0x08", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**NumReceivedPackets**", "2", "<H", "|  Received Packet number"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_Disconnect:


EMSHI_L2CAP_Disconnect_
-----------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_Disconnect", identifier=0xXx,cid=0xXx,cid_remote=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_Disconnect --identifier=0xXx --cid=0xXx --cid_remote=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8a09

Used by the L2CAP upper layers to Disconnect



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8a", "1", "<B", "|  No Description"
	"**command**", "0x09", "1", "<B", "|  No Description"
	"**identifier**", "", "1", "<B", "|  Identifier command packet rejected."
	"**cid**", "", "2", "<H", "|  Local Channel Idendifier"
	"**cid_remote**", "", "2", "<H", "|  Remote Channel Identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_SendFixedChannelDataWithHeader:


EMSHI_L2CAP_SendFixedChannelDataWithHeader_
-------------------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_SendFixedChannelDataWithHeader", channelId=0xXx,first_block_data_len=0xXx,second_block_data_len=0xXx,block_data=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_SendFixedChannelDataWithHeader --channelId=0xXx --first_block_data_len=0xXx --second_block_data_len=0xXx --block_data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8a0a

Used by the L2CAP upper layers to send L2CAP data using a fixed channel Id.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8a", "1", "<B", "|  No Description"
	"**command**", "0x0a", "1", "<B", "|  No Description"
	"**channelId**", "", "2", "<H", "|  The Selected channel to send the data."
	"**first_block_data_len**", "", "2", "<H", "|  The length of data contained in the data pointer."
	"**second_block_data_len**", "", "2", "<H", "|  The length of data contained in the data pointer."
	"**block_data**", "", "0", "None", "|  A pointer to the data to send to the remote device,
  |                    the pointer should be available until the packet sent
  |                    acknowledgement. (BLEL2CAPEVENT_LEFRAME_TXCOMPLETE event)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_Welcome:


EMSHI_L2CAP_emb_Welcome_
------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_Welcome")``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_Welcome``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c00

Welcome to the L2CAP



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x00", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_Init:


EMSHI_L2CAP_emb_Init_
---------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_Init")``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_Init``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c01

Initialize L2C subsystem



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x01", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_MasterInit:


EMSHI_L2CAP_emb_MasterInit_
---------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_MasterInit")``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_MasterInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c02

Initialize L2C for operation as a Bluetooth LE master



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x02", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_SlaveInit:


EMSHI_L2CAP_emb_SlaveInit_
--------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_SlaveInit")``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_SlaveInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c03

Initialize L2C for operation as a Bluetooth LE slave



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x03", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_Register:


EMSHI_L2CAP_emb_Register_
-------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_Register", cid=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_Register --cid=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c04

called by the L2C client, such as ATT or SMP, to register for the given CID



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x04", "1", "<B", "|  No Description"
	"**cid**", "", "1", "<B", "|  channel identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_DataReq:


EMSHI_L2CAP_emb_DataReq_
------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_DataReq", cid=0xXx,handle=0xXx,len=0xXx,pL2CPacket=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_DataReq --cid=0xXx --handle=0xXx --len=0xXx --pL2CPacket=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c05

Send an L2CAP data packet on the given CID



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x05", "1", "<B", "|  No Description"
	"**cid**", "", "2", "<H", "|  The channel identifier"
	"**handle**", "", "2", "<H", "|  The connection handle.  The client receives this handle from DM"
	"**len**", "", "2", "<H", "|  The length of the payload data in pPacket."
	"**pL2CPacket**", "", "1", "<B", "|  A buffer containing the packet."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_DmSigReq:


EMSHI_L2CAP_emb_DmSigReq_
-------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_DmSigReq", handle=0xXx,code=0xXx,len=0xXx,pParam=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_DmSigReq --handle=0xXx --code=0xXx --len=0xXx --pParam=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c06

Build and send a signaling packet



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x06", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  The connection handle."
	"**code**", "", "1", "<B", "|  Type of command."
	"**len**", "", "1", "<B", "|  Length of ef pParam."
	"**pParam**", "", "1", "<B", "|  parameters of command to send."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocInit:


EMSHI_L2CAP_emb_CocInit_
------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocInit")``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c07

Initialize L2C connection oriented channel subsystem



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x07", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocRegister:


EMSHI_L2CAP_emb_CocRegister_
----------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocRegister", psm=0xXx,mps=0xXx,mtu=0xXx,credits=0xXx,authoriz=0xXx,secLevel=0xXx,role=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocRegister --psm=0xXx --mps=0xXx --mtu=0xXx --credits=0xXx --authoriz=0xXx --secLevel=0xXx --role=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c08

Register to use a connection oriented channel, as either a channel acceptor,
  |   *          initiator, or both.  If registering as channel acceptor then the PSM is specified.
  |   *          After registering, a connection can be established by the client using this
  |   *          registration instance.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x08", "1", "<B", "|  No Description"
	"**psm**", "", "2", "<H", "|  Protocol service multiplexer"
	"**mps**", "", "2", "<H", "|  Maximum receive PDU fragment size"
	"**mtu**", "", "2", "<H", "|  Maximum receive data packet size"
	"**credits**", "", "2", "<H", "|  Data packet receive credits for this channel"
	"**authoriz**", "", "1", "<B", "|  TRUE if authorization is required"
	"**secLevel**", "", "1", "<B", "|  Channel minimum security level requirements"
	"**role**", "", "1", "<B", "|  Channel initiator/acceptor role"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**RegId**", "2", "<H", "|  The registration ID of the local device."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocDeregister:


EMSHI_L2CAP_emb_CocDeregister_
------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocDeregister", regId=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocDeregister --regId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c09

Deregister and deallocate a connection oriented channel registration instance.
  |                This function should only be called if there are no active channels using this registration instance



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x09", "1", "<B", "|  No Description"
	"**regId**", "", "2", "<H", "|  Connection oriented channel registration ID"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocSetAcceptCback:


EMSHI_L2CAP_emb_CocSetAcceptCback_
----------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocSetAcceptCback", regId=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocSetAcceptCback --regId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c0a

Set the channel accept callback



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x0a", "1", "<B", "|  No Description"
	"**regId**", "", "1", "<B", "|  Connection oriented channel registration ID"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocConnectReq:


EMSHI_L2CAP_emb_CocConnectReq_
------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocConnectReq", connId=0xXx,regId=0xXx,psm=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocConnectReq --connId=0xXx --regId=0xXx --psm=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c0b

Initiate a connection to the given peer PSM



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x0b", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID"
	"**regId**", "", "2", "<H", "|  The associated registration instance"
	"**psm**", "", "2", "<H", "|  Peer PSM"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**cid**", "2", "<H", "|  Channel Id"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocDisconnectReq:


EMSHI_L2CAP_emb_CocDisconnectReq_
---------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocDisconnectReq", cid=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocDisconnectReq --cid=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c0c

Disconnect the channel for the given CID



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x0c", "1", "<B", "|  No Description"
	"**cid**", "", "2", "<H", "|  Channel ID"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocDataReq:


EMSHI_L2CAP_emb_CocDataReq_
---------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocDataReq", cid=0xXx,len=0xXx,pPayload=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocDataReq --cid=0xXx --len=0xXx --pPayload=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c0d

Send an L2CAP data packet on the given connection oriented CID



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x0d", "1", "<B", "|  No Description"
	"**cid**", "", "2", "<H", "|  The local channel identifier"
	"**len**", "", "2", "<H", "|  The length of the payload data in pPacket"
	"**pPayload**", "", "16", "<16s", "|  Packet payload data"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocEnhancedConnectReq:


EMSHI_L2CAP_emb_CocEnhancedConnectReq_
--------------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocEnhancedConnectReq", connId=0xXx,regId=0xXx,psm=0xXx,credits=0xXx,numChan=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocEnhancedConnectReq --connId=0xXx --regId=0xXx --psm=0xXx --credits=0xXx --numChan=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c0e

Send a request to open enhanced credit based channels



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x0e", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID"
	"**regId**", "", "1", "<B", "|  The associated registration instance"
	"**psm**", "", "1", "<B", "|  The protocol slave multiplexer."
	"**credits**", "", "1", "<B", "|  The initial number of credits for each CID channel."
	"**numChan**", "", "1", "<B", "|  The number of channels to create - L2C_MAX_EN_CHAN max."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocEnhancedReconfigReq:


EMSHI_L2CAP_emb_CocEnhancedReconfigReq_
---------------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocEnhancedReconfigReq", connId=0xXx,mtu=0xXx,mps=0xXx,numChan=0xXx,pChanList=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocEnhancedReconfigReq --connId=0xXx --mtu=0xXx --mps=0xXx --numChan=0xXx --pChanList=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c0f

Send a request to reconfigure enhanced credit based channels



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x0f", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID."
	"**mtu**", "", "1", "<B", "|  The maximum transmission unit of each source CID channel."
	"**mps**", "", "1", "<B", "|  The maximum payload size on each source CID channel."
	"**numChan**", "", "1", "<B", "|  The number of channels to create (1 to L2C_MAX_EN_CHAN)."
	"**pChanList**", "", "0", "None", "|  A list of local CID to Reconfig (L2C_MAX_EN_CHAN channels, set unused to 0)."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocErrorTest:


EMSHI_L2CAP_emb_CocErrorTest_
-----------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocErrorTest", result=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocErrorTest --result=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c10

For testing purposes only



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x10", "1", "<B", "|  No Description"
	"**result**", "", "1", "<B", "|  Result code"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CreditSendTest:


EMSHI_L2CAP_emb_CreditSendTest_
-------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CreditSendTest", cid=0xXx,credits=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CreditSendTest --cid=0xXx --credits=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c11

For testing purposes only



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x11", "1", "<B", "|  No Description"
	"**cid**", "", "1", "<B", "|  The local channel identifier."
	"**credits**", "", "1", "<B", "|  credits to send"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_DmConnUpdateReq:


EMSHI_L2CAP_emb_DmConnUpdateReq_
--------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_DmConnUpdateReq", handle=0xXx,connIntervalMin=0xXx,connIntervalMax=0xXx,connLatency=0xXx,supTimeout=0xXx,minCeLen=0xXx,maxCeLen=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_DmConnUpdateReq --handle=0xXx --connIntervalMin=0xXx --connIntervalMax=0xXx --connLatency=0xXx --supTimeout=0xXx --minCeLen=0xXx --maxCeLen=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c12

This function is called by DM to send an L2CAP connection update request



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x12", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  Connection Handle"
	"**connIntervalMin**", "", "1", "<B", "|  Minimum connection interval."
	"**connIntervalMax**", "", "1", "<B", "|  Maximum connection interval."
	"**connLatency**", "", "1", "<B", "|  Maximum peripheral latency."
	"**supTimeout**", "", "1", "<B", "|  Supervision timeout."
	"**minCeLen**", "", "1", "<B", "|  Minimum CE length."
	"**maxCeLen**", "", "1", "<B", "|  Maximum CE length."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_DmConnUpdateRsp:


EMSHI_L2CAP_emb_DmConnUpdateRsp_
--------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_DmConnUpdateRsp", identifier=0xXx,handle=0xXx,result=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_DmConnUpdateRsp --identifier=0xXx --handle=0xXx --result=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c13

This function is called by DM to send an L2CAP connection update response



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x13", "1", "<B", "|  No Description"
	"**identifier**", "", "1", "<B", "|  Identifier value previously passed from L2C to DM."
	"**handle**", "", "1", "<B", "|  The connection handle."
	"**result**", "", "1", "<B", "|  Connection update response result."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_SlaveHandlerInit:


EMSHI_L2CAP_emb_SlaveHandlerInit_
---------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_SlaveHandlerInit")``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_SlaveHandlerInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c14

Event handler initialization function for L2C when operating as a slave



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x14", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_SlaveHandler:


EMSHI_L2CAP_emb_SlaveHandler_
-----------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_SlaveHandler", event=0xXx,param=0xXx,hdr_event=0xXx,status=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_SlaveHandler --event=0xXx --param=0xXx --hdr_event=0xXx --status=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c15

The WSF event handler for L2C when operating as a slave



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x15", "1", "<B", "|  No Description"
	"**event**", "", "1", "<B", "|  Event mask."
	"**param**", "", "1", "<B", "|  General purpose parameter passed to event handler"
	"**hdr_event**", "", "1", "<B", "|  General purpose event value passed to event handler"
	"**status**", "", "1", "<B", "|  General purpose status value passed to event handler"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocHandlerInit:


EMSHI_L2CAP_emb_CocHandlerInit_
-------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocHandlerInit", handlerId=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocHandlerInit --handlerId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c16

Event handler initialization function for L2C with connection oriented channels



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x16", "1", "<B", "|  No Description"
	"**handlerId**", "", "1", "<B", "|  ID for this event handler."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_CocHandler:


EMSHI_L2CAP_emb_CocHandler_
---------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_CocHandler", event=0xXx,param=0xXx,hdr_event=0xXx,status=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_CocHandler --event=0xXx --param=0xXx --hdr_event=0xXx --status=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c17

The WSF event handler for L2C with connection oriented channels



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x17", "1", "<B", "|  No Description"
	"**event**", "", "1", "<B", "|  Event mask."
	"**param**", "", "1", "<B", "|  General purpose parameter passed to event handler"
	"**hdr_event**", "", "1", "<B", "|  General purpose event value passed to event handler"
	"**status**", "", "1", "<B", "|  General purpose status value passed to event handler"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_SendCmdReject:


EMSHI_L2CAP_emb_SendCmdReject_
------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_SendCmdReject", handle=0xXx,identifier=0xXx,reason=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_SendCmdReject --handle=0xXx --identifier=0xXx --reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c18

Send a command reject message with reason not understood



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x18", "1", "<B", "|  No Description"
	"**handle**", "", "2", "<H", "|  The connection handle."
	"**identifier**", "", "1", "<B", "|  Identifier value in received message being rejected."
	"**reason**", "", "2", "<H", "|  Why request was rejected."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_RxSignalingPkt:


EMSHI_L2CAP_emb_RxSignalingPkt_
-------------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_RxSignalingPkt", handle=0xXx,len=0xXx,pPacket=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_RxSignalingPkt --handle=0xXx --len=0xXx --pPacket=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c19

Process received L2CAP signaling packets



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x19", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  The connection handle."
	"**len**", "", "1", "<B", "|  The length of the L2CAP payload data in pPacket."
	"**pPacket**", "", "1", "<B", "|  A buffer containing the packet."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_L2CAP_emb_MsgAlloc:


EMSHI_L2CAP_emb_MsgAlloc_
-------------------------

**API usage:** 
``engine.send("EMSHI_L2CAP_emb_MsgAlloc", len=0xXx)``

**CLI usage:**
``blengine send EMSHI_L2CAP_emb_MsgAlloc --len=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8c2a

Allocate an L2CAP data message buffer to be used for the L2CAP protocol messages



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8c", "1", "<B", "|  No Description"
	"**command**", "0x2a", "1", "<B", "|  No Description"
	"**len**", "", "1", "<B", "|  Message length in bytes."

.. raw:: html
    
    <hr>

