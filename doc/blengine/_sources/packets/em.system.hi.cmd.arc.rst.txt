
.. this file is auto generated by docs/packets.py

==============================
em.system.hi.cmd.arc 
==============================

.. contents:: Index
   :local:
   :depth: 2

.. raw:: html

    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    <div id="count">38 Packets</div>


.. _pkt-EMSHI_ARC_Welcome:


EMSHI_ARC_Welcome_
------------------

**API usage:** 
``engine.send("EMSHI_ARC_Welcome")``

**CLI usage:**
``blengine send EMSHI_ARC_Welcome``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8401

Welcome to the 930x.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x01", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Command:


EMSHI_ARC_Command_
------------------

**API usage:** 
``engine.send("EMSHI_ARC_Command", Type=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_Command --Type=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8402

Execute ARC Command



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x02", "1", "<B", "|  No Description"
	"**Type**", "", "1", "<B", "|  Arc_Command_t"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_VersionBleHost:


EMSHI_ARC_VersionBleHost_
-------------------------

**API usage:** 
``engine.send("EMSHI_ARC_VersionBleHost")``

**CLI usage:**
``blengine send EMSHI_ARC_VersionBleHost``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8403

Version BLE Host.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x03", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Version**", "3", "<3B", "|  Version: Version.Major.Minor"
	"**Stack**", "1", "<B", "|  Stack:
  |                   AW  = 1
  |                   EMB = 2"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Timer:


EMSHI_ARC_Timer_
----------------

**API usage:** 
``engine.send("EMSHI_ARC_Timer")``

**CLI usage:**
``blengine send EMSHI_ARC_Timer``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8420

Execute COMMAND with or whitout timer



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x20", "1", "<B", "|  No Description"
	"**Type**", "0x01", "1", "<B", "|  Arc_Timer_t"
	"**Duration**", "0x32", "4", "<L", "|  Timer in 
  |                Milliseconds: ONE_SHOT, EXPRESS_DELAY 
  |                Frequency: SCHEDULE_POLLING, SCHEDULE_POLLING_INMEDIATELY"
	"**Commands**", "0x00", "1", "<B", "|  Arc_Command_t"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**TimerIndex**", "1", "<B", "|  Index of the timer"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_TimerEnable:


EMSHI_ARC_TimerEnable_
----------------------

**API usage:** 
``engine.send("EMSHI_ARC_TimerEnable", TimerIndex=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_TimerEnable --TimerIndex=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8421

Start Timer



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x21", "1", "<B", "|  No Description"
	"**TimerIndex**", "", "1", "<B", "|  Index of the timer"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_TimerDisable:


EMSHI_ARC_TimerDisable_
-----------------------

**API usage:** 
``engine.send("EMSHI_ARC_TimerDisable", TimerIndex=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_TimerDisable --TimerIndex=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8422

Stop Timer



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x22", "1", "<B", "|  No Description"
	"**TimerIndex**", "", "1", "<B", "|  Index of the timer"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_TimerReset:


EMSHI_ARC_TimerReset_
---------------------

**API usage:** 
``engine.send("EMSHI_ARC_TimerReset", TimerIndex=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_TimerReset --TimerIndex=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8423

Reset Timer



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x23", "1", "<B", "|  No Description"
	"**TimerIndex**", "", "1", "<B", "|  Index of the timer"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_TimerRestart:


EMSHI_ARC_TimerRestart_
-----------------------

**API usage:** 
``engine.send("EMSHI_ARC_TimerRestart", TimerIndex=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_TimerRestart --TimerIndex=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8424

Restart Timer



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x24", "1", "<B", "|  No Description"
	"**TimerIndex**", "", "1", "<B", "|  Index of the timer"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_TimerUpdatePolling:


EMSHI_ARC_TimerUpdatePolling_
-----------------------------

**API usage:** 
``engine.send("EMSHI_ARC_TimerUpdatePolling", TimerIndex=0xXx,Frecuency=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_TimerUpdatePolling --TimerIndex=0xXx --Frecuency=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8425

Restart Timer



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x25", "1", "<B", "|  No Description"
	"**TimerIndex**", "", "1", "<B", "|  Index of the timer"
	"**Frecuency**", "", "4", "<L", "|  Specifies the frequency, 
  |              in Hz, to run the timer."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**TimerIndex**", "1", "<B", "|  Index of the timer"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_TimerUnschedulePolling:


EMSHI_ARC_TimerUnschedulePolling_
---------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_TimerUnschedulePolling", TimerIndex=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_TimerUnschedulePolling --TimerIndex=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8426

Unschedule Polling Timer



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x26", "1", "<B", "|  No Description"
	"**TimerIndex**", "", "1", "<B", "|  Index of the timer"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_TimerGetPolling:


EMSHI_ARC_TimerGetPolling_
--------------------------

**API usage:** 
``engine.send("EMSHI_ARC_TimerGetPolling", TimerIndex=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_TimerGetPolling --TimerIndex=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8427

Get Polling Timer



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x27", "1", "<B", "|  No Description"
	"**TimerIndex**", "", "1", "<B", "|  Index of the timer"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Frecuency**", "4", "<L", "|  Specifies the frequency, 
  |              in Hz, to run the timer."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_TimerEnabledCount:


EMSHI_ARC_TimerEnabledCount_
----------------------------

**API usage:** 
``engine.send("EMSHI_ARC_TimerEnabledCount")``

**CLI usage:**
``blengine send EMSHI_ARC_TimerEnabledCount``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8428

The number of timers enabled



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x28", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Timers**", "1", "<B", "|  the number of timers enabled"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_ClocksToNextEvent:


EMSHI_ARC_ClocksToNextEvent_
----------------------------

**API usage:** 
``engine.send("EMSHI_ARC_ClocksToNextEvent")``

**CLI usage:**
``blengine send EMSHI_ARC_ClocksToNextEvent``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8429

Clocks To Next Event



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x29", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Clocks**", "4", "<L", "|  The number of system 
  |              oscillator clocks until the next timer event."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Watchdog_Enable:


EMSHI_ARC_Watchdog_Enable_
--------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Watchdog_Enable")``

**CLI usage:**
``blengine send EMSHI_ARC_Watchdog_Enable``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8430

Watchdog timer enable



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x30", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Watchdog_Disable:


EMSHI_ARC_Watchdog_Disable_
---------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Watchdog_Disable")``

**CLI usage:**
``blengine send EMSHI_ARC_Watchdog_Disable``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8431

Watchdog timer disable



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x31", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Watchdog_ResetTimer:


EMSHI_ARC_Watchdog_ResetTimer_
------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Watchdog_ResetTimer")``

**CLI usage:**
``blengine send EMSHI_ARC_Watchdog_ResetTimer``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8432

Watchdog timer reset or clear



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x32", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Watchdog_Clear:


EMSHI_ARC_Watchdog_Clear_
-------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Watchdog_Clear")``

**CLI usage:**
``blengine send EMSHI_ARC_Watchdog_Clear``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8433

Watchdog timer reset or clear.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x33", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Watchdog_PrivateSetLimit:


EMSHI_ARC_Watchdog_PrivateSetLimit_
-----------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Watchdog_PrivateSetLimit", Limit=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_Watchdog_PrivateSetLimit --Limit=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8434

Watchdog timer set limit for 
  |      internal use only.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x34", "1", "<B", "|  No Description"
	"**Limit**", "", "4", "<L", "|  Watchdog timer limit 
  |              value to set. It is number of cycles at 24 MHz."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Watchdog_SetLimitAndEnable:


EMSHI_ARC_Watchdog_SetLimitAndEnable_
-------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Watchdog_SetLimitAndEnable", Limit=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_Watchdog_SetLimitAndEnable --Limit=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8435

Enable the watchdog timer 
  |      and let the timeout limit.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x35", "1", "<B", "|  No Description"
	"**Limit**", "", "4", "<L", "|  Watchdog timer limit 
  |              value to set. It is number of 10 ms increments"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_SYSTEM_SetPersistentInformation:


EMSHI_ARC_SYSTEM_SetPersistentInformation_
------------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_SYSTEM_SetPersistentInformation", Addr=0xXx,InfoType=0xXx,InfoLen=0xXx,InfoValue=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_SYSTEM_SetPersistentInformation --Addr=0xXx --InfoType=0xXx --InfoLen=0xXx --InfoValue=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8440

The stack requests 
  |      the system to store an information in persistent memory



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x40", "1", "<B", "|  No Description"
	"**Addr**", "", "6", "<6s", "|  remote address"
	"**InfoType**", "", "1", "<B", "|  the type 
  |              of the information to store"
	"**InfoLen**", "", "1", "<B", "|  the length
  |               the information to save"
	"**InfoValue**", "", "16", "<16s", "|  the information 
  |              to save"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_SYSTEM_GetPersistentInformation:


EMSHI_ARC_SYSTEM_GetPersistentInformation_
------------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_SYSTEM_GetPersistentInformation", Addr=0xXx,InfoType=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_SYSTEM_GetPersistentInformation --Addr=0xXx --InfoType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8441

The stack requests 
  |      the system to retrieve an information from persistent memory



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x41", "1", "<B", "|  No Description"
	"**Addr**", "", "6", "<6s", "|  remote address"
	"**InfoType**", "", "1", "<B", "|  the type 
  |              of the information to store"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**InfoLen**", "1", "<B", "|  the length
  |               the information to save"
	"**InfoValue**", "0", "None", "|  the information 
  |              to save"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_SYSTEM_RemovePersistentInformation:


EMSHI_ARC_SYSTEM_RemovePersistentInformation_
---------------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_SYSTEM_RemovePersistentInformation", Addr=0xXx,InfoTypeFrom=0xXx,InfoTypeTo=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_SYSTEM_RemovePersistentInformation --Addr=0xXx --InfoTypeFrom=0xXx --InfoTypeTo=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8442

The stack request 
  |      the system to remove an information from persistent memory



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x42", "1", "<B", "|  No Description"
	"**Addr**", "", "6", "<6s", "|  remote address"
	"**InfoTypeFrom**", "", "1", "<B", "|  the starting range 
  |              of the infoType to delete, this infoTypeFrom is included into the range 
  |              to delete"
	"**InfoTypeTo**", "", "1", "<B", "|  the ending range 
  |              of the infoType to delete, this infoTypeTo is included into the range
  |              to delete"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_SYSTEM_GetNumberOfDevicesInPersistentMemory:


EMSHI_ARC_SYSTEM_GetNumberOfDevicesInPersistentMemory_
------------------------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_SYSTEM_GetNumberOfDevicesInPersistentMemory")``

**CLI usage:**
``blengine send EMSHI_ARC_SYSTEM_GetNumberOfDevicesInPersistentMemory``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8443

The stack 
  |      requests the system the number of remote devices saved in persistent memory



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x43", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**NumberOfDevices**", "1", "<B", "|  the number of devices 
  |              supported by the persistent memory storage"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_SYSTEM_GetDeviceAddressAtIndexInPersistentMemory:


EMSHI_ARC_SYSTEM_GetDeviceAddressAtIndexInPersistentMemory_
-----------------------------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_SYSTEM_GetDeviceAddressAtIndexInPersistentMemory", Index=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_SYSTEM_GetDeviceAddressAtIndexInPersistentMemory --Index=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8444

The stack 
  |      requests the system the current address of a remote device saved in persistent memor



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x44", "1", "<B", "|  No Description"
	"**Index**", "", "1", "<B", "|  a 0-based index used to describe for 
  |              which device, the address shall be retrieved"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Addr**", "6", "<6s", "|  remote address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_SYSTEM_UpdateDeviceAddressAtIndexInPersistentMemory:


EMSHI_ARC_SYSTEM_UpdateDeviceAddressAtIndexInPersistentMemory_
--------------------------------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_SYSTEM_UpdateDeviceAddressAtIndexInPersistentMemory", Index=0xXx,To=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_SYSTEM_UpdateDeviceAddressAtIndexInPersistentMemory --Index=0xXx --To=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8445

The stack 
  |      requests the system to replace the address of a remote device saved in persistent memory



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x45", "1", "<B", "|  No Description"
	"**Index**", "", "1", "<B", "|  a 0-based index used to describe for 
  |              which device, the address shall be retrieved"
	"**To**", "", "6", "<6s", "|  remote address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_SYSTEM_SetLocalPublicBdAddr:


EMSHI_ARC_SYSTEM_SetLocalPublicBdAddr_
--------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_SYSTEM_SetLocalPublicBdAddr", Addr=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_SYSTEM_SetLocalPublicBdAddr --Addr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8446

Set the Local Public Address



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x46", "1", "<B", "|  No Description"
	"**Addr**", "", "6", "<6s", "|  remote address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_Init:


EMSHI_ARC_Memory_Init_
----------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_Init")``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_Init``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8450

Initialize the memory manager memory pointers.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x50", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_GetFreeSize:


EMSHI_ARC_Memory_GetFreeSize_
-----------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_GetFreeSize")``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_GetFreeSize``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8451

Return the total number of bytes free in the memory pool.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x51", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Memory**", "4", "<L", "|  Size in bytes of the available memory in memory pool."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_GetPoolSize:


EMSHI_ARC_Memory_GetPoolSize_
-----------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_GetPoolSize")``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_GetPoolSize``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8452

Return the total size of the memory pool in bytes.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x52", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Memory**", "4", "<L", "|  Size of the memory pool in bytes."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_AllocatePersistent:


EMSHI_ARC_Memory_AllocatePersistent_
------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_AllocatePersistent", Memory=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_AllocatePersistent --Memory=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8453

Allocate the specified number of bytes of persistent 
  |        memory if available.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x53", "1", "<B", "|  No Description"
	"**Memory**", "", "4", "<L", "|  Number of bytes to reserve."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Address**", "4", "<L", "|  Pointer to the reserved memory block."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_AllocatePersistentAligned:


EMSHI_ARC_Memory_AllocatePersistentAligned_
-------------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_AllocatePersistentAligned", Memory=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_AllocatePersistentAligned --Memory=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8454

Allocate the specified number of bytes of persistent 
  |        memory if available.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x54", "1", "<B", "|  No Description"
	"**Memory**", "", "4", "<L", "|  Number of bytes to reserve."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Address**", "4", "<L", "|  Pointer to the reserved memory block."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_AllocateNonpersistent:


EMSHI_ARC_Memory_AllocateNonpersistent_
---------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_AllocateNonpersistent", Memory=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_AllocateNonpersistent --Memory=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8455

Allocate the specified number of bytes of persistent 
  |        memory if available.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x55", "1", "<B", "|  No Description"
	"**Memory**", "", "4", "<L", "|  Number of bytes to reserve."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Address**", "4", "<L", "|  Pointer to the reserved memory block."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_AllocateNonpersistentAligned:


EMSHI_ARC_Memory_AllocateNonpersistentAligned_
----------------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_AllocateNonpersistentAligned", Memory=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_AllocateNonpersistentAligned --Memory=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8456

Allocate the specified number of bytes of persistent 
  |        memory if available.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x56", "1", "<B", "|  No Description"
	"**Memory**", "", "4", "<L", "|  Number of bytes to reserve."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Address**", "4", "<L", "|  Pointer to the reserved memory block."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_GetPersistentSize:


EMSHI_ARC_Memory_GetPersistentSize_
-----------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_GetPersistentSize")``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_GetPersistentSize``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8457

Return the size in bytes of the persistent memory currently allocated.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x57", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Memory**", "4", "<L", "|  Size in bytes of the allocated persistent memory."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_GetPersistentReservedSize:


EMSHI_ARC_Memory_GetPersistentReservedSize_
-------------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_GetPersistentReservedSize")``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_GetPersistentReservedSize``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8458

Return the size in bytes of the total amount of persistent memory currently available.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x58", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Memory**", "4", "<L", "|  Size in bytes of the reserved persistent memory."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_GetNonpersistentSize:


EMSHI_ARC_Memory_GetNonpersistentSize_
--------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_GetNonpersistentSize")``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_GetNonpersistentSize``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8459

Return the total size in bytes of the nonpersistent memory currently allocated.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x59", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Memory**", "4", "<L", "|  Size in bytes of the allocated nonpersistent memory."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Memory_GetNonpersistentReservedSize:


EMSHI_ARC_Memory_GetNonpersistentReservedSize_
----------------------------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Memory_GetNonpersistentReservedSize")``

**CLI usage:**
``blengine send EMSHI_ARC_Memory_GetNonpersistentReservedSize``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x845a

Return the total size in bytes of the total 
  |        amount of nonpersistent memory currently available.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0x5a", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Memory**", "4", "<L", "|  Size in bytes of the reserved persistent memory."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_ARC_Callback_Mockup:


EMSHI_ARC_Callback_Mockup_
--------------------------

**API usage:** 
``engine.send("EMSHI_ARC_Callback_Mockup", Callback=0xXx,Event=0xXx,ValueLen=0xXx,Value=0xXx)``

**CLI usage:**
``blengine send EMSHI_ARC_Callback_Mockup --Callback=0xXx --Event=0xXx --ValueLen=0xXx --Value=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x84fa





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x84", "1", "<B", "|  No Description"
	"**command**", "0xfa", "1", "<B", "|  No Description"
	"**Callback**", "", "1", "<B", "|  Callback Code"
	"**Event**", "", "2", "<H", "|  Callback Event"
	"**ValueLen**", "", "1", "<B", "|  Length of value"
	"**Value**", "", "0", "None", "|  The value you want to receive"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Value**", "0", "None", "|  The value you have sent"

.. raw:: html
    
    <hr>

