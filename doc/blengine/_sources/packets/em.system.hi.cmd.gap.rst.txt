
.. this file is auto generated by docs/packets.py

==============================
em.system.hi.cmd.gap 
==============================

.. contents:: Index
   :local:
   :depth: 2

.. raw:: html

    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    <div id="count">36 Packets</div>


.. _pkt-EMSHI_GAP_SetLocalBluetoothDeviceName:


EMSHI_GAP_SetLocalBluetoothDeviceName_
--------------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_SetLocalBluetoothDeviceName", NameLen=0xXx,Name=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_SetLocalBluetoothDeviceName --NameLen=0xXx --Name=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8001

Set the local Bluetooth Device Name.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x01", "1", "<B", "|  No Description"
	"**NameLen**", "", "1", "<B", "|  length of the Bluetooth device"
	"**Name**", "", "0", "None", "|  Bluetooth device friendly name."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_SetLocalBluetoothDeviceNameEx:


EMSHI_GAP_SetLocalBluetoothDeviceNameEx_
----------------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_SetLocalBluetoothDeviceNameEx", IsWritable=0xXx,MaximumWritableLen=0xXx,NameLen=0xXx,Name=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_SetLocalBluetoothDeviceNameEx --IsWritable=0xXx --MaximumWritableLen=0xXx --NameLen=0xXx --Name=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8002

Retrieving the current device role.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x02", "1", "<B", "|  No Description"
	"**IsWritable**", "", "1", "<B", "|  define if the name can be write by a remote device."
	"**MaximumWritableLen**", "", "2", "<H", "|  defines the maximum length that can be written 
  |          into the name pointer by the remote device"
	"**NameLen**", "", "1", "<B", "|  length of the Bluetooth device"
	"**Name**", "", "0", "None", "|  Bluetooth device friendly name."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_GetCurrentRole:


EMSHI_GAP_GetCurrentRole_
-------------------------

**API usage:** 
``engine.send("EMSHI_GAP_GetCurrentRole")``

**CLI usage:**
``blengine send EMSHI_GAP_GetCurrentRole``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8003

Retrieving the current device role.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x03", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Role**", "1", "<B", "|  The current role of the local device."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_SwitchRole:


EMSHI_GAP_SwitchRole_
---------------------

**API usage:** 
``engine.send("EMSHI_GAP_SwitchRole", DesiredRole=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_SwitchRole --DesiredRole=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8004

Quickly switch to another GAP device role.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x04", "1", "<B", "|  No Description"
	"**DesiredRole**", "", "1", "<B", "|  The desired new GAP role"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_GetBDAddr:


EMSHI_GAP_GetBDAddr_
--------------------

**API usage:** 
``engine.send("EMSHI_GAP_GetBDAddr", ConnHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_GetBDAddr --ConnHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8005

Get the device address from a connection Handle.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x05", "1", "<B", "|  No Description"
	"**ConnHandle**", "", "2", "<H", "|  the connection handle that identify the connection to 
  |                   retrieve information"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Address**", "6", "<6s", "|  Address value"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_GetLocalBdAddr:


EMSHI_GAP_GetLocalBdAddr_
-------------------------

**API usage:** 
``engine.send("EMSHI_GAP_GetLocalBdAddr")``

**CLI usage:**
``blengine send EMSHI_GAP_GetLocalBdAddr``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8006

Get the local Bluetooth Device address.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x06", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**LocalAddress**", "6", "<6s", "|  localAddress value"
	"**LocalAddressType**", "1", "<B", "|  the type of the address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_SetMode:


EMSHI_GAP_SetMode_
------------------

**API usage:** 
``engine.send("EMSHI_GAP_SetMode", Mode=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_SetMode --Mode=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8007

Set the current device accessibility mode.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x07", "1", "<B", "|  No Description"
	"**Mode**", "", "1", "<B", "|  The bitfield of available BleGapMode"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_SetModeWithIntervals:


EMSHI_GAP_SetModeWithIntervals_
-------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_SetModeWithIntervals", Mode=0xXx,AdvertisementInterval=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_SetModeWithIntervals --Mode=0xXx --AdvertisementInterval=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8008

Set the current device accessibility mode.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x08", "1", "<B", "|  No Description"
	"**Mode**", "", "1", "<B", "|  The bitfield of available BleGapMode"
	"**AdvertisementInterval**", "", "2", "<H", "|  The discoverable/connectable interval"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_SetModeWithIntervalsEx:


EMSHI_GAP_SetModeWithIntervalsEx_
---------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_SetModeWithIntervalsEx", Mode=0xXx,AdvertisementInterval=0xXx,Addr=0xXx,AddrType=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_SetModeWithIntervalsEx --Mode=0xXx --AdvertisementInterval=0xXx --Addr=0xXx --AddrType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8009

Set the current device accessibility mode extended.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x09", "1", "<B", "|  No Description"
	"**Mode**", "", "1", "<B", "|  The bitfield of available BleGapMode"
	"**AdvertisementInterval**", "", "2", "<H", "|  The discoverable/connectable interval"
	"**Addr**", "", "6", "<6s", "|  The Bluetooth device address of the remote device"
	"**AddrType**", "", "1", "<B", "|  Bluetooth device address type"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_GetMode:


EMSHI_GAP_GetMode_
------------------

**API usage:** 
``engine.send("EMSHI_GAP_GetMode")``

**CLI usage:**
``blengine send EMSHI_GAP_GetMode``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x800a

Retrieving the current device accessibility mode.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x0a", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**Mode**", "1", "<B", "|  The current mode of the local device."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_Connect:


EMSHI_GAP_Connect_
------------------

**API usage:** 
``engine.send("EMSHI_GAP_Connect", Addr=0xXx,AddrType=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_Connect --Addr=0xXx --AddrType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x800b

Create a connection with the remote device.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x0b", "1", "<B", "|  No Description"
	"**Addr**", "", "6", "<6s", "|  Bluetooth device address of the remote device"
	"**AddrType**", "", "1", "<B", "|  Bluetooth device address type of the remote device"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_ConnectWithIntervals:


EMSHI_GAP_ConnectWithIntervals_
-------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_ConnectWithIntervals", Addr=0xXx,AddrType=0xXx,ScanInterval=0xXx,ScanWindow=0xXx,ConnectionInterval=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_ConnectWithIntervals --Addr=0xXx --AddrType=0xXx --ScanInterval=0xXx --ScanWindow=0xXx --ConnectionInterval=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x800c

Create a connection with the remote device.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x0c", "1", "<B", "|  No Description"
	"**Addr**", "", "6", "<6s", "|  Bluetooth device address of the remote device"
	"**AddrType**", "", "1", "<B", "|  Bluetooth device address type of the remote device"
	"**ScanInterval**", "", "2", "<H", "|  The desired scanning window interval to scan the device"
	"**ScanWindow**", "", "2", "<H", "|  The desired scanning window to scan the device"
	"**ConnectionInterval**", "", "2", "<H", "|  The desired connection interval to scan the device"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_ConnectWithIntervalsEx:


EMSHI_GAP_ConnectWithIntervalsEx_
---------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_ConnectWithIntervalsEx", Addr=0xXx,AddrType=0xXx,ScanInterval=0xXx,ScanWindow=0xXx,ConnectionInterval=0xXx,ConnectionTimeout=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_ConnectWithIntervalsEx --Addr=0xXx --AddrType=0xXx --ScanInterval=0xXx --ScanWindow=0xXx --ConnectionInterval=0xXx --ConnectionTimeout=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x800d

Create a connection with the remote device.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x0d", "1", "<B", "|  No Description"
	"**Addr**", "", "6", "<6s", "|  Bluetooth device address of the remote device"
	"**AddrType**", "", "1", "<B", "|  Bluetooth device address type of the remote device"
	"**ScanInterval**", "", "2", "<H", "|  The desired scanning window interval to scan the device"
	"**ScanWindow**", "", "2", "<H", "|  The desired scanning window to scan the device"
	"**ConnectionInterval**", "", "2", "<H", "|  The desired connection interval to scan the device"
	"**ConnectionTimeout**", "", "2", "<H", "|  The desired connection timeout to scan the device"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_Disconnect:


EMSHI_GAP_Disconnect_
---------------------

**API usage:** 
``engine.send("EMSHI_GAP_Disconnect", ConnHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_Disconnect --ConnHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x800e

Terminate an ongoing connection.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x0e", "1", "<B", "|  No Description"
	"**ConnHandle**", "", "2", "<H", "|  The Local identifier of the Link layer connection"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_UpdateConnectionInterval:


EMSHI_GAP_UpdateConnectionInterval_
-----------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_UpdateConnectionInterval", ConnHandle=0xXx,ConnectionInterval=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_UpdateConnectionInterval --ConnHandle=0xXx --ConnectionInterval=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x800f

Try to update the connection interval.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x0f", "1", "<B", "|  No Description"
	"**ConnHandle**", "", "2", "<H", "|  The Local identifier of the Link layer connection"
	"**ConnectionInterval**", "", "2", "<H", "|  The desired connection interval to apply"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_UpdateConnectionIntervalEx:


EMSHI_GAP_UpdateConnectionIntervalEx_
-------------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_UpdateConnectionIntervalEx", ConnHandle=0xXx,ConnectionIntervalMin=0xXx,ConnectionIntervalMax=0xXx,ConnLatency=0xXx,ConnTimeout=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_UpdateConnectionIntervalEx --ConnHandle=0xXx --ConnectionIntervalMin=0xXx --ConnectionIntervalMax=0xXx --ConnLatency=0xXx --ConnTimeout=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8010

Try to update the connection interval.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x10", "1", "<B", "|  No Description"
	"**ConnHandle**", "", "2", "<H", "|  The Local identifier of the Link layer connection"
	"**ConnectionIntervalMin**", "", "2", "<H", "|  Defines minimum value for the connection interval"
	"**ConnectionIntervalMax**", "", "2", "<H", "|  Defines maximum value for the connection interval"
	"**ConnLatency**", "", "2", "<H", "|  Slave latency for the connection in number of connection events"
	"**ConnTimeout**", "", "2", "<H", "|  Defines connection timeout parameter"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_GetConnectionHandle:


EMSHI_GAP_GetConnectionHandle_
------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_GetConnectionHandle", Addr=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_GetConnectionHandle --Addr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8011

Get the current connection Handle for the connection with the given device.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x11", "1", "<B", "|  No Description"
	"**Addr**", "", "6", "<6s", "|  Bluetooth device address of the remote device"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**ConnHandle**", "2", "<H", "|  The Local identifier of the Link layer connection"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_GetNumberOfActiveConnections:


EMSHI_GAP_GetNumberOfActiveConnections_
---------------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_GetNumberOfActiveConnections")``

**CLI usage:**
``blengine send EMSHI_GAP_GetNumberOfActiveConnections``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8012

Get the connected devices.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x12", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**numDevices**", "1", "<B", "|  The number of currently connected devices"
	"**ConnHandles**", "0", "None", "|  Array that will contains the list of the connected handles. size=BLE_NUM_MAX_CONNECTION"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_StartBroadcastProcedure:


EMSHI_GAP_StartBroadcastProcedure_
----------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_StartBroadcastProcedure", broadcastInterval=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_StartBroadcastProcedure --broadcastInterval=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8013

Start an BROADCAST procedure.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x13", "1", "<B", "|  No Description"
	"**broadcastInterval**", "", "2", "<H", "|  the desired interval between two broadcast packet in Radio slot"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_StopBroadcastProcedure:


EMSHI_GAP_StopBroadcastProcedure_
---------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_StopBroadcastProcedure")``

**CLI usage:**
``blengine send EMSHI_GAP_StopBroadcastProcedure``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8014

Stop an BROADCAST procedure.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x14", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_ApplyBroadcastValue:


EMSHI_GAP_ApplyBroadcastValue_
------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_ApplyBroadcastValue")``

**CLI usage:**
``blengine send EMSHI_GAP_ApplyBroadcastValue``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8015

Set the value to broadcast during the BROADCAST procedure.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x15", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_SetLocalAppearance:


EMSHI_GAP_SetLocalAppearance_
-----------------------------

**API usage:** 
``engine.send("EMSHI_GAP_SetLocalAppearance", Appearance=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_SetLocalAppearance --Appearance=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8016

Set the local Bluetooth Device Appearance.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x16", "1", "<B", "|  No Description"
	"**Appearance**", "", "2", "<H", "|  the appearance to set for the local device"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_SetManufacturerSpecificData:


EMSHI_GAP_SetManufacturerSpecificData_
--------------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_SetManufacturerSpecificData", Len=0xXx,Value=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_SetManufacturerSpecificData --Len=0xXx --Value=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8017

Set the value of any manufacturer specific data.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x17", "1", "<B", "|  No Description"
	"**Len**", "", "1", "<B", "|  length of the value"
	"**Value**", "", "26", "<26s", "|  the value to broadcast"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_SetServiceDataValue:


EMSHI_GAP_SetServiceDataValue_
------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_SetServiceDataValue", UUID=0xXx,Len=0xXx,Value=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_SetServiceDataValue --UUID=0xXx --Len=0xXx --Value=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8018

Set the service data value to broadcast in AD data.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x18", "1", "<B", "|  No Description"
	"**UUID**", "", "2", "<H", "|  The 16-bits UUID for which the data is broadcasted."
	"**Len**", "", "1", "<B", "|  length of the value"
	"**Value**", "", "24", "<24s", "|  the value to broadcast"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_StartInquiry:


EMSHI_GAP_StartInquiry_
-----------------------

**API usage:** 
``engine.send("EMSHI_GAP_StartInquiry", Mode=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_StartInquiry --Mode=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8019

Start an INQUIRY procedure.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x19", "1", "<B", "|  No Description"
	"**Mode**", "", "2", "<H", "|  The desired inquiry mode (LIMITED or GENERAL)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_StartInquiryWithIntervals:


EMSHI_GAP_StartInquiryWithIntervals_
------------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_StartInquiryWithIntervals", Mode=0xXx,ScanInterval=0xXx,ScanWindow=0xXx,Duration=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_StartInquiryWithIntervals --Mode=0xXx --ScanInterval=0xXx --ScanWindow=0xXx --Duration=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x801a

Start an INQUIRY procedure with intervals.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x1a", "1", "<B", "|  No Description"
	"**Mode**", "", "1", "<B", "|  The desired inquiry mode (LIMITED or GENERAL)"
	"**ScanInterval**", "", "2", "<H", "|  The desired scanning interval to scan the devices."
	"**ScanWindow**", "", "2", "<H", "|  The desired scanning window to scan the devices."
	"**Duration**", "", "2", "<H", "|  The desired duration to scan the devices."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_CancelInquiry:


EMSHI_GAP_CancelInquiry_
------------------------

**API usage:** 
``engine.send("EMSHI_GAP_CancelInquiry")``

**CLI usage:**
``blengine send EMSHI_GAP_CancelInquiry``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x801b

Cancel an INQUIRY procedure.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x1b", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_RegisterDevice:


EMSHI_GAP_RegisterDevice_
-------------------------

**API usage:** 
``engine.send("EMSHI_GAP_RegisterDevice", Role=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_RegisterDevice --Role=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x801c

This function is used to register a Bluetooth 
  |    Low Energy device with the specified role.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x1c", "1", "<B", "|  No Description"
	"**Role**", "", "1", "<B", "|  The role for the current device"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_Add16BitsServiceUUID:


EMSHI_GAP_Add16BitsServiceUUID_
-------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_Add16BitsServiceUUID", UUID=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_Add16BitsServiceUUID --UUID=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x801e

Add the Service UUID to the list of advertised services



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x1e", "1", "<B", "|  No Description"
	"**UUID**", "", "2", "<H", "|  The 16 bit service UUID to add in the list."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_Add128BitsServiceUUID:


EMSHI_GAP_Add128BitsServiceUUID_
--------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_Add128BitsServiceUUID", UUID=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_Add128BitsServiceUUID --UUID=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x801f

Add the 128 bit Service UUID to the list of advertised services



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x1f", "1", "<B", "|  No Description"
	"**UUID**", "", "16", "<16s", "|  The 128 bit service UUID to add in the list."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_StartObserveProcedureWithIntervals:


EMSHI_GAP_StartObserveProcedureWithIntervals_
---------------------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_StartObserveProcedureWithIntervals", DuplicateFiltering=0xXx,ScanInterval=0xXx,ScanWindow=0xXx,Duration=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_StartObserveProcedureWithIntervals --DuplicateFiltering=0xXx --ScanInterval=0xXx --ScanWindow=0xXx --Duration=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8020

this function is used to start a Bluetooth Low Energy 
  |        OBSERVATION procedure in order to get broadcasted data by other Bluetooth Low Energy devices in range.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x20", "1", "<B", "|  No Description"
	"**DuplicateFiltering**", "", "1", "<B", "|  0x00 Filtering Off
  |                                  0x01 Filtering On"
	"**ScanInterval**", "", "2", "<H", "|  The desired scanning interval to scan the devices."
	"**ScanWindow**", "", "2", "<H", "|  The desired scanning window to scan the devices."
	"**Duration**", "", "4", "<L", "|  The desired duration in milliseconds to scan the devices. 
  |                   Set 0 to not stop"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_StartObserveProcedure:


EMSHI_GAP_StartObserveProcedure_
--------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_StartObserveProcedure", DuplicateFiltering=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_StartObserveProcedure --DuplicateFiltering=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8021

this function is used to start a Bluetooth Low Energy 
  |        OBSERVATION procedure in order to get broadcasted data by other Bluetooth Low Energy devices in range.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x21", "1", "<B", "|  No Description"
	"**DuplicateFiltering**", "", "1", "<B", "|  0x00 Filtering Off
  |                                  0x01 Filtering On"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_StopObserveProcedure:


EMSHI_GAP_StopObserveProcedure_
-------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_StopObserveProcedure")``

**CLI usage:**
``blengine send EMSHI_GAP_StopObserveProcedure``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8022

this function is used to stop a Bluetooth Low Energy OBSERVATION 
  |        procedure previously started by calling the BLEGAP_StartObserveProcedure()



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x22", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_SetLocalAppearanceEx:


EMSHI_GAP_SetLocalAppearanceEx_
-------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_SetLocalAppearanceEx", Appearance=0xXx,IsWritable=0xXx)``

**CLI usage:**
``blengine send EMSHI_GAP_SetLocalAppearanceEx --Appearance=0xXx --IsWritable=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8023

Set the local Bluetooth Device Appearance.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x23", "1", "<B", "|  No Description"
	"**Appearance**", "", "2", "<H", "|  the appearance to set for the local device"
	"**IsWritable**", "", "1", "<B", "|  define if the Appearance can be write by a remote device."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_SetTXPowerLevelADData:


EMSHI_GAP_SetTXPowerLevelADData_
--------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_SetTXPowerLevelADData")``

**CLI usage:**
``blengine send EMSHI_GAP_SetTXPowerLevelADData``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8024

Gap Get Current Connection Handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0x24", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**txPowerLevelValue**", "1", "<B", "|  The Power level value to set in AD Adversiting"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_GAP_GetCurrentConnHandle:


EMSHI_GAP_GetCurrentConnHandle_
-------------------------------

**API usage:** 
``engine.send("EMSHI_GAP_GetCurrentConnHandle")``

**CLI usage:**
``blengine send EMSHI_GAP_GetCurrentConnHandle``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x80e0

Gap Get Current Connection Handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x80", "1", "<B", "|  No Description"
	"**command**", "0xe0", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**ConnHandle**", "2", "<H", "|  The Local identifier 
  |            of the Link layer connection"

.. raw:: html
    
    <hr>

