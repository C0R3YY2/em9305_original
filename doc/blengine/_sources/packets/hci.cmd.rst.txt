
.. this file is auto generated by docs/packets.py

=================
hci.cmd 
=================

.. contents:: Index
   :local:
   :depth: 2

.. raw:: html

    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    <div id="count">155 Packets</div>


.. _pkt-Disconnect:


Disconnect_
-----------

**API usage:** 
``engine.send("Disconnect", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send Disconnect --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0406

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0604", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection Handle."
	"**Reason**", "0x13", "1", "<B", "|  Reason."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Read_Remote_Supported_Features:


Read_Remote_Supported_Features_
-------------------------------

**API usage:** 
``engine.send("Read_Remote_Supported_Features")``

**CLI usage:**
``blengine send Read_Remote_Supported_Features``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x041b

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1b04", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Read_Remote_Extended_Features:


Read_Remote_Extended_Features_
------------------------------

**API usage:** 
``engine.send("Read_Remote_Extended_Features")``

**CLI usage:**
``blengine send Read_Remote_Extended_Features``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x041c

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1c04", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Read_Remote_Version_Information:


Read_Remote_Version_Information_
--------------------------------

**API usage:** 
``engine.send("Read_Remote_Version_Information", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send Read_Remote_Version_Information --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x041d

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1d04", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Set_Event_Mask:


Set_Event_Mask_
---------------

**API usage:** 
``engine.send("Set_Event_Mask", Event_Mask=0xXx)``

**CLI usage:**
``blengine send Set_Event_Mask --Event_Mask=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c01

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x010c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Event_Mask**", "", "8", "<8s", "|  Event Mask: refer to Core Spec for more information."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Reset:


Reset_
------

**API usage:** 
``engine.send("Reset")``

**CLI usage:**
``blengine send Reset``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c03

HCI Reset



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x030c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-HCI_Flush:


HCI_Flush_
----------

**API usage:** 
``engine.send("HCI_Flush", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send HCI_Flush --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c08





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x080c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-Write_Local_Name:


Write_Local_Name_
-----------------

**API usage:** 
``engine.send("Write_Local_Name", Local_Name=0xXx)``

**CLI usage:**
``blengine send Write_Local_Name --Local_Name=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c13





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x130c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Local_Name**", "", "0", "utf8", "|  A UTF-8 encoded User-Friendly Descriptive Name for the device."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Read_Local_Name:


Read_Local_Name_
----------------

**API usage:** 
``engine.send("Read_Local_Name")``

**CLI usage:**
``blengine send Read_Local_Name``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c14





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x140c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Local_Name**", "0", "utf8", "|  A UTF-8 encoded User Friendly Descriptive Name for the device."

.. raw:: html
    
    <hr>

.. _pkt-Read_Transmit_Power_Level:


Read_Transmit_Power_Level_
--------------------------

**API usage:** 
``engine.send("Read_Transmit_Power_Level", Connection_Handle=0xXx,Type=0xXx)``

**CLI usage:**
``blengine send Read_Transmit_Power_Level --Connection_Handle=0xXx --Type=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c2d

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2d0c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle: Range: 0x0000 to 0x0EFF"
	"**Type**", "", "1", "<B", "|  0x00 Read Current Transmit Power Level.
  |  0x01 Read Maximum Transmit Power Level.
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  Connection_Handle: Range: 0x0000 to 0x0EFF"
	"**TX_Power_Level**", "1", "<B", "|  Range: -30 to 20: Units: dBm"

.. raw:: html
    
    <hr>

.. _pkt-Host_Buffer_Size:


Host_Buffer_Size_
-----------------

**API usage:** 
``engine.send("Host_Buffer_Size")``

**CLI usage:**
``blengine send Host_Buffer_Size``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c33

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x330c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Host_Number_Of_Completed_Packets:


Host_Number_Of_Completed_Packets_
---------------------------------

**API usage:** 
``engine.send("Host_Number_Of_Completed_Packets")``

**CLI usage:**
``blengine send Host_Number_Of_Completed_Packets``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c35

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x350c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Read_Inquiry_Mode:


Read_Inquiry_Mode_
------------------

**API usage:** 
``engine.send("Read_Inquiry_Mode")``

**CLI usage:**
``blengine send Read_Inquiry_Mode``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c44

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x440c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Write_Inquiry_Mode:


Write_Inquiry_Mode_
-------------------

**API usage:** 
``engine.send("Write_Inquiry_Mode")``

**CLI usage:**
``blengine send Write_Inquiry_Mode``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c45

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x450c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Set_Event_Mask_Page_2:


Set_Event_Mask_Page_2_
----------------------

**API usage:** 
``engine.send("Set_Event_Mask_Page_2", Event_Mask_Page_2=0xXx)``

**CLI usage:**
``blengine send Set_Event_Mask_Page_2 --Event_Mask_Page_2=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x0c63

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x630c", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Event_Mask_Page_2**", "", "8", "<8s", "|  Event Mask Page 2: refer to Core Spec for more information."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-Read_Local_Version_Information:


Read_Local_Version_Information_
-------------------------------

**API usage:** 
``engine.send("Read_Local_Version_Information")``

**CLI usage:**
``blengine send Read_Local_Version_Information``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x1001

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0110", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**HCI_Version**", "1", "<B", "|  Version of the HCI Specification supported by the Controller. See Assigned Numbers"
	"**HCI_Subversion**", "2", "<H", "|  Revision of the HCI implementation in the Controller. This value is vendor specific."
	"**LMP_Version**", "1", "<B", "|  Version of the Current LMP supported by the Controller. See Assigned Numbers"
	"**Company_Identifier**", "2", "<H", "|  Company identifier for the manufacturer of the Controller."
	"**LMP_Subversion**", "2", "<H", "|  Subversion of the Current LMP in the Controller. This value is vendor specific."

.. raw:: html
    
    <hr>

.. _pkt-Read_Local_Supported_Commands:


Read_Local_Supported_Commands_
------------------------------

**API usage:** 
``engine.send("Read_Local_Supported_Commands")``

**CLI usage:**
``blengine send Read_Local_Supported_Commands``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x1002

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0210", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Supported_Commands**", "8", "<8s", "|  Bit mask for each HCI command. If a bit is 1, the Controller supports the corresponding command and the features required for the command.
  |  Unsupported or undefined commands shall be set to 0. See Section 6.27."

.. raw:: html
    
    <hr>

.. _pkt-Read_Local_Supported_Features:


Read_Local_Supported_Features_
------------------------------

**API usage:** 
``engine.send("Read_Local_Supported_Features")``

**CLI usage:**
``blengine send Read_Local_Supported_Features``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x1003

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0310", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**LMP_Features**", "0", "bitfield", "|  Bit Mask List of LMP features. For details see [Vol 2] Part C, Link Manager Protocol Specification."

.. raw:: html
    
    <hr>

.. _pkt-Read_Local_Extended_Features:


Read_Local_Extended_Features_
-----------------------------

**API usage:** 
``engine.send("Read_Local_Extended_Features", Page_Number=0xXx)``

**CLI usage:**
``blengine send Read_Local_Extended_Features --Page_Number=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x1004

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0410", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Page_Number**", "", "1", "<B", "|  0x00 : Requests the normal LMP features as returned by Read_Local_Supported_Features.
  |  0x01 to 0xFF : Return the corresponding page of features."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Page_Number**", "1", "<B", "|  The normal LMP features as returned by Read_Local_Supported_Features."
	"**Max_Page_Number**", "1", "<B", "|  The highest features page number which contains non-zero bits for the local device."
	"**Extended_LMP_Features**", "8", "<8s", "|  Bit Mask List of LMP features. For details see [Vol 2] Part C, Link Manager Protocol Specification."

.. raw:: html
    
    <hr>

.. _pkt-Read_Buffer_Size:


Read_Buffer_Size_
-----------------

**API usage:** 
``engine.send("Read_Buffer_Size")``

**CLI usage:**
``blengine send Read_Buffer_Size``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x1005

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0510", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**ACL_Data_Packet_Length**", "2", "<H", "|  Maximum length (in octets) of the data portion of each HCI ACL Data packet that the Controller is able to accept."
	"**Synchronous_Data_Packet_Length**", "1", "<B", "|  Maximum length (in octets) of the data portion of each HCI Synchronous data packet that the Controller is able to accept."
	"**Total_Num_ACL_Data_Packets**", "2", "<H", "|  Total number of HCI ACL Data packets that can be stored in the data buffers of the Controller."
	"**Total_Num_Synchronous_Data_Packets**", "2", "<H", "|  Total number of HCI Synchronous Data packets that can be stored in the data buffers of the Controller."

.. raw:: html
    
    <hr>

.. _pkt-Read_BD_ADDR:


Read_BD_ADDR_
-------------

**API usage:** 
``engine.send("Read_BD_ADDR")``

**CLI usage:**
``blengine send Read_BD_ADDR``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x1009

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0910", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**BD_ADDR**", "6", "mac", "|  BD Address of the device"

.. raw:: html
    
    <hr>

.. _pkt-Read_Data_Block_Size:


Read_Data_Block_Size_
---------------------

**API usage:** 
``engine.send("Read_Data_Block_Size")``

**CLI usage:**
``blengine send Read_Data_Block_Size``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x100a

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0a10", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Max_ACL_Data_Packet_Length**", "2", "<H", "|  Maximum length (in octets) of the data portion of an HCI ACL Data packet
  |  that the Controller is able to accept for transmission. For AMP Controllers
  |  this always equals to Max_PDU_Size."
	"**Data_Block_Length**", "2", "<H", "|  Maximum length (in octets) of the data portion of each HCI ACL
  |  Data packet that the Controller is able to hold in each of its data
  |  block buffers."
	"**Total_Num_Data_Blocks**", "2", "<H", "|  Total number of data block buffers available in the Controller for the
  |  storage of data packets scheduled for transmission."

.. raw:: html
    
    <hr>

.. _pkt-Read_Local_Supported_Codecs:


Read_Local_Supported_Codecs_
----------------------------

**API usage:** 
``engine.send("Read_Local_Supported_Codecs")``

**CLI usage:**
``blengine send Read_Local_Supported_Codecs``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x100b

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0b10", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Num_Supported_Standard_Codecs**", "1", "<B", "|  Total number of codecs supported"
	"**Standard_Codec_ID**", "1", "<B", "|  Codec identifier. See Assigned Numbers"
	"**Num_Supported_Vendor_Specific_Codecs**", "1", "<B", "|  Total number of vendor-specific codecs supported"
	"**Vendor_Specific_Codec_ID**", "4", "<4s", "|  Value Parameter Description
  |  Octets 0 and 1 Company ID, see Assigned Numbers for Company Identifier
  |  Octets 2 and 3 Vendor-defined codec ID"

.. raw:: html
    
    <hr>

.. _pkt-Read_Local_Supported_Codecs_v2:


Read_Local_Supported_Codecs_v2_
-------------------------------

**API usage:** 
``engine.send("Read_Local_Supported_Codecs_v2")``

**CLI usage:**
``blengine send Read_Local_Supported_Codecs_v2``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x100d

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0d10", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Num_Supported_Standard_Codecs**", "1", "<B", "|  Total number of codecs supported"
	"**Standard_Codec_ID**", "1", "<B", "|  Codec identifier. See Assigned Numbers"
	"**Standard_Codec_Transport**", "1", "<B", "|  Bit Number Parameter Description
  |  0 Codec supported over BR/EDR ACL
  |  1 Codec supported over BR/EDR SCO and eSCO
  |  2 Codec supported over LE CIS
  |  3 Codec supported over LE BIS
  |  All other bits Reserved for future use"
	"**Num_Supported_Vendor_Specific_Codecs**", "1", "<B", "|  Total number of vendor-specific codecs supported"
	"**Vendor_Specific_Codec_ID**", "4", "<4s", "|  Value Parameter Description
  |  Octets 0 and 1 Company ID, see Assigned Numbers for Company Identifier
  |  Octets 2 and 3 Vendor-defined codec ID"
	"**Vendor_Specific_Codec_Transport**", "1", "<B", "|  Bit Number Parameter Description
  |  0 Codec supported over BR/EDR ACL
  |  1 Codec supported over BR/EDR SCO and eSCO
  |  2 Codec supported over LE CIS
  |  3 Codec supported over LE BIS
  |  All other bits Reserved for future use"

.. raw:: html
    
    <hr>

.. _pkt-Read_Local_Supported_Codec_Capabilities:


Read_Local_Supported_Codec_Capabilities_
----------------------------------------

**API usage:** 
``engine.send("Read_Local_Supported_Codec_Capabilities", Codec_ID=0xXx,Logical_Transport_Type=0xXx,Direction=0xXx)``

**CLI usage:**
``blengine send Read_Local_Supported_Codec_Capabilities --Codec_ID=0xXx --Logical_Transport_Type=0xXx --Direction=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x100e

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0e10", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Codec_ID**", "", "5", "<5s", "|  Octet 0 See Assigned Numbers for Coding Format
  |  Octets 1 to 2 Company ID, see Assigned Numbers for Company Identifier.
  |  Shall be ignored if octet 0 is not 0xFF.
  |  Octets 3 to 4 Vendor-defined codec ID.
  |  Shall be ignored if octet 0 is not 0xFF."
	"**Logical_Transport_Type**", "", "1", "<B", "|  0x00 BR/EDR ACL
  |  0x01 BR/EDR SCO or eSCO
  |  0x02 LE CIS
  |  0x03 LE BIS
  |  All other values Reserved for future use"
	"**Direction**", "", "1", "<B", "|  0x00 Input (Host to Controller)
  |  0x01 Output (Controller to Host)
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Num_Codec_Capabilities**", "1", "<B", "|  Total number of codec capabilities returned"
	"**Codec_Capability_Length**", "1", "<B", "|  Length of the Codec_Capability[i] field"
	"**Codec_Capability**", "0", "None", "|  Codec_Capability_Length[i] octets of codec-specific capability data
  |  Note: Each element of this array has a variable length."

.. raw:: html
    
    <hr>

.. _pkt-Read_Local_Supported_Controller_Delay:


Read_Local_Supported_Controller_Delay_
--------------------------------------

**API usage:** 
``engine.send("Read_Local_Supported_Controller_Delay", Codec_ID=0xXx,Logical_Transport_Type=0xXx,Direction=0xXx,Codec_Configuration_Length=0xXx,Codec_Configuration=0xXx)``

**CLI usage:**
``blengine send Read_Local_Supported_Controller_Delay --Codec_ID=0xXx --Logical_Transport_Type=0xXx --Direction=0xXx --Codec_Configuration_Length=0xXx --Codec_Configuration=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x100f

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0f10", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Codec_ID**", "", "5", "<5s", "|  Octet 0 See Assigned Numbers for Coding Format
  |  Octets 1 to 2 Company ID, see Assigned Numbers for Company Identifier.
  |  Shall be ignored if octet 0 is not 0xFF.
  |  Octets 3 to 4 Vendor-defined codec ID.
  |  Shall be ignored if octet 0 is not 0xFF."
	"**Logical_Transport_Type**", "", "1", "<B", "|  0x00 BR/EDR ACL
  |  0x01 BR/EDR SCO or eSCO
  |  0x02 LE CIS
  |  0x03 LE BIS
  |  All other values Reserved for future use"
	"**Direction**", "", "1", "<B", "|  0x00 Input (Host to Controller)
  |  0x01 Output (Controller to Host)
  |  All other values Reserved for future use"
	"**Codec_Configuration_Length**", "", "1", "<B", "|  Length of codec configuration"
	"**Codec_Configuration**", "", "0", "None", "|  Codec-specific configuration data"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Min_Controller_Delay**", "3", "<3s", "|  Minimum Controller delay in microseconds for the specified configuration
  |  Range: 0x000000 to 0x3D0900
  |  Time range: 0 s to 4 s"
	"**Max_Controller_Delay**", "3", "<3s", "|  Maximum Controller delay in microseconds for the specified configuration
  |  Range: 0x000000 to 0x3D0900
  |  Time range: 0 s to 4 s"

.. raw:: html
    
    <hr>

.. _pkt-Read_RSSI:


Read_RSSI_
----------

**API usage:** 
``engine.send("Read_RSSI", Handle=0xXx)``

**CLI usage:**
``blengine send Read_RSSI --Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x1405

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0514", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Handle**", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"
	"**RSSI**", "1", "<B", "|  BR/EDR
  |  Range: -128 to 127
  |  Units: dB
  |  AMP:
  |  Range: AMP type specific (signed integer)
  |  Units: dBm
  |  LE:
  |  Range: -127 to 20, 127
  |  Units: dBm"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Event_Mask:


LE_Set_Event_Mask_
------------------

**API usage:** 
``engine.send("LE_Set_Event_Mask", LE_Event_Mask=0xXx)``

**CLI usage:**
``blengine send LE_Set_Event_Mask --LE_Event_Mask=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2001

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0120", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**LE_Event_Mask**", "", "8", "<8s", "|  7.3.1 Set Event Mask command"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Buffer_Size_V1:


LE_Read_Buffer_Size_V1_
-----------------------

**API usage:** 
``engine.send("LE_Read_Buffer_Size_V1")``

**CLI usage:**
``blengine send LE_Read_Buffer_Size_V1``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2002

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0220", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**LE_ACL_Data_Packet_Length**", "2", "<H", "|  0x0000 No dedicated LE Buffer exists. Use the HCI_Read_Buffer_Size command.
  |  0x0001 to 0x001A Reserved for future use.
  |  0x001B to 0xFFFF Maximum length (in octets) of the data portion of each HCI ACL data packet."
	"**Total_Num_LE_ACL_Data_Packets**", "1", "<B", "|  0x00 No dedicated LE Buffer exists. Use the HCI_Read_Buffer_Size command.
  |  0x01 to 0xFF The total number of HCI ACL data packets that can be stored in the data buffers of the Controller."

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Buffer_Size_V2:


LE_Read_Buffer_Size_V2_
-----------------------

**API usage:** 
``engine.send("LE_Read_Buffer_Size_V2")``

**CLI usage:**
``blengine send LE_Read_Buffer_Size_V2``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2060

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6020", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**LE_ACL_Data_Packet_Length**", "2", "<H", "|  0x0000 No dedicated LE Buffer exists. Use the HCI_Read_Buffer_Size command.
  |  0x0001 to 0x001A Reserved for future use.
  |  0x001B to 0xFFFF Maximum length (in octets) of the data portion of each HCI ACL data packet."
	"**Total_Num_LE_ACL_Data_Packets**", "1", "<B", "|  0x00 No dedicated LE Buffer exists. Use the HCI_Read_Buffer_Size command.
  |  0x01 to 0xFF The total number of HCI ACL data packets that can be stored in the data buffers of the Controller."
	"**ISO_Data_Packet_Length**", "2", "<H", "|  0x0000 No dedicated ISO Buffer exists.
  |  0x0001 to 0xFFFF The maximum length (in octets) of the data portion of each HCI ISO data packet."
	"**Total_Num_ISO_Data_Packets**", "1", "<B", "|  0x00 No dedicated ISO Buffer exists.
  |  0x01 to 0xFF The total number of HCI ISO data packets that can be stored in the ISO buffers of the Controller."

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Local_Supported_Features:


LE_Read_Local_Supported_Features_
---------------------------------

**API usage:** 
``engine.send("LE_Read_Local_Supported_Features")``

**CLI usage:**
``blengine send LE_Read_Local_Supported_Features``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2003

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0320", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**LE_Features**", "0", "bitfield", "|  0xXXXXXXXXXXXXXXXX Bit Mask List of supported LE features. See [Vol 6] Part B, Section 4.6."

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Random_Address:


LE_Set_Random_Address_
----------------------

**API usage:** 
``engine.send("LE_Set_Random_Address", Random_Address=0xXx)``

**CLI usage:**
``blengine send LE_Set_Random_Address --Random_Address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2005

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0520", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Random_Address**", "", "6", "mac", "|  Random Device Address as defined by [Vol 6] Part B, Section 1.3."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Advertising_Parameters:


LE_Set_Advertising_Parameters_
------------------------------

**API usage:** 
``engine.send("LE_Set_Advertising_Parameters", Peer_Address=0xXx)``

**CLI usage:**
``blengine send LE_Set_Advertising_Parameters --Peer_Address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2006

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0620", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Interval_Min**", "0x0008", "2", "<H", "|  N = 0xXXXX Minimum advertising interval for undirected and low duty cycle directed advertising.
  |  Range: 0x0020 to 0x4000
  |  Default: 0x0800 (1.28 s)
  |  Time = N * 0.625 ms
  |  Time Range: 20 ms to 10.24 s"
	"**Advertising_Interval_Max**", "0x0008", "2", "<H", "|  Maximum advertising interval for undirected and low duty cycle directed advertising.
  |  Range: 0x0020 to 0x4000
  |  Default: 0x0800 (1.28 s)
  |  Time = N * 0.625 ms
  |  Time Range: 20 ms to 10.24 s"
	"**Advertising_Type**", "0x00", "1", "<B", "|  0x00 Connectable and scannable undirected advertising (ADV_IND) (default)
  |  0x01 Connectable high duty cycle directed advertising (ADV_DIRECT_IND, high duty cycle)
  |  0x02 Scannable undirected advertising (ADV_SCAN_IND)
  |  0x03 Non connectable undirected advertising (ADV_NONCONN_IND)
  |  0x04 Connectable low duty cycle directed advertising (ADV_DIRECT_IND, low duty cycle)
  |  All other values Reserved for future use"
	"**Own_Address_Type**", "0x00", "1", "<B", "|  0x00 Public Device Address (default)
  |  0x01 Random Device Address
  |  0x02 Controller generates Resolvable Private Address based on the local IRK from the resolving list. If the resolving list contains no matching entry, use the public address.
  |  0x03 Controller generates Resolvable Private Address based on the local IRK from the resolving list. If the resolving list contains no matching entry, use the random address from LE_Set_Random_Address.
  |  All other values Reserved for future use"
	"**Peer_Address_Type**", "0x00", "1", "<B", "|  0x00 Public Device Address (default) or Public Identity Address
  |  0x01 Random Device Address or Random (static) Identity Address
  |  All other values Reserved for future use"
	"**Peer_Address**", "", "6", "mac", "|  0xXXXXXXXXXXXX Public Device Address, Random Device Address, Public Identity Address, or Random (static) Identity Address of the device to be connected."
	"**Advertising_Channel_Map**", "0x07", "1", "<B", "|  Bit Number Parameter Description
  |  0          Channel 37 shall be used
  |  1          Channel 38 shall be used
  |  2          Channel 39 shall be used
  |  All other bits Reserved for future use
  |  The default is 0x07 (all three channels enabled)."
	"**Advertising_Filter_Policy**", "0x00", "1", "<B", "|  0x00 Process scan and connection requests from all devices (i.e., the Filter Accept List is not in use) (default).
  |  0x01 Process connection requests from all devices and scan requests only from devices that are in the Filter Accept List.
  |  0x02 Process scan requests from all devices and connection requests only from devices that are in the Filter Accept List.
  |  0x03 Process scan and connection requests only from devices in the Filter Accept List.
  |  All other values Reserved for future use."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Advertising_Channel_Tx_Power:


LE_Read_Advertising_Channel_Tx_Power_
-------------------------------------

**API usage:** 
``engine.send("LE_Read_Advertising_Channel_Tx_Power")``

**CLI usage:**
``blengine send LE_Read_Advertising_Channel_Tx_Power``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2007

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0720", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**TX_Power_Level**", "1", "rssi", "|  0xXX Range: -127 to 20
  |  Units: dBm
  |  Accuracy: 4 dB"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Advertising_Data:


LE_Set_Advertising_Data_
------------------------

**API usage:** 
``engine.send("LE_Set_Advertising_Data", Advertising_Data_Length=0xXx,Advertising_Data=0xXx)``

**CLI usage:**
``blengine send LE_Set_Advertising_Data --Advertising_Data_Length=0xXx --Advertising_Data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2008

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0820", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Data_Length**", "", "1", "<B", "|  0x00 to 0x1F The number of significant octets in the Advertising_Data."
	"**Advertising_Data**", "", "0", "None", "|  31 octets of advertising data formatted as defined in [Vol 3] PartC, Section 11.
  |  All octets zero (default)."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Scan_Response_Data:


LE_Set_Scan_Response_Data_
--------------------------

**API usage:** 
``engine.send("LE_Set_Scan_Response_Data", Scan_Response_Data_Length=0xXx,Scan_Response_Data=0xXx)``

**CLI usage:**
``blengine send LE_Set_Scan_Response_Data --Scan_Response_Data_Length=0xXx --Scan_Response_Data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2009

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0920", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Scan_Response_Data_Length**", "", "1", "<B", "|  0x00 to 0x1F The number of significant octets in the Scan_Response_Data."
	"**Scan_Response_Data**", "", "0", "None", "|  31 octets of Scan_Response_Data formatted as defined in [Vol 3] PartC, Section 11.
  |  All octets zero (default)."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Advertising_Enable:


LE_Set_Advertising_Enable_
--------------------------

**API usage:** 
``engine.send("LE_Set_Advertising_Enable")``

**CLI usage:**
``blengine send LE_Set_Advertising_Enable``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x200a

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0a20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Enable**", "0x01", "1", "<B", "|  0x00 Disable, 0x01 Enable."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Scan_Parameters:


LE_Set_Scan_Parameters_
-----------------------

**API usage:** 
``engine.send("LE_Set_Scan_Parameters")``

**CLI usage:**
``blengine send LE_Set_Scan_Parameters``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x200b





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0b20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**LE_Scan_Type**", "0x00", "1", "<B", "|  0x00 Passive Scanning. No scanning PDUs shall be sent (default)
  |  0x01 Active scanning. Scanning PDUs may be sent.
  |  All other values Reserved for future use"
	"**LE_Scan_Interval**", "0x10", "2", "<H", "|  N = 0xXXXX This is defined as the time interval from when the Controller
  |  started its last LE scan until it begins the subsequent LE scan.
  |  Range: 0x0004 to 0x4000
  |  Default: 0x0010 (10 ms)
  |  Time = N * 0.625 ms
  |  Time Range: 2.5 ms to 10.24 s"
	"**LE_Scan_Window**", "0x10", "2", "<H", "|  N = 0xXXXX The duration of the LE scan. LE_Scan_Window shall be less
  |  than or equal to LE_Scan_Interval
  |  Range: 0x0004 to 0x4000
  |  Default: 0x0010 (10 ms)
  |  Time = N * 0.625 ms
  |  Time Range: 2.5 ms to 10.24 s"
	"**Own_Address_Type**", "0x00", "1", "<B", "|  0x00 Public Device Address (default)
  |  0x01 Random Device Address
  |  0x02 Controller generates Resolvable Private Address based on the
  |  local IRK from the resolving list. If the resolving list contains no
  |  matching entry, use the public address.
  |  0x03 Controller generates Resolvable Private Address based on the
  |  local IRK from the resolving list. If the resolving list contains no
  |  matching entry, use the random address from LE_Set_Random_Address.
  |  All other values Reserved for future use."
	"**Scanning_Filter_Policy**", "0x00", "1", "<B", "|  0x00 Accept all advertising and scan response PDUs except directed advertising
  |  PDUs not addressed to this device (default).
  |  0x01 Accept only advertising and scan response PDUs from devices where
  |  the advertisers address is in the Filter Accept List. Directed advertising PDUs
  |  which are not addressed to this device shall be ignored.
  |  0x02 Accept all advertising and scan response PDUs except directed advertising
  |  PDUs where the identity address corresponding to TargetA does
  |  not address this device.
  |  Note: Directed advertising PDUs where TargetA is a resolvable private
  |  address that cannot be resolved are also accepted.
  |  0x03 Accept all advertising and scan response PDUs except:
  |   advertising and scan response PDUs where the advertiser's identity
  |  address is not in the Filter Accept List; and
  |   directed advertising PDUs where the identity address corresponding
  |  to TargetA does not address this device.
  |  Note: Directed advertising PDUs where TargetA is a resolvable private
  |  address that cannot be resolved are also accepted.
  |  All other values Reserved for future use."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Scan_Enable:


LE_Set_Scan_Enable_
-------------------

**API usage:** 
``engine.send("LE_Set_Scan_Enable")``

**CLI usage:**
``blengine send LE_Set_Scan_Enable``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x200c

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0c20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**LE_Scan_Enable**", "0x00", "1", "<B", "|  0x00 Scanning disabled.
  |  0x01 Scanning enabled.
  |  All other values Reserved for future use."
	"**Filter_Duplicates**", "0x00", "1", "<B", "|  0x00 Duplicate filtering disabled.
  |  0x01 Duplicate filtering enabled.
  |  All other values Reserved for future use."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Create_Connection:


LE_Create_Connection_
---------------------

**API usage:** 
``engine.send("LE_Create_Connection", Peer_Address=0xXx)``

**CLI usage:**
``blengine send LE_Create_Connection --Peer_Address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x200d

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0d20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**LE_Scan_Interval**", "0x30", "2", "<H", "|  N = 0xXXXX This is defined as the time interval from when the Controller started
  |  its last LE scan until it begins the subsequent LE scan.
  |  Range: 0x0004 to 0x4000
  |  Time = N * 0.625 ms
  |  Time Range: 2.5 ms to 10.24 s"
	"**LE_Scan_Window**", "0x30", "2", "<H", "|  N = 0xXXXX Amount of time for the duration of the LE scan. LE_Scan_Window
  |  shall be less than or equal to LE_Scan_Interval
  |  Range: 0x0004 to 0x4000
  |  Time = N * 0.625 ms
  |  Time Range: 2.5 ms to 10.24 s"
	"**Initiator_Filter_Policy**", "0x00", "1", "<B", "|  0x00 Filter Accept List is not used to determine which advertiser to connect to.
  |  Peer_Address_Type and Peer_Address shall be used.
  |  0x01 Filter Accept List is used to determine which advertiser to connect to.
  |  Peer_Address_Type and Peer_Address shall be ignored.
  |  All other values Reserved for future use."
	"**Peer_Address_Type**", "0x00", "1", "<B", "|  0x00 Public Device Address
  |  0x01 Random Device Address
  |  0x02 Public Identity Address (Corresponds to peers Resolvable Private
  |  Address). This value shall only be used by the Host if either the Host
  |  or the Controller does not support the HCI_LE_Set_Privacy_Mode
  |  command.
  |  0x03 Random (static) Identity Address (Corresponds to peers Resolvable
  |  Private Address). This value shall only be used by a Host if either the
  |  Host or the Controller does not support the HCI_LE_Set_Privacy_Mode command.
  |  All other values Reserved for future use"
	"**Peer_Address**", "", "6", "mac", "|  0xXXXXXXXXXXXX Public Device Address, Random Device Address, Public Identity
  |  Address, or Random (static) Identity Address of the device to be
  |  connected"
	"**Own_Address_Type**", "0x00", "1", "<B", "|  0x00 Public Device Address
  |  0x01 Random Device Address
  |  0x02 Controller generates Resolvable Private Address based on the
  |  local IRK from the resolving list. If the resolving list contains no
  |  matching entry, use the public address.
  |  0x03 Controller generates Resolvable Private Address based on the
  |  local IRK from the resolving list. If the resolving list contains no
  |  matching entry, use the random address from the most recent
  |  successful HCI_LE_Set_Random_Address command.
  |  All other values Reserved for future use"
	"**Connection_Interval_Min**", "0x28", "2", "<H", "|  N = 0xXXXX Minimum value for the connection interval. This shall be less than
  |  or equal to Connection_Interval_Max.
  |  Range: 0x0006 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 4 s."
	"**Connection_Interval_Max**", "0x28", "2", "<H", "|  N = 0xXXXX Maximum value for the connection interval. This shall be greater
  |  than or equal to Connection_Interval_Min.
  |  Range: 0x0006 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 4 s."
	"**Max_Latency**", "0x00", "2", "<H", "|  0xXXXX Maximum Peripheral latency for the connection in number of connection events.
  |  Range: 0x0000 to 0x01F3"
	"**Supervision_Timeout**", "0xf401", "2", "<H", "|  N = 0xXXXX Supervision timeout for the LE Link. (See [Vol 6] Part B, Section
  |  4.5.2)
  |  Range: 0x000A to 0x0C80
  |  Time = N * 10 ms
  |  Time Range: 100 ms to 32 s"
	"**Min_CE_Length**", "0x00", "2", "<H", "|  N = 0xXXXX Information parameter about the minimum length of connection
  |  event needed for this LE connection.
  |  Range: 0x0000 to 0xFFFF
  |  Time = N * 0.625 ms."
	"**Max_CE_Length**", "0x00", "2", "<H", "|  N = 0xXXXX Information parameter about the maximum length of connection event
  |  needed for this LE connection.
  |  Range: 0x0000 to 0xFFFF
  |  Time = N * 0.625 ms."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Create_Connection_Cancel:


LE_Create_Connection_Cancel_
----------------------------

**API usage:** 
``engine.send("LE_Create_Connection_Cancel")``

**CLI usage:**
``blengine send LE_Create_Connection_Cancel``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x200e

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0e20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Filter_Accept_List_Size:


LE_Read_Filter_Accept_List_Size_
--------------------------------

**API usage:** 
``engine.send("LE_Read_Filter_Accept_List_Size")``

**CLI usage:**
``blengine send LE_Read_Filter_Accept_List_Size``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x200f

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x0f20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Filter_Accept_List_Size**", "1", "<B", "|  Total number of Filter Accept List entries that can be stored in the
  |  Controller."

.. raw:: html
    
    <hr>

.. _pkt-LE_Clear_Filter_Accept_List:


LE_Clear_Filter_Accept_List_
----------------------------

**API usage:** 
``engine.send("LE_Clear_Filter_Accept_List")``

**CLI usage:**
``blengine send LE_Clear_Filter_Accept_List``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2010

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1020", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Add_Device_To_Filter_Accept_List:


LE_Add_Device_To_Filter_Accept_List_
------------------------------------

**API usage:** 
``engine.send("LE_Add_Device_To_Filter_Accept_List", Address_Type=0xXx,Address=0xXx)``

**CLI usage:**
``blengine send LE_Add_Device_To_Filter_Accept_List --Address_Type=0xXx --Address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2011

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1120", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Address_Type**", "", "1", "<B", "|  0x00 Public Device Address
  |  0x01 Random Device Address
  |  0xFF Devices sending anonymous advertisements
  |  All other values Reserved for future use."
	"**Address**", "", "6", "mac", "|  Public Device Address or Random Device Address of the device to be added to the Filter Accept List."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Remove_Device_From_Filter_Accept_List:


LE_Remove_Device_From_Filter_Accept_List_
-----------------------------------------

**API usage:** 
``engine.send("LE_Remove_Device_From_Filter_Accept_List", Address_Type=0xXx,Address=0xXx)``

**CLI usage:**
``blengine send LE_Remove_Device_From_Filter_Accept_List --Address_Type=0xXx --Address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2012

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1220", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Address_Type**", "", "1", "<B", "|  0x00 Public Device Address
  |  0x01 Random Device Address
  |  0xFF Devices sending anonymous advertisements
  |  All other values Reserved for future use."
	"**Address**", "", "6", "mac", "|  Public Device Address or Random Device Address of the device to be removed from the Filter Accept List."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Connection_Update:


LE_Connection_Update_
---------------------

**API usage:** 
``engine.send("LE_Connection_Update", Connection_Handle=0xXx,Connection_Interval_Min=0xXx,Connection_Interval_Max=0xXx,Max_Latency=0xXx,Supervision_Timeout=0xXx,Min_CE_Length=0xXx,Max_CE_Length=0xXx)``

**CLI usage:**
``blengine send LE_Connection_Update --Connection_Handle=0xXx --Connection_Interval_Min=0xXx --Connection_Interval_Max=0xXx --Max_Latency=0xXx --Supervision_Timeout=0xXx --Min_CE_Length=0xXx --Max_CE_Length=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2013

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1320", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"
	"**Connection_Interval_Min**", "", "2", "<H", "|  Minimum value for the connection interval. This shall be less than or equal to Connection_Interval_Max.
  |  Range: 0x0006 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 4 s."
	"**Connection_Interval_Max**", "", "2", "<H", "|  Maximum value for the connection interval. This shall be greater than or equal to Connection_Interval_Min.
  |  Range: 0x0006 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 4 s."
	"**Max_Latency**", "", "2", "<H", "|  Maximum Peripheral latency for the connection in number of connection events. Range: 0x0000 to 0x01F3"
	"**Supervision_Timeout**", "", "2", "<H", "|  Supervision timeout for the LE Link.
  |  Range: 0x000A to 0x0C80
  |  Time = N * 10 ms
  |  Time Range: 100 ms to 32 s"
	"**Min_CE_Length**", "", "2", "<H", "|  Information parameter about the minimum length of connection event needed for this LE connection. 
  |  How this value is used is outside the scope of this specification.
  |  Range: 0x0000 to 0xFFFF
  |  Time = N * 0.625 ms."
	"**Max_CE_Length**", "", "2", "<H", "|  Information parameter about the maximum length of connection event needed for this LE connection. 
  |  How this value is used is outside the scope of this specification.
  |  Range: 0x0000 to 0xFFFF
  |  Time = N * 0.625 ms."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Host_Channel_Classification:


LE_Set_Host_Channel_Classification_
-----------------------------------

**API usage:** 
``engine.send("LE_Set_Host_Channel_Classification", Channel_Map=0xXx)``

**CLI usage:**
``blengine send LE_Set_Host_Channel_Classification --Channel_Map=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2014

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1420", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Channel_Map**", "", "5", "<5s", "|  This parameter contains 37 1-bit fields.
  |  The n th such field (in the range 0 to 36) contains the value for the
  |  Link Layer channel index n.
  |  Channel n is bad = 0.
  |  Channel n is unknown = 1.
  |  The most significant bits are reserved for future use.
  |  At least one channel shall be marked as unknown."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Channel_Map:


LE_Read_Channel_Map_
--------------------

**API usage:** 
``engine.send("LE_Read_Channel_Map", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Read_Channel_Map --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2015

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1520", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"
	"**Channel_Map**", "5", "<5s", "|  This parameter contains 37 1-bit fields.
  |  The n th such field (in the range 0 to 36) contains the value for the
  |  Link Layer channel index n.
  |  Channel n is unused = 0.
  |  Channel n is used = 1.
  |  The most significant bits are reserved for future use."

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Remote_Features:


LE_Read_Remote_Features_
------------------------

**API usage:** 
``engine.send("LE_Read_Remote_Features", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Read_Remote_Features --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2016

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1620", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Encrypt:


LE_Encrypt_
-----------

**API usage:** 
``engine.send("LE_Encrypt", Key=0xXx,Plaintext_Data=0xXx)``

**CLI usage:**
``blengine send LE_Encrypt --Key=0xXx --Plaintext_Data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2017

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1720", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Key**", "", "16", "<16s", "|  128 bit key for the encryption of the data given in the command.
  |  The most significant octet of the key corresponds to key[0] using
  |  the notation specified in FIPS 197."
	"**Plaintext_Data**", "", "16", "<16s", "|  128 bit data block that is requested to be encrypted.
  |  The most significant octet of the PlainText_Data corresponds to
  |  in[0] using the notation specified in FIPS 197."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Encrypted_Data**", "16", "<16s", "|  128 bit encrypted data block.
  |  The most significant octet of the Encrypted_Data corresponds to
  |  out[0] using the notation specified in FIPS 197."

.. raw:: html
    
    <hr>

.. _pkt-LE_Rand:


LE_Rand_
--------

**API usage:** 
``engine.send("LE_Rand")``

**CLI usage:**
``blengine send LE_Rand``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2018

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1820", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Random_Number**", "8", ">Q", "|  Random Number"

.. raw:: html
    
    <hr>

.. _pkt-LE_Enable_Encryption:


LE_Enable_Encryption_
---------------------

**API usage:** 
``engine.send("LE_Enable_Encryption", Connection_Handle=0xXx,Random_Number=0xXx,Encrypted_Diversifier=0xXx,Long_Term_Key=0xXx)``

**CLI usage:**
``blengine send LE_Enable_Encryption --Connection_Handle=0xXx --Random_Number=0xXx --Encrypted_Diversifier=0xXx --Long_Term_Key=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2019

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1920", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"
	"**Random_Number**", "", "8", "<8s", "|  64 bit random number."
	"**Encrypted_Diversifier**", "", "2", "<H", "|  16 bit encrypted diversifier"
	"**Long_Term_Key**", "", "16", "<16s", "|  128 bit long term key."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Long_Term_Key_Request_Reply:


LE_Long_Term_Key_Request_Reply_
-------------------------------

**API usage:** 
``engine.send("LE_Long_Term_Key_Request_Reply", Connection_Handle=0xXx,Long_Term_Key=0xXx)``

**CLI usage:**
``blengine send LE_Long_Term_Key_Request_Reply --Connection_Handle=0xXx --Long_Term_Key=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x201a

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1a20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"
	"**Long_Term_Key**", "", "16", "<16s", "|  128 bit long term key."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Long_Term_Key_Request_Negative_Reply:


LE_Long_Term_Key_Request_Negative_Reply_
----------------------------------------

**API usage:** 
``engine.send("LE_Long_Term_Key_Request_Negative_Reply", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Long_Term_Key_Request_Negative_Reply --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x201b

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1b20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Supported_States:


LE_Read_Supported_States_
-------------------------

**API usage:** 
``engine.send("LE_Read_Supported_States")``

**CLI usage:**
``blengine send LE_Read_Supported_States``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x201c

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1c20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**LE_States**", "1", "<B", "|  Refer to Core 5.2, Vol 4, Part E, Section 7.8.27"

.. raw:: html
    
    <hr>

.. _pkt-LE_Receiver_Test_v1:


LE_Receiver_Test_v1_
--------------------

**API usage:** 
``engine.send("LE_Receiver_Test_v1", RX_Channel=0xXx)``

**CLI usage:**
``blengine send LE_Receiver_Test_v1 --RX_Channel=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x201d

LE Receiver Test



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1d20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**RX_Channel**", "", "1", "<B", "|  N = (F-2402) / 2
  |  Range: 0x00 to 0x27.
  |  Frequency Range: 2402 MHz to 2480 MHz"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Receiver_Test_v2:


LE_Receiver_Test_v2_
--------------------

**API usage:** 
``engine.send("LE_Receiver_Test_v2", RX_Channel=0xXx,PHY=0xXx,Modulation_Index=0xXx)``

**CLI usage:**
``blengine send LE_Receiver_Test_v2 --RX_Channel=0xXx --PHY=0xXx --Modulation_Index=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2033

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3320", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**RX_Channel**", "", "1", "<B", "|  N = (F-2402) / 2
  |  Range: 0x00 to 0x27.
  |  Frequency Range: 2402 MHz to 2480 MHz"
	"**PHY**", "", "1", "<B", "|  0x01 Receiver set to use the LE 1M PHY
  |  0x02 Receiver set to use the LE 2M PHY
  |  0x03 Receiver set to use the LE Coded PHY
  |  All other values Reserved for future use"
	"**Modulation_Index**", "", "1", "<B", "|  0x00 Assume transmitter will have a standard modulation index
  |  0x01 Assume transmitter will have a stable modulation index"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Receiver_Test_v3:


LE_Receiver_Test_v3_
--------------------

**API usage:** 
``engine.send("LE_Receiver_Test_v3", RX_Channel=0xXx,PHY=0xXx,Modulation_Index=0xXx,Expected_CTE_Length=0xXx,Expected_CTE_Type=0xXx,Slot_Durations=0xXx,Switching_Pattern_Length=0xXx,Antenna_IDs=0xXx)``

**CLI usage:**
``blengine send LE_Receiver_Test_v3 --RX_Channel=0xXx --PHY=0xXx --Modulation_Index=0xXx --Expected_CTE_Length=0xXx --Expected_CTE_Type=0xXx --Slot_Durations=0xXx --Switching_Pattern_Length=0xXx --Antenna_IDs=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x204f

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4f20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**RX_Channel**", "", "1", "<B", "|  N = (F-2402) / 2
  |  Range: 0x00 to 0x27.
  |  Frequency Range: 2402 MHz to 2480 MHz"
	"**PHY**", "", "1", "<B", "|  0x01 Receiver set to use the LE 1M PHY
  |  0x02 Receiver set to use the LE 2M PHY
  |  0x03 Receiver set to use the LE Coded PHY
  |  All other values Reserved for future use"
	"**Modulation_Index**", "", "1", "<B", "|  0x00 Assume transmitter will have a standard modulation index
  |  0x01 Assume transmitter will have a stable modulation index"
	"**Expected_CTE_Length**", "", "1", "<B", "|  0x00 No Constant Tone Extension expected (default)
  |  0x02 to 0x14 Expected length of the Constant Tone Extension in 8 s units
  |  All other values Reserved for future use"
	"**Expected_CTE_Type**", "", "1", "<B", "|  0x00 Expect AoA Constant Tone Extension
  |  0x01 Expect AoD Constant Tone Extension with 1 s slots
  |  0x02 Expect AoD Constant Tone Extension with 2 s slots
  |  All other values Reserved for future use"
	"**Slot_Durations**", "", "1", "<B", "|  0x01 Switching and sampling slots are 1 s each
  |  0x02 Switching and sampling slots are 2 s each
  |  All other values Reserved for future use"
	"**Switching_Pattern_Length**", "", "1", "<B", "|  0x02 to 0x4B The number of Antenna IDs in the pattern
  |  All other values Reserved for future use"
	"**Antenna_IDs**", "", "0", "None", "|  List of Antenna IDs in the pattern (Size: Switching_Pattern_Length  1 octet)"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Transmitter_Test_v1:


LE_Transmitter_Test_v1_
-----------------------

**API usage:** 
``engine.send("LE_Transmitter_Test_v1", TX_Channel=0xXx,Test_Data_Length=0xXx,Packet_Payload=0xXx)``

**CLI usage:**
``blengine send LE_Transmitter_Test_v1 --TX_Channel=0xXx --Test_Data_Length=0xXx --Packet_Payload=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x201e

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1e20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**TX_Channel**", "", "1", "<B", "|  N = (F-2402) / 2
  |  Range: 0x00 to 0x27.
  |  Frequency Range: 2402 MHz to 2480 MHz"
	"**Test_Data_Length**", "", "1", "<B", "|  Length in bytes of payload data in each packet"
	"**Packet_Payload**", "", "1", "<B", "|  0x00 PRBS9 sequence '11111111100000111101...' (in transmission order) as described in [Vol 6] Part F, Section 4.1.5
  |  0x01 Repeated '11110000' (in transmission order) sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x02 Repeated '10101010' (in transmission order) sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x03 PRBS15 sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x04 Repeated '11111111' (in transmission order) sequence
  |  0x05 Repeated '00000000' (in transmission order) sequence
  |  0x06 Repeated '00001111' (in transmission order) sequence
  |  0x07 Repeated '01010101' (in transmission order) sequence
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Transmitter_Test_v2:


LE_Transmitter_Test_v2_
-----------------------

**API usage:** 
``engine.send("LE_Transmitter_Test_v2", TX_Channel=0xXx,Test_Data_Length=0xXx,Packet_Payload=0xXx,PHY=0xXx)``

**CLI usage:**
``blengine send LE_Transmitter_Test_v2 --TX_Channel=0xXx --Test_Data_Length=0xXx --Packet_Payload=0xXx --PHY=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2034

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3420", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**TX_Channel**", "", "1", "<B", "|  N = (F-2402) / 2
  |  Range: 0x00 to 0x27.
  |  Frequency Range: 2402 MHz to 2480 MHz"
	"**Test_Data_Length**", "", "1", "<B", "|  Length in bytes of payload data in each packet"
	"**Packet_Payload**", "", "1", "<B", "|  0x00 PRBS9 sequence '11111111100000111101...' (in transmission order) as described in [Vol 6] Part F, Section 4.1.5
  |  0x01 Repeated '11110000' (in transmission order) sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x02 Repeated '10101010' (in transmission order) sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x03 PRBS15 sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x04 Repeated '11111111' (in transmission order) sequence
  |  0x05 Repeated '00000000' (in transmission order) sequence
  |  0x06 Repeated '00001111' (in transmission order) sequence
  |  0x07 Repeated '01010101' (in transmission order) sequence
  |  All other values Reserved for future use"
	"**PHY**", "", "1", "<B", "|  0x01 Transmitter set to use the LE 1M PHY
  |  0x02 Transmitter set to use the LE 2M PHY
  |  0x03 Transmitter set to use the LE Coded PHY with S=8 data coding
  |  0x04 Transmitter set to use the LE Coded PHY with S=2 data coding
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Transmitter_Test_v3:


LE_Transmitter_Test_v3_
-----------------------

**API usage:** 
``engine.send("LE_Transmitter_Test_v3", TX_Channel=0xXx,Test_Data_Length=0xXx,Packet_Payload=0xXx,PHY=0xXx,CTE_Length=0xXx,CTE_Type=0xXx,Switching_Pattern_Length=0xXx,Antenna_IDs=0xXx)``

**CLI usage:**
``blengine send LE_Transmitter_Test_v3 --TX_Channel=0xXx --Test_Data_Length=0xXx --Packet_Payload=0xXx --PHY=0xXx --CTE_Length=0xXx --CTE_Type=0xXx --Switching_Pattern_Length=0xXx --Antenna_IDs=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2050

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5020", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**TX_Channel**", "", "1", "<B", "|  N = (F-2402) / 2
  |  Range: 0x00 to 0x27.
  |  Frequency Range: 2402 MHz to 2480 MHz"
	"**Test_Data_Length**", "", "1", "<B", "|  Length in bytes of payload data in each packet"
	"**Packet_Payload**", "", "1", "<B", "|  0x00 PRBS9 sequence '11111111100000111101...' (in transmission order) as described in [Vol 6] Part F, Section 4.1.5
  |  0x01 Repeated '11110000' (in transmission order) sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x02 Repeated '10101010' (in transmission order) sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x03 PRBS15 sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x04 Repeated '11111111' (in transmission order) sequence
  |  0x05 Repeated '00000000' (in transmission order) sequence
  |  0x06 Repeated '00001111' (in transmission order) sequence
  |  0x07 Repeated '01010101' (in transmission order) sequence
  |  All other values Reserved for future use"
	"**PHY**", "", "1", "<B", "|  0x01 Transmitter set to use the LE 1M PHY
  |  0x02 Transmitter set to use the LE 2M PHY
  |  0x03 Transmitter set to use the LE Coded PHY with S=8 data coding
  |  0x04 Transmitter set to use the LE Coded PHY with S=2 data coding
  |  All other values Reserved for future use"
	"**CTE_Length**", "", "1", "<B", "|  0x00 Do not transmit a Constant Tone Extension
  |  0x02 to 0x14 Length of the Constant Tone Extension in 8 s units
  |  All other values Reserved for future use"
	"**CTE_Type**", "", "1", "<B", "|  0x00 AoA Constant Tone Extension
  |  0x01 AoD Constant Tone Extension with 1 s slots
  |  0x02 AoD Constant Tone Extension with 2 s slots
  |  All other values Reserved for future use"
	"**Switching_Pattern_Length**", "", "1", "<B", "|  0x02 to 0x4B The number of Antenna IDs in the pattern
  |  All other values Reserved for future use"
	"**Antenna_IDs**", "", "0", "None", "|  List of Antenna IDs in the pattern (Size: Switching_Pattern_Length * 1 octet)"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Transmitter_Test_v4:


LE_Transmitter_Test_v4_
-----------------------

**API usage:** 
``engine.send("LE_Transmitter_Test_v4", TX_Channel=0xXx,Test_Data_Length=0xXx,Packet_Payload=0xXx,PHY=0xXx,CTE_Length=0xXx,CTE_Type=0xXx,Switching_Pattern_Length=0xXx,Antenna_IDs=0xXx,Transmit_Power_Level=0xXx)``

**CLI usage:**
``blengine send LE_Transmitter_Test_v4 --TX_Channel=0xXx --Test_Data_Length=0xXx --Packet_Payload=0xXx --PHY=0xXx --CTE_Length=0xXx --CTE_Type=0xXx --Switching_Pattern_Length=0xXx --Antenna_IDs=0xXx --Transmit_Power_Level=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x207b

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7b20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**TX_Channel**", "", "1", "<B", "|  N = (F-2402) / 2
  |  Range: 0x00 to 0x27.
  |  Frequency Range: 2402 MHz to 2480 MHz"
	"**Test_Data_Length**", "", "1", "<B", "|  Length in bytes of payload data in each packet"
	"**Packet_Payload**", "", "1", "<B", "|  0x00 PRBS9 sequence '11111111100000111101...' (in transmission order) as described in [Vol 6] Part F, Section 4.1.5
  |  0x01 Repeated '11110000' (in transmission order) sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x02 Repeated '10101010' (in transmission order) sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x03 PRBS15 sequence as described in [Vol 6] Part F, Section 4.1.5
  |  0x04 Repeated '11111111' (in transmission order) sequence
  |  0x05 Repeated '00000000' (in transmission order) sequence
  |  0x06 Repeated '00001111' (in transmission order) sequence
  |  0x07 Repeated '01010101' (in transmission order) sequence
  |  All other values Reserved for future use"
	"**PHY**", "", "1", "<B", "|  0x01 Transmitter set to use the LE 1M PHY
  |  0x02 Transmitter set to use the LE 2M PHY
  |  0x03 Transmitter set to use the LE Coded PHY with S=8 data coding
  |  0x04 Transmitter set to use the LE Coded PHY with S=2 data coding
  |  All other values Reserved for future use"
	"**CTE_Length**", "", "1", "<B", "|  0x00 Do not transmit a Constant Tone Extension
  |  0x02 to 0x14 Length of the Constant Tone Extension in 8 s units
  |  All other values Reserved for future use"
	"**CTE_Type**", "", "1", "<B", "|  0x00 AoA Constant Tone Extension
  |  0x01 AoD Constant Tone Extension with 1 s slots
  |  0x02 AoD Constant Tone Extension with 2 s slots
  |  All other values Reserved for future use"
	"**Switching_Pattern_Length**", "", "1", "<B", "|  0x02 to 0x4B The number of Antenna IDs in the pattern
  |  All other values Reserved for future use"
	"**Antenna_IDs**", "", "0", "None", "|  List of Antenna IDs in the pattern (Size: Switching_Pattern_Length * 1 octet)"
	"**Transmit_Power_Level**", "", "1", "<B", "|  0xXX Set transmitter to the specified or the nearest transmit power level.
  |  Range: -127 to +20
  |  Units: dBm
  |  0x7E Set transmitter to minimum transmit power level
  |  0x7F Set transmitter to maximum transmit power level"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Test_End:


LE_Test_End_
------------

**API usage:** 
``engine.send("LE_Test_End")``

**CLI usage:**
``blengine send LE_Test_End``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x201f

LE Transmitter Test End



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x1f20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Num_Packets**", "2", "<H", "|  Number of packets transmitted during the test"

.. raw:: html
    
    <hr>

.. _pkt-LE_Remote_Connection_Parameter_Request_Reply:


LE_Remote_Connection_Parameter_Request_Reply_
---------------------------------------------

**API usage:** 
``engine.send("LE_Remote_Connection_Parameter_Request_Reply", Connection_Handle=0xXx,Interval_Min=0xXx,Interval_Max=0xXx,Max_Latency=0xXx,Timeout=0xXx,Min_CE_Length=0xXx,Max_CE_Length=0xXx)``

**CLI usage:**
``blengine send LE_Remote_Connection_Parameter_Request_Reply --Connection_Handle=0xXx --Interval_Min=0xXx --Interval_Max=0xXx --Max_Latency=0xXx --Timeout=0xXx --Min_CE_Length=0xXx --Max_CE_Length=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2020

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2020", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"
	"**Interval_Min**", "", "2", "<H", "|  Minimum value for the connection interval.
  |  Range: 0x0006 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 4 s."
	"**Interval_Max**", "", "2", "<H", "|  Maximum value for the connection interval.
  |  Range: 0x0006 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 4 s."
	"**Max_Latency**", "", "2", "<H", "|  Maximum allowed peripheral latency for the connection specified as the
  |  number of connection events.
  |  Range: 0x0000 to 0x01F3 (499)"
	"**Timeout**", "", "2", "<H", "|  Supervision timeout for the connection..
  |  Range: 0x000A to 0x0C80
  |  Time = N * 10 ms
  |  Time Range: 100 ms to 32 s"
	"**Min_CE_Length**", "", "2", "<H", "|  Information parameter about the minimum length of connection event needed for this LE connection. 
  |  How this value is used is outside the scope of this specification.
  |  Range: 0x0000 to 0xFFFF
  |  Time = N * 0.625 ms.
  |  Time Range: 0 ms to 40.9 s"
	"**Max_CE_Length**", "", "2", "<H", "|  Information parameter about the maximum length of connection event needed for this LE connection. 
  |  How this value is used is outside the scope of this specification.
  |  Range: 0x0000 to 0xFFFF
  |  Time = N * 0.625 ms.
  |  Time Range: 0 ms to 40.9 s"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Remote_Connection_Parameter_Request_Negative_Reply:


LE_Remote_Connection_Parameter_Request_Negative_Reply_
------------------------------------------------------

**API usage:** 
``engine.send("LE_Remote_Connection_Parameter_Request_Negative_Reply", Connection_Handle=0xXx,Reason=0xXx)``

**CLI usage:**
``blengine send LE_Remote_Connection_Parameter_Request_Negative_Reply --Connection_Handle=0xXx --Reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2021

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2120", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"
	"**Reason**", "", "1", "<B", "|  Reason that the connection parameter request was rejected. See
  |  [Vol 1] Part F, Controller Error Codes for a list of error codes and
  |  descriptions."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Data_Length:


LE_Set_Data_Length_
-------------------

**API usage:** 
``engine.send("LE_Set_Data_Length", Connection_Handle=0xXx,TX_Octets=0xXx,TX_Time=0xXx)``

**CLI usage:**
``blengine send LE_Set_Data_Length --Connection_Handle=0xXx --TX_Octets=0xXx --TX_Time=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2022

No Description



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2220", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle Range 0x0000 to 0x0EFF"
	"**TX_Octets**", "", "2", "<H", "|  Preferred maximum number of payload octets that the local Controller
  |  should include in a single LL Data PDU on this connection.
  |  Range 0x001B to 0x00FB"
	"**TX_Time**", "", "2", "<H", "|  Preferred maximum number of microseconds that the local Controller
  |  should use to transmit a single Link Layer packet containing an LL
  |  Data PDU on this connection.
  |  Range 0x0148 to 0x4290"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Suggested_Default_Data_Length:


LE_Read_Suggested_Default_Data_Length_
--------------------------------------

**API usage:** 
``engine.send("LE_Read_Suggested_Default_Data_Length")``

**CLI usage:**
``blengine send LE_Read_Suggested_Default_Data_Length``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2023

The HCI_LE_Read_Suggested_Default_Data_Length command allows the
  |  Host to read the Host's suggested values (Suggested_Max_TX_Octets and
  |  Suggested_Max_TX_Time) for the Controller's maximum transmitted number
  |  of payload octets and maximum packet transmission time for packets
  |  containing LL Data PDUs to be used for new connections (see [Vol 6] Part B,
  |  Section 4.5.10).



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2320", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Suggested_Max_TX_Octets**", "2", "<H", "|  The Host's suggested value for the Controller's maximum transmitted
  |  number of payload octets in LL Data PDUs to be used for new connections.
  |  Range 0x001B to 0x00FB
  |  Default: 0x001B"
	"**Suggested_Max_TX_Time**", "2", "<H", "|  The Host's suggested value for the Controller's maximum packet
  |  transmission time for packets containing LL Data PDUs to be used for
  |  new connections.
  |  Range 0x0148 to 0x4290
  |  Default: 0x0148"

.. raw:: html
    
    <hr>

.. _pkt-LE_Write_Suggested_Default_Data_Length:


LE_Write_Suggested_Default_Data_Length_
---------------------------------------

**API usage:** 
``engine.send("LE_Write_Suggested_Default_Data_Length", Suggested_Max_TX_Octets=0xXx,Suggested_Max_TX_Time=0xXx)``

**CLI usage:**
``blengine send LE_Write_Suggested_Default_Data_Length --Suggested_Max_TX_Octets=0xXx --Suggested_Max_TX_Time=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2024

The HCI_LE_Write_Suggested_Default_Data_Length command allows the
  |  Host to specify its suggested values for the Controller's maximum transmission
  |  number of payload octets and maximum packet transmission time for packets
  |  containing LL Data PDUs to be used for new connections. The Controller may
  |  use smaller or larger values for connInitialMaxTxOctets and
  |  connInitialMaxTxTime based on local information. (See [Vol 6] Part B, Section
  |  4.5.10).



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2420", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Suggested_Max_TX_Octets**", "", "2", "<H", "|  The Host's suggested value for the Controller's maximum transmitted
  |  number of payload octets in LL Data PDUs to be used for new connections.
  |  Range 0x001B to 0x00FB
  |  Default: 0x001B"
	"**Suggested_Max_TX_Time**", "", "2", "<H", "|  The Host's suggested value for the Controller's maximum packet
  |  transmission time for packets containing LL Data PDUs to be used for
  |  new connections.
  |  Range 0x0148 to 0x4290
  |  Default: 0x0148"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Local_P256_Public_Key:


LE_Read_Local_P256_Public_Key_
------------------------------

**API usage:** 
``engine.send("LE_Read_Local_P256_Public_Key")``

**CLI usage:**
``blengine send LE_Read_Local_P256_Public_Key``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2025

The HCI_LE_Read_Local_P-256_Public_Key command is used to return the
  |  local P-256 public key from the Controller. The Controller shall generate a new
  |  P-256 public/private key pair upon receipt of this command.
  |  The keys returned via this command shall not be used when Secure
  |  Connections is used over the BR/EDR transport.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2520", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Generate_DHKey_V1:


LE_Generate_DHKey_V1_
---------------------

**API usage:** 
``engine.send("LE_Generate_DHKey_V1", Remote_P256_Public_Key=0xXx)``

**CLI usage:**
``blengine send LE_Generate_DHKey_V1 --Remote_P256_Public_Key=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2026

The HCI_LE_Generate_DHKey command is used to initiate generation of a
  |  Diffie-Hellman key in the Controller for use over the LE transport. This
  |  command takes the remote P-256 public key as input. The Diffie-Hellman key
  |  generation uses the private key generated by the HCI_LE_Read_Local_P-
  |  256_Public_Key command or the private debug key (see [Vol 3] Part H,
  |  Section 2.3.5.6.1).



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2620", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Remote_P256_Public_Key**", "", "64", "<64B", "|  The remote P-256 public key:
  |  X, Y format
  |  Octets 31-0: X co-ordinate
  |  Octets 63-32: Y co-ordinate
  |  Little-endian Format"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Generate_DHKey_V2:


LE_Generate_DHKey_V2_
---------------------

**API usage:** 
``engine.send("LE_Generate_DHKey_V2", Remote_P256_Public_Key=0xXx,Key_Type=0xXx)``

**CLI usage:**
``blengine send LE_Generate_DHKey_V2 --Remote_P256_Public_Key=0xXx --Key_Type=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x205e

The HCI_LE_Generate_DHKey command is used to initiate generation of a
  |  Diffie-Hellman key in the Controller for use over the LE transport. This
  |  command takes the remote P-256 public key as input. The Diffie-Hellman key
  |  generation uses the private key generated by the HCI_LE_Read_Local_P-
  |  256_Public_Key command or the private debug key (see [Vol 3] Part H,
  |  Section 2.3.5.6.1).



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5e20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Remote_P256_Public_Key**", "", "64", "<64B", "|  The remote P-256 public key:
  |  X, Y format
  |  Octets 31-0: X co-ordinate
  |  Octets 63-32: Y co-ordinate
  |  Little-endian Format"
	"**Key_Type**", "", "1", "<B", "|  0x00 = Use the generated private key
  |  0x01 = Use the debug private key
  |  All other values = Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Add_Device_To_Resolving_List:


LE_Add_Device_To_Resolving_List_
--------------------------------

**API usage:** 
``engine.send("LE_Add_Device_To_Resolving_List", Peer_Identity_Address_Type=0xXx,Peer_Identity_Address=0xXx,Peer_IRK=0xXx,Local_IRK=0xXx)``

**CLI usage:**
``blengine send LE_Add_Device_To_Resolving_List --Peer_Identity_Address_Type=0xXx --Peer_Identity_Address=0xXx --Peer_IRK=0xXx --Local_IRK=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2027

The HCI_LE_Add_Device_To_Resolving_List command is used to add one
  |  device to the resolving list used to generate and resolve Resolvable Private
  |  Addresses in the Controller.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2720", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Peer_Identity_Address_Type**", "", "1", "<B", "|  0x00 = Public Identity Address
  |  0x01 = Random (static) Identity Address
  |  All other values = Reserved for future use"
	"**Peer_Identity_Address**", "", "6", "mac", "|  Public or Random (static) Identity address of the peer device"
	"**Peer_IRK**", "", "16", "<16s", "|  IRK of the peer devicee"
	"**Local_IRK**", "", "16", "<16s", "|  IRK of the local devicee"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Remove_Device_From_Resolving_List:


LE_Remove_Device_From_Resolving_List_
-------------------------------------

**API usage:** 
``engine.send("LE_Remove_Device_From_Resolving_List", Peer_Identity_Address_Type=0xXx,Peer_Device_Address=0xXx)``

**CLI usage:**
``blengine send LE_Remove_Device_From_Resolving_List --Peer_Identity_Address_Type=0xXx --Peer_Device_Address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2028

The HCI_LE_Remove_Device_From_Resolving_List command is used to
  |  remove one device from the resolving list used to resolve Resolvable Private
  |  Addresses in the Controller.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2820", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Peer_Identity_Address_Type**", "", "1", "<B", "|  0x00 = Public Identity Address
  |  0x01 = Random (static) Identity Address
  |  All other values = Reserved for future use"
	"**Peer_Device_Address**", "", "6", "mac", "|  Public or Random (static) Identity address of the peer device"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Clear_Resolving_List:


LE_Clear_Resolving_List_
------------------------

**API usage:** 
``engine.send("LE_Clear_Resolving_List")``

**CLI usage:**
``blengine send LE_Clear_Resolving_List``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2029

The HCI_LE_Clear_Resolving_List command is used to remove all devices
  |  from the resolving list used to resolve Resolvable Private Addresses in the
  |  Controller.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2920", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Resolving_List_Size:


LE_Read_Resolving_List_Size_
----------------------------

**API usage:** 
``engine.send("LE_Read_Resolving_List_Size")``

**CLI usage:**
``blengine send LE_Read_Resolving_List_Size``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x202a

The HCI_LE_Read_Resolving_List_Size command is used to read the total
  |  number of entries in the resolving list that can be stored in the Controller.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2a20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Resolving_List_Size**", "1", "<B", "|  Number of entries in the resolving list"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Peer_Resolvable_Address:


LE_Read_Peer_Resolvable_Address_
--------------------------------

**API usage:** 
``engine.send("LE_Read_Peer_Resolvable_Address", Peer_Identity_Address_Type=0xXx,Peer_Identity_Address=0xXx)``

**CLI usage:**
``blengine send LE_Read_Peer_Resolvable_Address --Peer_Identity_Address_Type=0xXx --Peer_Identity_Address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x202b

The HCI_LE_Read_Peer_Resolvable_Address command is used to get the
  |  current peer Resolvable Private Address being used for the corresponding
  |  peer Public and Random (static) Identity Address. The peers resolvable
  |  address being used may change after the command is called.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2b20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Peer_Identity_Address_Type**", "", "1", "<B", "|  0x00 = Public Identity Address
  |  0x01 = Random (static) Identity Address
  |  All other values = Reserved for future use"
	"**Peer_Identity_Address**", "", "6", "mac", "|  Public or Random (static) Identity address of the peer device"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Peer_Resolvable_Address**", "6", "mac", "|  Resolvable Private Address being used by the peer device"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Local_Resolvable_Address:


LE_Read_Local_Resolvable_Address_
---------------------------------

**API usage:** 
``engine.send("LE_Read_Local_Resolvable_Address", Peer_Identity_Address_Type=0xXx,Peer_Identity_Address=0xXx)``

**CLI usage:**
``blengine send LE_Read_Local_Resolvable_Address --Peer_Identity_Address_Type=0xXx --Peer_Identity_Address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x202c

The HCI_LE_Read_Local_Resolvable_Address command is used to get the
  |  current local Resolvable Private Address being used for the corresponding
  |  peer Identity Address. The local resolvable address being used may change
  |  after the command is called.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2c20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Peer_Identity_Address_Type**", "", "1", "<B", "|  0x00 = Public Identity Address
  |  0x01 = Random (static) Identity Address
  |  All other values = Reserved for future use"
	"**Peer_Identity_Address**", "", "6", "mac", "|  Public or Random (static) Identity address of the peer device"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Local_Resolvable_Address**", "6", "mac", "|  Resolvable Private Address being used by the local device"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Address_Resolution_Enable:


LE_Set_Address_Resolution_Enable_
---------------------------------

**API usage:** 
``engine.send("LE_Set_Address_Resolution_Enable", Address_Resolution_Enable=0xXx)``

**CLI usage:**
``blengine send LE_Set_Address_Resolution_Enable --Address_Resolution_Enable=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x202d

The HCI_LE_Set_Address_Resolution_Enable command is used to enable
  |  resolution of Resolvable Private Addresses in the Controller. This causes the
  |  Controller to use the resolving list whenever the Controller receives a local or
  |  peer Resolvable Private Address.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2d20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Address_Resolution_Enable**", "", "1", "<B", "|  0x00 = Address Resolution in Controller disabled (default)
  |  0x01 = Address Resolution in Controller enabled
  |  All other values = Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Resolvable_Private_Address_Timeout:


LE_Set_Resolvable_Private_Address_Timeout_
------------------------------------------

**API usage:** 
``engine.send("LE_Set_Resolvable_Private_Address_Timeout", RPA_Timeout=0xXx)``

**CLI usage:**
``blengine send LE_Set_Resolvable_Private_Address_Timeout --RPA_Timeout=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x202e

The HCI_LE_Set_Resolvable_Private_Address_Timeout command set the
  |  length of time the Controller uses a Resolvable Private Address before a new
  |  resolvable private address is generated and starts being used.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2e20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**RPA_Timeout**", "", "2", "<H", "|  RPA_Timeout measured in seconds
  |  Range: 0x0001 to 0x0E10
  |  Time range: 1 s to 1 hour
  |  Default: 0x0384 (900 s or 15 minutes)"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Maximum_Data_Length:


LE_Read_Maximum_Data_Length_
----------------------------

**API usage:** 
``engine.send("LE_Read_Maximum_Data_Length")``

**CLI usage:**
``blengine send LE_Read_Maximum_Data_Length``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x202f

The HCI_LE_Read_Maximum_Data_Length command allows the Host to read
  |  the Controllers maximum supported payload octets and packet duration times
  |  for transmission and reception (Supported_Max_TX_Octets and
  |  Supported_Max_TX_Time, Supported_Max_RX_Octets, and
  |  Supported_Max_RX_Time, see [Vol 6] Part B, Section 4.5.10).



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x2f20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Supported_Max_TX_Octets**", "2", "<H", "|  Maximum number of payload octets that the local Controller supports
  |  for transmission of a single Link Layer packet on an ACL connection.
  |  Range 0x001B to 0x00FB"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_PHY:


LE_Read_PHY_
------------

**API usage:** 
``engine.send("LE_Read_PHY", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Read_PHY --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2030

The HCI_LE_Read_PHY command is used to read the current transmitter PHY
  |  and receiver PHY on the connection identified by the Connection_Handle.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3020", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle
  |  Range:0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  Connection_Handle
  |  Range:0x0000 to 0x0EFF"
	"**TX_PHY**", "1", "<B", "|  0x01 = The receiver PHY for the connection is LE 1M
  |  0x02 = The receiver PHY for the connection is LE 2M
  |  0x03 = The receiver PHY for the connection is LE Coded
  |  All other values = Reserved for future use"
	"**RX_PHY**", "1", "<B", "|  0x01 = The receiver PHY for the connection is LE 1M
  |  0x02 = The receiver PHY for the connection is LE 2M
  |  0x03 = The receiver PHY for the connection is LE Coded
  |  All other values = Reserved for future use"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Default_PHY:


LE_Set_Default_PHY_
-------------------

**API usage:** 
``engine.send("LE_Set_Default_PHY", All_PHYs=0xXx,TX_PHYs=0xXx,RX_PHYs=0xXx)``

**CLI usage:**
``blengine send LE_Set_Default_PHY --All_PHYs=0xXx --TX_PHYs=0xXx --RX_PHYs=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2031

The HCI_LE_Set_Default_PHY command allows the Host to specify its
  |  preferred values for the transmitter PHY and receiver PHY to be used for all
  |  subsequent connections over the LE transport.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3120", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**All_PHYs**", "", "1", "<B", "|  bit 0 = The Host has no preference among the transmitter PHYs supported by the Controller
  |  bit 1 = The Host has no preference among the receiver PHYs supported by the Controller
  |  All other bits = Reserved for future use"
	"**TX_PHYs**", "", "1", "<B", "|  bit 0 = The Host prefers to use the LE 1M transmitter PHY (possibly among others)
  |  bit 1 = The Host prefers to use the LE 2M transmitter PHY (possibly among others)
  |  bit 2 = The Host prefers to use the LE Coded transmitter PHY (possibly among others)
  |  All other bits = Reserved for future use"
	"**RX_PHYs**", "", "1", "<B", "|  bit 0 = The Host prefers to use the LE 1M receiver PHY (possibly among others)
  |  bit 1 = The Host prefers to use the LE 2M receiver PHY (possibly among others)
  |  bit 2 = The Host prefers to use the LE Coded receiver PHY (possibly among others)
  |  All other bits = Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_PHY:


LE_Set_PHY_
-----------

**API usage:** 
``engine.send("LE_Set_PHY", Connection_Handle=0xXx,All_PHYs=0xXx,TX_PHYs=0xXx,RX_PHYs=0xXx,PHY_Options=0xXx)``

**CLI usage:**
``blengine send LE_Set_PHY --Connection_Handle=0xXx --All_PHYs=0xXx --TX_PHYs=0xXx --RX_PHYs=0xXx --PHY_Options=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2032

The HCI_LE_Set_Default_PHY command allows the Host to specify its
  |  preferred values for the transmitter PHY and receiver PHY to be used for all
  |  subsequent connections over the LE transport.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3220", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  Connection_Handle
  |  Range:0x0000 to 0x0EFF"
	"**All_PHYs**", "", "1", "<B", "|  bit 0 = The Host has no preference among the transmitter PHYs supported by the Controller
  |  bit 1 = The Host has no preference among the receiver PHYs supported by the Controller
  |  All other bits = Reserved for future use"
	"**TX_PHYs**", "", "1", "<B", "|  bit 0 = The Host prefers to use the LE 1M transmitter PHY (possibly among others)
  |  bit 1 = The Host prefers to use the LE 2M transmitter PHY (possibly among others)
  |  bit 2 = The Host prefers to use the LE Coded transmitter PHY (possibly among others)
  |  All other bits = Reserved for future use"
	"**RX_PHYs**", "", "1", "<B", "|  bit 0 = The Host prefers to use the LE 1M receiver PHY (possibly among others)
  |  bit 1 = The Host prefers to use the LE 2M receiver PHY (possibly among others)
  |  bit 2 = The Host prefers to use the LE Coded receiver PHY (possibly among others)
  |  All other bits = Reserved for future use"
	"**PHY_Options**", "", "2", "<H", "|  0 = the Host has no preferred coding when transmitting on the LE Coded
  |  PHY
  |  1 = the Host prefers that S=2 coding be used when transmitting on the LE
  |  Coded PHY
  |  2 = the Host prefers that S=8 coding be used when transmitting on the LE
  |  Coded PHY
  |  3 = Reserved for future use
  |  All other bits = Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Advertising_Set_Random_Address:


LE_Set_Advertising_Set_Random_Address_
--------------------------------------

**API usage:** 
``engine.send("LE_Set_Advertising_Set_Random_Address", Advertising_Handle=0xXx,Advertising_Random_Address=0xXx)``

**CLI usage:**
``blengine send LE_Set_Advertising_Set_Random_Address --Advertising_Handle=0xXx --Advertising_Random_Address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2035

The HCI_LE_Set_Advertising_Set_Random_Address command is used by the
  |  Host to set the random device address specified by the Random_Address
  |  parameter. This address is used in the Controller (see [Vol 6] Part B, Section
  |  1.3.2) for the advertiser's address contained in the advertising PDUs for the
  |  advertising set specified by the Advertising_Handle parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3520", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "", "1", "<B", "|  Used to identify an advertising set
  |  Range: 0x00 to 0xEF"
	"**Advertising_Random_Address**", "", "6", "mac", "|  Random Device Address as defined by [Vol 6] Part B, Section 1.3.2"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Extended_Advertising_Parameters:


LE_Set_Extended_Advertising_Parameters_
---------------------------------------

**API usage:** 
``engine.send("LE_Set_Extended_Advertising_Parameters")``

**CLI usage:**
``blengine send LE_Set_Extended_Advertising_Parameters``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2036

The HCI_LE_Set_Extended_Advertising_Parameters command is used by the
  |  Host to set the advertising parameters.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3620", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "0x00", "1", "<B", "|  Used to identify an advertising set
  |  Range: 0x00 to 0xEF"
	"**Advertising_Event_Properties**", "0x00", "2", "<H", "|  bit 0 = Connectable 
  |  bit 1 = Scannable advertising
  |  bit 2 = Directed advertising
  |  bit 3 = High Duty Cycle Directed Connectable advertising ( 3.75 ms Advertising Interval)
  |  bit 4 = Use legacy advertising PDUs
  |  bit 5 = Omit advertiser's address from all PDUs (anonymous advertising)
  |  bit 6 = Include TxPower in the extended header of at least one advertising PDU
  |  All other bits = Reserved for future use"
	"**Primary_Advertising_Interval_Min**", "0x50", "3", "<3s", "|  Minimum advertising interval for undirected and low duty cycle directed
  |  advertising.
  |  Range: 0x000020 to 0xFFFFFF
  |  Time = N * 0.625 ms
  |  Time Range: 20 ms to 10,485.759375 s"
	"**Primary_Advertising_Interval_Max**", "0x80", "3", "<3s", "|  Maximum advertising interval for undirected and low duty cycle directed
  |  advertising.
  |  Range: 0x000020 to 0xFFFFFF
  |  Time = N * 0.625 ms
  |  Time Range: 20 ms to 10,485.759375 s"
	"**Primary_Advertising_Channel_Map**", "0x07", "1", "<B", "|  bit 0 = Channel 37 shall be used
  |  bit 1 = Channel 38 shall be used
  |  bit 2 = Channel 39 shall be used
  |  All other bits = Reserved for future use"
	"**Own_Address_Type**", "0x00", "1", "<B", "|  0x00 = Public Device Address
  |  0x01 = Random Device Address
  |  0x02 = Controller generates the Resolvable Private Address based on the local
  |      IRK from the resolving list. If the resolving list contains no matching
  |      entry, use the public address.
  |  0x03 = Controller generates the Resolvable Private Address based on the local
  |      IRK from the resolving list. If the resolving list contains no matching
  |      entry, use the random address from LE_Set_Advertising_Set_Random_
  |      Address.
  |  All other values = Reserved for future use"
	"**Peer_Address_Type**", "0x00", "1", "<B", "|  0x00 = Public Device Address or Public Identity Address
  |  0x01 = Random Device Address or Random (static) Identity Address
  |  All other values = Reserved for future use"
	"**Peer_Address**", "0x00", "6", "mac", "|  Public Device Address, Random Device Address, Public Identity
  |  Address, or Random (static) Identity Address of the device to be connected."
	"**Advertising_Filter_Policy**", "0x00", "1", "<B", "|  0x00 = Process scan and connection requests from all devices (i.e., the White
  |      List is not in use)
  |  0x01 = Process connection requests from all devices and scan requests only
  |      from devices that are in the Filter Accept List.
  |  0x02 = Process scan requests from all devices and connection requests only
  |      from devices that are in the Filter Accept List.
  |  0x03 = Process scan and connection requests only from devices in the White
  |      List.
  |  All other values = Reserved for future use"
	"**Advertising_TX_Power**", "0x00", "1", "rssi", "|  0xXX = Range: -127 to +20 Units: dBm
  |  0x7F = Host has no preference"
	"**Primary_Advertising_PHY**", "0x01", "1", "<B", "|  0x01 = Primary advertisement PHY is LE 1M
  |  0x03 = Primary advertisement PHY is LE Coded
  |  All other values = Reserved for future use"
	"**Secondary_Advertising_Max_Skip**", "0x00", "1", "<B", "|  0x00 = AUX_ADV_IND shall be sent prior to the next advertising event
  |  0x01 to 0xFF = Maximum advertising events the Controller can skip before sending the
  |      AUX_ADV_IND packets on the secondary advertising physical channel"
	"**Secondary_Advertising_PHY**", "0x02", "1", "<B", "|  0x01 = Secondary advertisement PHY is LE 1M
  |  0x02 = Secondary advertisement PHY is LE 2M
  |  0x03 = Secondary advertisement PHY is LE Coded
  |  All other values = Reserved for future use"
	"**Advertising_SID**", "0x00", "1", "<B", "|  0x00 to 0x0F = Value of the Advertising SID subfield in the ADI field of the PDU
  |  All other values = Reserved for future use"
	"**Scan_Request_Notification_Enable**", "0x00", "1", "<B", "|  0x00 = Scan request notifications disabled
  |  0x01 = Scan request notifications enabled
  |  All other values = Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Selected_TX_Power**", "1", "rssi", "|  0xXX = Range: -127 to +20 Units: dBm"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Extended_Advertising_Parameters_v2:


LE_Set_Extended_Advertising_Parameters_v2_
------------------------------------------

**API usage:** 
``engine.send("LE_Set_Extended_Advertising_Parameters_v2", Peer_Address=0xXx)``

**CLI usage:**
``blengine send LE_Set_Extended_Advertising_Parameters_v2 --Peer_Address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x207f

The HCI_LE_Set_Extended_Advertising_Parameters command is used by the
  |  Host to set the advertising parameters.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7f20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "0x01", "1", "<B", "|  Used to identify an advertising set
  |  Range: 0x00 to 0xEF"
	"**Advertising_Event_Properties**", "0x02", "2", "<H", "|  bit 0 = Connectable advertising
  |  bit 1 = Scannable advertising
  |  bit 2 = Directed advertising
  |  bit 3 = High Duty Cycle Directed Connectable advertising ( 3.75 ms Advertising Interval)
  |  bit 4 = Use legacy advertising PDUs
  |  bit 5 = Omit advertiser's address from all PDUs (anonymous advertising)
  |  bit 6 = Include TxPower in the extended header of at least one advertising PDU
  |  All other bits = Reserved for future use"
	"**Primary_Advertising_Interval_Min**", "0x50", "3", "<3s", "|  Minimum advertising interval for undirected and low duty cycle directed
  |  advertising.
  |  Range: 0x000020 to 0xFFFFFF
  |  Time = N * 0.625 ms
  |  Time Range: 20 ms to 10,485.759375 s"
	"**Primary_Advertising_Interval_Max**", "0x80", "3", "<3s", "|  Maximum advertising interval for undirected and low duty cycle directed
  |  advertising.
  |  Range: 0x000020 to 0xFFFFFF
  |  Time = N * 0.625 ms
  |  Time Range: 20 ms to 10,485.759375 s"
	"**Primary_Advertising_Channel_Map**", "0x01", "1", "<B", "|  bit 0 = Channel 37 shall be used
  |  bit 1 = Channel 38 shall be used
  |  bit 2 = Channel 39 shall be used
  |  All other bits = Reserved for future use"
	"**Own_Address_Type**", "0x00", "1", "<B", "|  0x00 = Public Device Address
  |  0x01 = Random Device Address
  |  0x02 = Controller generates the Resolvable Private Address based on the local
  |      IRK from the resolving list. If the resolving list contains no matching
  |      entry, use the public address.
  |  0x03 = Controller generates the Resolvable Private Address based on the local
  |      IRK from the resolving list. If the resolving list contains no matching
  |      entry, use the random address from LE_Set_Advertising_Set_Random_
  |      Address.
  |  All other values = Reserved for future use"
	"**Peer_Address_Type**", "0x00", "1", "<B", "|  0x00 = Public Device Address or Public Identity Address
  |  0x01 = Random Device Address or Random (static) Identity Address
  |  All other values = Reserved for future use"
	"**Peer_Address**", "", "6", "mac", "|  Public Device Address, Random Device Address, Public Identity
  |  Address, or Random (static) Identity Address of the device to be connected."
	"**Advertising_Filter_Policy**", "0x00", "1", "<B", "|  0x00 = Process scan and connection requests from all devices (i.e., the White
  |      List is not in use)
  |  0x01 = Process connection requests from all devices and scan requests only
  |      from devices that are in the Filter Accept List.
  |  0x02 = Process scan requests from all devices and connection requests only
  |      from devices that are in the Filter Accept List.
  |  0x03 = Process scan and connection requests only from devices in the White
  |      List.
  |  All other values = Reserved for future use"
	"**Advertising_TX_Power**", "0x00", "1", "rssi", "|  0xXX = Range: -127 to +20 Units: dBm
  |  0x7F = Host has no preference"
	"**Primary_Advertising_PHY**", "0x01", "1", "<B", "|  0x01 = Primary advertisement PHY is LE 1M
  |  0x03 = Primary advertisement PHY is LE Coded
  |  All other values = Reserved for future use"
	"**Secondary_Advertising_Max_Skip**", "0x00", "1", "<B", "|  0x00 = AUX_ADV_IND shall be sent prior to the next advertising event
  |  0x01 to 0xFF = Maximum advertising events the Controller can skip before sending the
  |      AUX_ADV_IND packets on the secondary advertising physical channel"
	"**Secondary_Advertising_PHY**", "0x02", "1", "<B", "|  0x01 = Secondary advertisement PHY is LE 1M
  |  0x02 = Secondary advertisement PHY is LE 2M
  |  0x03 = Secondary advertisement PHY is LE Coded
  |  All other values = Reserved for future use"
	"**Advertising_SID**", "0x00", "1", "<B", "|  0x00 to 0x0F = Value of the Advertising SID subfield in the ADI field of the PDU
  |  All other values = Reserved for future use"
	"**Scan_Request_Notification_Enable**", "0x00", "1", "<B", "|  0x00 = Scan request notifications disabled
  |  0x01 = Scan request notifications enabled
  |  All other values = Reserved for future use"
	"**Primary_Advertising_PHY_Options**", "0x00", "1", "<B", "|  0x00 = The Host has no preferred or required coding when transmitting on the LE Coded PHY
  |  0x01 = The Host prefers that S=2 coding be used when transmitting on the LE Coded PHY
  |  0x02 = The Host prefers that S=8 coding be used when transmitting on the LE Coded PHY
  |  0x03 = The Host requires that S=2 coding be used when transmitting on the LE Coded PHY
  |  0x04 = The Host requires that S=8 coding be used when transmitting on the LE Coded PHY
  |  All other values = Reserved for future use"
	"**Secondary_Advertising_PHY_Options**", "0x00", "1", "<B", "|  0x00 = The Host has no preferred or required coding when transmitting on the LE Coded PHY
  |  0x01 = The Host prefers that S=2 coding be used when transmitting on the LE Coded PHY
  |  0x02 = The Host prefers that S=8 coding be used when transmitting on the LE Coded PHY
  |  0x03 = The Host requires that S=2 coding be used when transmitting on the LE Coded PHY
  |  0x04 = The Host requires that S=8 coding be used when transmitting on the LE Coded PHY
  |  All other values = Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Selected_TX_Power**", "1", "rssi", "|  0xXX = Range: -127 to +20 Units: dBm"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Extended_Advertising_Data:


LE_Set_Extended_Advertising_Data_
---------------------------------

**API usage:** 
``engine.send("LE_Set_Extended_Advertising_Data", Advertising_Data_Length=0xXx,Advertising_Data=0xXx)``

**CLI usage:**
``blengine send LE_Set_Extended_Advertising_Data --Advertising_Data_Length=0xXx --Advertising_Data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2037

The HCI_LE_Set_Extended_Advertising_Data command is used to set the
  |  data used in advertising PDUs that have a data field. This command may be
  |  issued at any time after an advertising set identified by the Advertising_Handle
  |  parameter has been created using the HCI_LE_Set_Extended_Advertising_Parameters command 
  |  (see Section 7.8.53), regardless of whether advertising in that set is enabled or disabled.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3720", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "0x01", "1", "<B", "|  0xXX = Used to identify an advertising set Range: 0x00 to 0xEF"
	"**Operation**", "0x03", "1", "<B", "|  0x00 = Intermediate fragment of fragmented extended advertising data
  |  0x01 = First fragment of fragmented extended advertising data
  |  0x02 = Last fragment of fragmented extended advertising data
  |  0x03 = Complete extended advertising data
  |  0x04 = Unchanged data (just update the Advertising DID)
  |  All other values = Reserved for future use"
	"**Fragment_Preference**", "0x01", "1", "<B", "|  0x00 = The Controller may fragment all Host advertising data
  |  0x01 = The Controller should not fragment or should minimize fragmentation of Host advertising data
  |  All other values = Reserved for future use"
	"**Advertising_Data_Length**", "", "1", "<B", "|  0 to 251 = The number of octets in the Advertising Data parameter
  |  All other values = Reserved for future use"
	"**Advertising_Data**", "", "0", "None", "|  Advertising data formatted as defined in [Vol 3] Part C, Section 11 
  |  Note: This parameter has a variable length."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Extended_Scan_Response_Data:


LE_Set_Extended_Scan_Response_Data_
-----------------------------------

**API usage:** 
``engine.send("LE_Set_Extended_Scan_Response_Data", Scan_Response_Data_Length=0xXx,Scan_Response_Data=0xXx)``

**CLI usage:**
``blengine send LE_Set_Extended_Scan_Response_Data --Scan_Response_Data_Length=0xXx --Scan_Response_Data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2038

The HCI_LE_Set_Extended_Scan_Response_Data command is used to
  |  provide scan response data used in scanning response PDUs. This command
  |  may be issued at any time after the advertising set identified by the
  |  Advertising_Handle parameter has been created using the
  |  HCI_LE_Set_Extended_Advertising_Parameters command (see Section
  |  7.8.53) regardless of whether advertising in that set is enabled or disabled



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3820", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "0x01", "1", "<B", "|  0xXX = Used to identify an advertising set Range: 0x00 to 0xEF"
	"**Operation**", "0x03", "1", "<B", "|  0x00 = Intermediate fragment of fragmented scan response data
  |  0x01 = First fragment of fragmented scan response data
  |  0x02 = Last fragment of fragmented scan response data
  |  0x03 = Complete scan response data
  |  All other values = Reserved for future use"
	"**Fragment_Preference**", "0x01", "1", "<B", "|  0x00 = The Controller may fragment all scan response data
  |  0x01 = The Controller should not fragment or should minimize fragmentation of
  |  scan response data
  |  All other values = Reserved for future use"
	"**Scan_Response_Data_Length**", "", "1", "<B", "|  0 to 251 = The number of octets in the Scan_Response Data parameter
  |  All other values = Reserved for future use"
	"**Scan_Response_Data**", "", "0", "None", "|  Scan response data formatted as defined in [Vol 3] Part C, Section 11
  |  Note: This parameter has a variable length."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Extended_Advertising_Enable:


LE_Set_Extended_Advertising_Enable_
-----------------------------------

**API usage:** 
``engine.send("LE_Set_Extended_Advertising_Enable")``

**CLI usage:**
``blengine send LE_Set_Extended_Advertising_Enable``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2039

The HCI_LE_Set_Extended_Advertising_Enable command is used to request
  |  the Controller to enable or disable one or more advertising sets using the
  |  advertising sets identified by the Advertising_Handle[i] parameter. The
  |  Controller manages the timing of advertisements in accordance with the
  |  advertising parameters given in the
  |  HCI_LE_Set_Extended_Advertising_Parameters command. The Num_Sets
  |  parameter is the number of advertising sets contained in the parameter arrays.
  |  If Enable and Num_Sets are both set to 0x00, then all advertising sets are
  |  disabled.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3920", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Enable**", "0x01", "1", "<B", "|  0x00 = Advertising is disabled
  |  0x01 = Advertising is enabled
  |  All other values = Reserved for future use"
	"**Num_Sets**", "0x00", "1", "<B", "|  0x00 = Disable all advertising sets
  |  0x01 to 0x3F = Number of advertising sets to enable or disable
  |  All other values = Reserved for future use"
	"**Advertising_Handle**", "0x01", "1", "<B", "|  Size: Num_Sets  1 octet
  |  0x00 to 0xEF = Used to identify an advertising set
  |  All other values = Reserved for future use"
	"**Duration**", "0x00", "2", "<H", "|  Size: Num_Sets  2 octets
  |  0x0000 = No advertising duration. Advertising to continue until the Host disables it.
  |  N = 0xXXXX Advertising duration
  |             Range: 0x0001 to 0xFFFF
  |             Time = N * 10 ms
  |             Time Range: 10 ms to 655,350 ms
  |             ***ToDo:structure dynamic size***"
	"**Max_Extended_Advertising_Events**", "0x00", "1", "<B", "|  Size: Num_Sets  1 octet
  |  0xXX = Maximum number of extended advertising events the Controller shall
  |      attempt to send prior to terminating the extended advertising
  |  0x00 = No maximum number of advertising events.
  |  ***ToDo:structure dynamic size***"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Maximum_Advertising_Data_Length:


LE_Read_Maximum_Advertising_Data_Length_
----------------------------------------

**API usage:** 
``engine.send("LE_Read_Maximum_Advertising_Data_Length")``

**CLI usage:**
``blengine send LE_Read_Maximum_Advertising_Data_Length``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x203a

The HCI_LE_Read_Maximum_Advertising_Data_Length command is used to
  |  read the maximum length of data supported by the Controller for use as
  |  advertisement data or scan response data in an advertising event or as
  |  periodic advertisement data.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3a20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Max_Advertising_Data_Length**", "2", "<H", "|  0x001F to 0x0672 = Maximum supported advertising data length
  |  All other values = Reserved for future use"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Number_of_Supported_Advertising_Sets:


LE_Read_Number_of_Supported_Advertising_Sets_
---------------------------------------------

**API usage:** 
``engine.send("LE_Read_Number_of_Supported_Advertising_Sets")``

**CLI usage:**
``blengine send LE_Read_Number_of_Supported_Advertising_Sets``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x203b

The HCI_LE_Read_Number_of_Supported_Advertising_Sets command is
  |  used to read the maximum number of advertising sets supported by the
  |  advertising Controller at the same time.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3b20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Num_Supported_Advertising_Sets**", "1", "<B", "|  0x01 to 0xF0 = Number of advertising sets supported at the same time
  |  All other values Reserved for future use"

.. raw:: html
    
    <hr>

.. _pkt-LE_Remove_Advertising_Set:


LE_Remove_Advertising_Set_
--------------------------

**API usage:** 
``engine.send("LE_Remove_Advertising_Set", Advertising_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Remove_Advertising_Set --Advertising_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x203c





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3c20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "", "1", "<B", "|  0xXX Used to identify an advertising set
  |  Range: 0x00 to 0xEF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Clear_Advertising_Sets:


LE_Clear_Advertising_Sets_
--------------------------

**API usage:** 
``engine.send("LE_Clear_Advertising_Sets")``

**CLI usage:**
``blengine send LE_Clear_Advertising_Sets``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x203d

The HCI_LE_Clear_Advertising_Sets command is used to remove all existing
  |  advertising sets from the Controller.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3d20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Periodic_Advertising_Parameters:


LE_Set_Periodic_Advertising_Parameters_
---------------------------------------

**API usage:** 
``engine.send("LE_Set_Periodic_Advertising_Parameters", Advertising_Handle=0xXx,Periodic_Advertising_Interval_Min=0xXx,Periodic_Advertising_Interval_Max=0xXx,Periodic_Advertising_Properties=0xXx)``

**CLI usage:**
``blengine send LE_Set_Periodic_Advertising_Parameters --Advertising_Handle=0xXx --Periodic_Advertising_Interval_Min=0xXx --Periodic_Advertising_Interval_Max=0xXx --Periodic_Advertising_Properties=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x203e

The HCI_LE_Set_Periodic_Advertising_Parameters command is used by the
  |  Host to set the parameters for periodic advertising.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3e20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "", "1", "<B", "|  0xXX = Used to identify a periodic advertising train
  |  Range: 0x00 to 0xEF"
	"**Periodic_Advertising_Interval_Min**", "", "2", "<H", "|  N = 0xXXXX Minimum advertising interval for periodic advertising.
  |  Range: 0x0006 to 0xFFFF
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 81.91875 s"
	"**Periodic_Advertising_Interval_Max**", "", "2", "<H", "|  N = 0xXXXX Maximum advertising interval for periodic advertising.
  |  Range: 0x0006 to 0xFFFF
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 81.91875 s"
	"**Periodic_Advertising_Properties**", "", "2", "<H", "|  6 bit = Include TxPower in the advertising PDU
  |  All other bits Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Periodic_Advertising_Parameters_v2:


LE_Set_Periodic_Advertising_Parameters_v2_
------------------------------------------

**API usage:** 
``engine.send("LE_Set_Periodic_Advertising_Parameters_v2", Advertising_Handle=0xXx,Periodic_Advertising_Interval_Min=0xXx,Periodic_Advertising_Interval_Max=0xXx,Periodic_Advertising_Properties=0xXx,Num_Subevents=0xXx,Subevent_Interval=0xXx,Response_Slot_Delay=0xXx,Response_Slot_Spacing=0xXx,Num_Response_Slots=0xXx)``

**CLI usage:**
``blengine send LE_Set_Periodic_Advertising_Parameters_v2 --Advertising_Handle=0xXx --Periodic_Advertising_Interval_Min=0xXx --Periodic_Advertising_Interval_Max=0xXx --Periodic_Advertising_Properties=0xXx --Num_Subevents=0xXx --Subevent_Interval=0xXx --Response_Slot_Delay=0xXx --Response_Slot_Spacing=0xXx --Num_Response_Slots=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2086

The HCI_LE_Set_Periodic_Advertising_Parameters command is used by the
  |  Host to set the parameters for periodic advertising.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x8620", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "", "1", "<B", "|  0xXX = Used to identify a periodic advertising train
  |  Range: 0x00 to 0xEF"
	"**Periodic_Advertising_Interval_Min**", "", "2", "<H", "|  N = 0xXXXX Minimum advertising interval for periodic advertising.
  |  Range: 0x0006 to 0xFFFF
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 81.91875 s"
	"**Periodic_Advertising_Interval_Max**", "", "2", "<H", "|  N = 0xXXXX Maximum advertising interval for periodic advertising.
  |  Range: 0x0006 to 0xFFFF
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 81.91875 s"
	"**Periodic_Advertising_Properties**", "", "2", "<H", "|  6 bit = Include TxPower in the advertising PDU
  |  All other bits Reserved for future use"
	"**Num_Subevents**", "", "1", "<B", "|  0x00 = Number of subevents
  |  Range: 0x00 to 0x80"
	"**Subevent_Interval**", "", "1", "<B", "|  N=0xXX Interval between subevents
  |  Range: 0x06 to 0xFF
  |  Time = N  1.25 ms
  |  Time Range: 7.5 ms to 318.75 ms"
	"**Response_Slot_Delay**", "", "1", "<B", "|  0x00   No response slots
  |  N=0xXX Time between the advertising packet in a subevent and the first
  |  response slot.
  |  Range: 0x01 to 0xFE
  |  Time = N  1.25 ms
  |  Time Range: 1.25 ms to 317.5 ms"
	"**Response_Slot_Spacing**", "", "1", "<B", "|  0x00   No response slots
  |  N=0xXX Time between response slots.
  |  Range: 0x02 to 0xFF
  |  Time = N  0.125 ms
  |  Time Range: 0.25 ms to 31.875 ms"
	"**Num_Response_Slots**", "", "1", "<B", "|  0x00   No response slots
  |  0xXX   Number of subevent response slots.
  |  Range: 0x01 to 0xFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Advertising_Handle**", "1", "<B", "|  0xXX Used to identify a periodic advertising train
  |  Range: 0x00 to 0xEF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Periodic_Advertising_Data:


LE_Set_Periodic_Advertising_Data_
---------------------------------

**API usage:** 
``engine.send("LE_Set_Periodic_Advertising_Data", Advertising_Handle=0xXx,Operation=0xXx,Advertising_Data_Length=0xXx,Advertising_Data=0xXx)``

**CLI usage:**
``blengine send LE_Set_Periodic_Advertising_Data --Advertising_Handle=0xXx --Operation=0xXx --Advertising_Data_Length=0xXx --Advertising_Data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x203f

The HCI_LE_Set_Periodic_Advertising_Data command is used to set the data
  |  used in periodic advertising PDUs. This command may be issued at any time
  |  after the advertising set identified by the Advertising_Handle parameter has
  |  been configured for periodic advertising using the
  |  HCI_LE_Set_Periodic_Advertising_Parameters command (see Section
  |  7.8.61), regardless of whether periodic advertising in that set is enabled or
  |  disabled. If the advertising set has not been configured for periodic advertising,
  |  then the Controller shall return the error code Command Disallowed (0x0C).



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x3f20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "", "1", "<B", "|  0xXX = Used to identify an advertising set
  |  Range: 0x00 to 0xEF"
	"**Operation**", "", "1", "<B", "|  0x00 Intermediate fragment of fragmented periodic advertising data
  |  0x01 First fragment of fragmented periodic advertising data
  |  0x02 Last fragment of fragmented periodic advertising data
  |  0x03 Complete periodic advertising data
  |  All other values Reserved for future use"
	"**Advertising_Data_Length**", "", "1", "<B", "|  0 to 252 The number of octets in the Advertising Data parameter
  |  All other values Reserved for future use"
	"**Advertising_Data**", "", "0", "None", "|  Periodic advertising data formatted as defined in [Vol 3] Part C, Section 11.
  |  Note: This parameter has a variable length."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Periodic_Advertising_Enable:


LE_Set_Periodic_Advertising_Enable_
-----------------------------------

**API usage:** 
``engine.send("LE_Set_Periodic_Advertising_Enable", Enable=0xXx,Advertising_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Set_Periodic_Advertising_Enable --Enable=0xXx --Advertising_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2040

The HCI_LE_Set_Periodic_Advertising_Enable command is used to request
  |  the Controller to enable or disable the periodic advertising for the advertising
  |  set specified by the Advertising_Handle parameter (ordinary advertising is not
  |  affected).



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4020", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Enable**", "", "1", "<B", "|  0x00 Periodic advertising is disabled (default)
  |  0x01 Periodic advertising is enabled
  |  All other values Reserved for future use"
	"**Advertising_Handle**", "", "1", "<B", "|  0xXX Used to identify an advertising set
  |  Range: 0x00 to 0xEF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Extended_Scan_Parameters:


LE_Set_Extended_Scan_Parameters_
--------------------------------

**API usage:** 
``engine.send("LE_Set_Extended_Scan_Parameters", Own_Address_Type=0xXx,Scanning_Filter_Policy=0xXx,Scanning_PHYs=0xXx,Scan_Type=0xXx,Scan_Interval=0xXx,Scan_Window=0xXx)``

**CLI usage:**
``blengine send LE_Set_Extended_Scan_Parameters --Own_Address_Type=0xXx --Scanning_Filter_Policy=0xXx --Scanning_PHYs=0xXx --Scan_Type=0xXx --Scan_Interval=0xXx --Scan_Window=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2041

The HCI_LE_Set_Extended_Scan_Parameters command is used to set the
  |  extended scan parameters to be used on the advertising physical channels



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4120", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Own_Address_Type**", "", "1", "<B", "|  0x00 Public Device Address
  |  0x01 Random Device Address
  |  0x02 Controller generates the Resolvable Private Address based on the local
  |      IRK from the resolving list. If the resolving list contains no matching
  |      entry, then use the public address.
  |  0x03 Controller generates the Resolvable Private Address based on the local
  |      IRK from the resolving list. If the resolving list contains no matching
  |      entry, then use the random address from LE_Set_Random_Address.
  |  All other values Reserved for future use"
	"**Scanning_Filter_Policy**", "", "1", "<B", "|  0x00 Accept all advertising and scan response PDUs except directed advertising
  |      PDUs not addressed to this device
  |  0x01 Accept only advertising and scan response PDUs from devices where
  |      the advertisers address is in the Filter Accept List. Directed advertising PDUs
  |      which are not addressed to this device shall be ignored.
  |  0x02 Accept all advertising and scan response PDUs except directed advertising
  |      PDUs where the identity address corresponding to TargetA does
  |      not address this device.
  |      Note: Directed advertising PDUs where the TargetA is a resolvable private
  |      address that cannot be resolved are also accepted.
  |  0x03 Accept all advertising and scan response PDUs except:
  |       advertising and scan response PDUs where the advertisers identity
  |      address is not in the Filter Accept List; and
  |       directed advertising PDUs where the identity address corresponding
  |      to TargetA does not address this device.
  |      Note: Directed advertising PDUs where TargetA is a resolvable private
  |      address that cannot be resolved are also accepted.
  |  All other values Reserved for future use"
	"**Scanning_PHYs**", "", "1", "<B", "|  bit 0 = Scan advertisements on the LE 1M PHY
  |  bit 2 = Scan advertisements on the LE Coded PHY
  |  All other bits Reserved for future use"
	"**Scan_Type**", "", "0", "None", "|  0x00 Passive Scanning. No scan request PDUs shall be sent.
  |  0x01 Active Scanning. Scan request PDUs may be sent.
  |  All other values Reserved for future use"
	"**Scan_Interval**", "", "0", "None", "|  N = 0xXXXX Time interval from when the Controller started its last scan until it
  |  begins the subsequent scan on the primary advertising physical channel.
  |  Range: 0x0004 to 0xFFFF
  |  Time = N * 0.625 ms
  |  Time Range: 2.5 ms to 40.959375 s"
	"**Scan_Window**", "", "0", "None", "|  N = 0xXXXX Duration of the scan on the primary advertising physical channel.
  |  Range: 0x0004 to 0xFFFF
  |  Time = N * 0.625 ms
  |  Time Range: 2.5 ms to 40.959375 s"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Extended_Scan_Enable:


LE_Set_Extended_Scan_Enable_
----------------------------

**API usage:** 
``engine.send("LE_Set_Extended_Scan_Enable", Enable=0xXx,Filter_Duplicates=0xXx,Duration=0xXx,Period=0xXx)``

**CLI usage:**
``blengine send LE_Set_Extended_Scan_Enable --Enable=0xXx --Filter_Duplicates=0xXx --Duration=0xXx --Period=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2042

The HCI_LE_Set_Extended_Scan_Enable command is used to enable or
  |  disable scanning.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4220", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Enable**", "", "1", "<B", "|  0x00 Scanning disabled
  |  0x01 Scanning enabled
  |  All other values Reserved for future use"
	"**Filter_Duplicates**", "", "1", "<B", "|  0x00 Duplicate filtering disabled
  |  0x01 Duplicate filtering enabled
  |  0x02 Duplicate filtering enabled, reset for each scan period
  |  All other values Reserved for future use"
	"**Duration**", "", "2", "<H", "|  0x0000 Scan continuously until explicitly disable
  |  N = 0xXXXX Scan duration
  |  Range: 0x0001 to 0xFFFF
  |  Time = N * 10 ms
  |  Time Range: 10 ms to 655.35 s"
	"**Period**", "", "2", "<H", "|  0x0000 Scan continuously
  |  N = 0xXXXX Time interval from when the Controller started its last Scan_Duration
  |  until it begins the subsequent Scan_Duration.
  |  Range: 0x0001 to 0xFFFF
  |  Time = N * 1.28 sec
  |  Time Range: 1.28 s to 83,884.8 s"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Extended_Create_Connection:


LE_Extended_Create_Connection_
------------------------------

**API usage:** 
``engine.send("LE_Extended_Create_Connection", Initiator_Filter_Policy=0xXx,Own_Address_Type=0xXx,Peer_Address_Type=0xXx,Peer_Address=0xXx,Initiating_PHYs=0xXx,Scan_Interval=0xXx,Scan_Window=0xXx,Connection_Interval_Min=0xXx,Connection_Interval_Max=0xXx,Max_Latency=0xXx,Supervision_Timeout=0xXx,Min_CE_Length=0xXx,Max_CE_Length=0xXx)``

**CLI usage:**
``blengine send LE_Extended_Create_Connection --Initiator_Filter_Policy=0xXx --Own_Address_Type=0xXx --Peer_Address_Type=0xXx --Peer_Address=0xXx --Initiating_PHYs=0xXx --Scan_Interval=0xXx --Scan_Window=0xXx --Connection_Interval_Min=0xXx --Connection_Interval_Max=0xXx --Max_Latency=0xXx --Supervision_Timeout=0xXx --Min_CE_Length=0xXx --Max_CE_Length=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2043

The HCI_LE_Extended_Create_Connection command is used to create an
  |  ACL connection, with the local device in the Central role, to a connectable
  |  advertiser. The command is also used to create an ACL connection between a
  |  periodic advertiser and a synchronized device.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4320", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Initiator_Filter_Policy**", "", "1", "<B", "|  0x00 Filter Accept List is not used to determine which advertiser to connect to.
  |      Peer_Address_Type and Peer_Address shall be used.
  |  0x01 Filter Accept List is used to determine which advertiser to connect to.
  |      Peer_Address_Type and Peer_Address shall be ignored.
  |  All other values Reserved for future use"
	"**Own_Address_Type**", "", "1", "<B", "|  0x00 Public Device Address
  |  0x01 Random Device Address
  |  0x02 Controller generates the Resolvable Private Address based on the local
  |      IRK from the resolving list. If the resolving list contains no matching
  |      entry, then use the public address.
  |  0x03 Controller generates the Resolvable Private Address based on the local
  |      IRK from the resolving list. If the resolving list contains no matching
  |      entry, then use the random address from the most recent successful
  |      HCI_LE_Set_Random_Address command.
  |  All other values Reserved for future use"
	"**Peer_Address_Type**", "", "1", "<B", "|  0x00 Public Device Address or Public Identity Address
  |  0x01 Random Device Address or Random (static) Identity Address
  |  All other values Reserved for future use"
	"**Peer_Address**", "", "6", "mac", "|  0xXXXXXXXXXXXX = Public Device Address, Random Device Address, Public Identity
  |      Address, or Random (static) Identity Address of the device to be connected."
	"**Initiating_PHYs**", "", "1", "<B", "|  bit 0 Scan connectable advertisements on the LE 1M PHY. Connection
  |      parameters for the LE 1M PHY are provided.
  |  bit 1 Connection parameters for the LE 2M PHY are provided.
  |  bit 2 Scan connectable advertisements on the LE Coded PHY. Connection
  |      parameters for the LE Coded PHY are provided.
  |  All other bits Reserved for future use"
	"**Scan_Interval**", "", "2", "<H", "|  N = 0xXXXX Time interval from when the Controller started its last scan until it
  |  begins the subsequent scan on the primary advertising physical channel.
  |  Range: 0x0004 to 0xFFFF
  |  Time = N * 0.625 ms
  |  Time Range: 2.5 ms to 40.959375 s"
	"**Scan_Window**", "", "2", "<H", "|  N = 0xXXXX Duration of the scan on the primary advertising physical channel.
  |  Range: 0x0004 to 0xFFFF
  |  Time = N * 0.625 ms
  |  Time Range: 2.5 ms to 40.959375 s"
	"**Connection_Interval_Min**", "", "2", "<H", "|  N = 0xXXXX Minimum value for the connection interval. This shall be less
  |  than or equal to Connection_Interval_Max[i].
  |  Range: 0x0006 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 4 s
  |  All other values Reserved for future use"
	"**Connection_Interval_Max**", "", "2", "<H", "|  N = 0xXXXX Maximum value for the connection interval. This shall be greater than or
  |  equal to Connection_Interval_Min[i].
  |  Range: 0x0006 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 4 s
  |  All other values Reserved for future use"
	"**Max_Latency**", "", "2", "<H", "|  0xXXXX Maximum Peripheral latency for the connection in number of connection events.
  |      Range: 0x0000 to 0x01F3
  |  All other values Reserved for future use"
	"**Supervision_Timeout**", "", "2", "<H", "|  N = 0xXXXX Supervision timeout for the LE Link. (See [Vol 6] Part B, Section 4.5.2)
  |  Range: 0x000A to 0x0C80
  |  Time = N * 10 ms
  |  Time Range: 100 ms to 32 s
  |  All other values Reserved for future use"
	"**Min_CE_Length**", "", "2", "<H", "|  N = 0xXXXX Informative parameter recommending the minimum length of connection
  |  event needed for this LE connection.
  |  Range: 0x0000 to 0xFFFF
  |  Time = N * 0.625 ms"
	"**Max_CE_Length**", "", "2", "<H", "|  N = 0xXXXX Informative parameter recommending the maximum length of connection
  |  event needed for this LE connection.
  |  Range: 0x0000 to 0xFFFF
  |  Time = N * 0.625 ms"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Extended_Create_Connection_v2:


LE_Extended_Create_Connection_v2_
---------------------------------

**API usage:** 
``engine.send("LE_Extended_Create_Connection_v2", Advertising_Handle=0xXx,Subevent=0xXx,Initiator_Filter_Policy=0xXx,Own_Address_Type=0xXx,Peer_Address_Type=0xXx,Peer_Address=0xXx,Initiating_PHYs=0xXx,Scan_Interval=0xXx,Scan_Window=0xXx,Connection_Interval_Min=0xXx,Connection_Interval_Max=0xXx,Max_Latency=0xXx,Supervision_Timeout=0xXx,Min_CE_Length=0xXx,Max_CE_Length=0xXx)``

**CLI usage:**
``blengine send LE_Extended_Create_Connection_v2 --Advertising_Handle=0xXx --Subevent=0xXx --Initiator_Filter_Policy=0xXx --Own_Address_Type=0xXx --Peer_Address_Type=0xXx --Peer_Address=0xXx --Initiating_PHYs=0xXx --Scan_Interval=0xXx --Scan_Window=0xXx --Connection_Interval_Min=0xXx --Connection_Interval_Max=0xXx --Max_Latency=0xXx --Supervision_Timeout=0xXx --Min_CE_Length=0xXx --Max_CE_Length=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2085

The HCI_LE_Extended_Create_Connection command is used to create an
  |  ACL connection, with the local device in the Central role, to a connectable
  |  advertiser. The command is also used to create an ACL connection between a
  |  periodic advertiser and a synchronized device.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x8520", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "", "1", "<B", "|  0xXX Advertising_Handle identifying the periodic advertising train
  |  Range: 0x00 to 0xEF or 0xFF"
	"**Subevent**", "", "1", "<B", "|  0xXX Subevent where the connection request is to be sent.
  |  Range: 0x00 to 0x7F or 0xFF"
	"**Initiator_Filter_Policy**", "", "1", "<B", "|  0x00 Filter Accept List is not used to determine which advertiser to connect to.
  |      Peer_Address_Type and Peer_Address shall be used.
  |  0x01 Filter Accept List is used to determine which advertiser to connect to.
  |      Peer_Address_Type and Peer_Address shall be ignored.
  |  All other values Reserved for future use"
	"**Own_Address_Type**", "", "1", "<B", "|  0x00 Public Device Address
  |  0x01 Random Device Address
  |  0x02 Controller generates the Resolvable Private Address based on the local
  |      IRK from the resolving list. If the resolving list contains no matching
  |      entry, then use the public address.
  |  0x03 Controller generates the Resolvable Private Address based on the local
  |      IRK from the resolving list. If the resolving list contains no matching
  |      entry, then use the random address from the most recent successful
  |      HCI_LE_Set_Random_Address command.
  |  All other values Reserved for future use"
	"**Peer_Address_Type**", "", "1", "<B", "|  0x00 Public Device Address or Public Identity Address
  |  0x01 Random Device Address or Random (static) Identity Address
  |  All other values Reserved for future use"
	"**Peer_Address**", "", "6", "mac", "|  0xXXXXXXXXXXXX = Public Device Address, Random Device Address, Public Identity
  |      Address, or Random (static) Identity Address of the device to be connected."
	"**Initiating_PHYs**", "", "1", "<B", "|  bit 0 Scan connectable advertisements on the LE 1M PHY. Connection
  |      parameters for the LE 1M PHY are provided.
  |  bit 1 Connection parameters for the LE 2M PHY are provided.
  |  bit 2 Scan connectable advertisements on the LE Coded PHY. Connection
  |      parameters for the LE Coded PHY are provided.
  |  All other bits Reserved for future use"
	"**Scan_Interval**", "", "2", "<H", "|  N = 0xXXXX Time interval from when the Controller started its last scan until it
  |  begins the subsequent scan on the primary advertising physical channel.
  |  Range: 0x0004 to 0xFFFF
  |  Time = N * 0.625 ms
  |  Time Range: 2.5 ms to 40.959375 s"
	"**Scan_Window**", "", "2", "<H", "|  N = 0xXXXX Duration of the scan on the primary advertising physical channel.
  |  Range: 0x0004 to 0xFFFF
  |  Time = N * 0.625 ms
  |  Time Range: 2.5 ms to 40.959375 s"
	"**Connection_Interval_Min**", "", "2", "<H", "|  N = 0xXXXX Minimum value for the connection interval. This shall be less
  |  than or equal to Connection_Interval_Max[i].
  |  Range: 0x0006 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 4 s
  |  All other values Reserved for future use"
	"**Connection_Interval_Max**", "", "2", "<H", "|  N = 0xXXXX Maximum value for the connection interval. This shall be greater than or
  |  equal to Connection_Interval_Min[i].
  |  Range: 0x0006 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 7.5 ms to 4 s
  |  All other values Reserved for future use"
	"**Max_Latency**", "", "2", "<H", "|  0xXXXX Maximum Peripheral latency for the connection in number of connection events.
  |      Range: 0x0000 to 0x01F3
  |  All other values Reserved for future use"
	"**Supervision_Timeout**", "", "2", "<H", "|  N = 0xXXXX Supervision timeout for the LE Link. (See [Vol 6] Part B, Section 4.5.2)
  |  Range: 0x000A to 0x0C80
  |  Time = N * 10 ms
  |  Time Range: 100 ms to 32 s
  |  All other values Reserved for future use"
	"**Min_CE_Length**", "", "2", "<H", "|  N = 0xXXXX Informative parameter recommending the minimum length of connection
  |  event needed for this LE connection.
  |  Range: 0x0000 to 0xFFFF
  |  Time = N * 0.625 ms"
	"**Max_CE_Length**", "", "2", "<H", "|  N = 0xXXXX Informative parameter recommending the maximum length of connection
  |  event needed for this LE connection.
  |  Range: 0x0000 to 0xFFFF
  |  Time = N * 0.625 ms"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Periodic_Advertising_Create_Sync:


LE_Periodic_Advertising_Create_Sync_
------------------------------------

**API usage:** 
``engine.send("LE_Periodic_Advertising_Create_Sync", Options=0xXx,Advertising_SID=0xXx,Advertiser_Address_Type=0xXx,Advertiser_Address=0xXx,Skip=0xXx,Sync_Timeout=0xXx,Sync_CTE_Type=0xXx)``

**CLI usage:**
``blengine send LE_Periodic_Advertising_Create_Sync --Options=0xXx --Advertising_SID=0xXx --Advertiser_Address_Type=0xXx --Advertiser_Address=0xXx --Skip=0xXx --Sync_Timeout=0xXx --Sync_CTE_Type=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2044

The HCI_LE_Periodic_Advertising_Create_Sync command is used to
  |  synchronize with a periodic advertising train from an advertiser and begin
  |  receiving periodic advertising packets.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4420", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Options**", "", "1", "<B", "|  bit 0   0: Use the Advertising_SID, Advertisier_Address_Type, and Advertiser_
  |          Address parameters to determine which advertiser to listen to.
  |      1: Use the Periodic Advertiser List to determine which advertiser to listen
  |          to.
  |  bit 1   0: Reporting initially enabled
  |      1: Reporting initially disabled
  |  All other bits Reserved for future use"
	"**Advertising_SID**", "", "1", "<B", "|  0x00 to 0x0F Advertising SID subfield in the ADI field used to identify the Periodic
  |      Advertising
  |  All other values Reserved for future use"
	"**Advertiser_Address_Type**", "", "1", "<B", "|  0x00 Public Device Address
  |  0x01 Random Device Address
  |  All other values Reserved for future use"
	"**Advertiser_Address**", "", "6", "mac", "|  0xXXXXXXXXXXXX Public Device Address, Random Device Address, Public Identity
  |      Address, or Random (static) Identity Address of the advertiser"
	"**Skip**", "", "2", "<H", "|  0xXXXX The maximum number of periodic advertising events that can be
  |  skipped after a successful receive
  |  Range: 0x0000 to 0x01F3"
	"**Sync_Timeout**", "", "2", "<H", "|  N = 0xXXXX Synchronization timeout for the periodic advertising train
  |  Range: 0x000A to 0x4000
  |  Time = N*10 ms
  |  Time Range: 100 ms to 163.84 s"
	"**Sync_CTE_Type**", "", "1", "<B", "|  bit 0 Do not sync to packets with an AoA Constant Tone Extension
  |  bit 1 Do not sync to packets with an AoD Constant Tone Extension with 1 s
  |      slots
  |  bit 2 Do not sync to packets with an AoD Constant Tone Extension with 2 s
  |      slots
  |  bit 3 Do not sync to packets with a type 3 Constant Tone Extension (currently
  |      reserved for future use)
  |  bit 4 Do not sync to packets without a Constant Tone Extension
  |  All other bits Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Periodic_Advertising_Create_Sync_Cancel:


LE_Periodic_Advertising_Create_Sync_Cancel_
-------------------------------------------

**API usage:** 
``engine.send("LE_Periodic_Advertising_Create_Sync_Cancel")``

**CLI usage:**
``blengine send LE_Periodic_Advertising_Create_Sync_Cancel``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2045

The HCI_LE_Periodic_Advertising_Create_Sync_Cancel command is used to
  |  cancel the HCI_LE_Periodic_Advertising_Create_Sync command while it is
  |  pending.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4520", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Periodic_Advertising_Terminate_Sync:


LE_Periodic_Advertising_Terminate_Sync_
---------------------------------------

**API usage:** 
``engine.send("LE_Periodic_Advertising_Terminate_Sync", Sync_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Periodic_Advertising_Terminate_Sync --Sync_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2046

The HCI_LE_Periodic_Advertising_Terminate_Sync command is used to stop
  |  reception of the periodic advertising train identified by the Sync_Handle
  |  parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4620", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Sync_Handle**", "", "2", "<H", "|  0xXXXX Sync_Handle identifying the periodic advertising train
  |  Range: 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Add_Device_To_Periodic_Advertiser_List:


LE_Add_Device_To_Periodic_Advertiser_List_
------------------------------------------

**API usage:** 
``engine.send("LE_Add_Device_To_Periodic_Advertiser_List", Advertiser_Address_Type=0xXx,Advertiser_Address=0xXx,Advertising_SID=0xXx)``

**CLI usage:**
``blengine send LE_Add_Device_To_Periodic_Advertiser_List --Advertiser_Address_Type=0xXx --Advertiser_Address=0xXx --Advertising_SID=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2047

The HCI_LE_Add_Device_To_Periodic_Advertiser_List command is used to
  |  add an entry, consisting of a single device address and SID, to the Periodic
  |  Advertiser list stored in the Controller. Any additions to the Periodic Advertiser
  |  list take effect immediately. If the entry is already on the list, the Controller shall
  |  return the error code Invalid HCI Command Parameters (0x12).



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4720", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertiser_Address_Type**", "", "1", "<B", "|  0x00 Public Device Address or Public Identity Address
  |  0x01 Random Device Address or Random (static) Identity Address
  |  All other values Reserved for future use"
	"**Advertiser_Address**", "", "6", "mac", "|  0xXXXXXXXXXXXX Public Device Address, Random Device Address, Public Identity
  |      Address, or Random (static) Identity Address of the advertiser"
	"**Advertising_SID**", "", "1", "<B", "|  0x00 to 0x0F Advertising SID subfield in the ADI field used to identify the Periodic
  |      Advertising
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Remove_Device_From_Periodic_Advertiser_List:


LE_Remove_Device_From_Periodic_Advertiser_List_
-----------------------------------------------

**API usage:** 
``engine.send("LE_Remove_Device_From_Periodic_Advertiser_List", Advertiser_Address_Type=0xXx,Advertiser_Address=0xXx,Advertising_SID=0xXx)``

**CLI usage:**
``blengine send LE_Remove_Device_From_Periodic_Advertiser_List --Advertiser_Address_Type=0xXx --Advertiser_Address=0xXx --Advertising_SID=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2048

The HCI_LE_Remove_Device_From_Periodic_Advertiser_List command is
  |  used to remove one entry from the list of Periodic Advertisers stored in the
  |  Controller. Removals from the Periodic Advertisers List take effect immediately.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4820", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertiser_Address_Type**", "", "1", "<B", "|  0x00 Public Device Address or Public Identity Address
  |  0x01 Random Device Address or Random (static) Identity Address
  |  All other values Reserved for future use"
	"**Advertiser_Address**", "", "6", "mac", "|  0xXXXXXXXXXXXX Public Device Address, Random Device Address, Public Identity
  |      Address, or Random (static) Identity Address of the advertiser"
	"**Advertising_SID**", "", "1", "<B", "|  0x00 to 0x0F Advertising SID subfield in the ADI field used to identify the Periodic
  |      Advertising
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Clear_Periodic_Advertiser_List:


LE_Clear_Periodic_Advertiser_List_
----------------------------------

**API usage:** 
``engine.send("LE_Clear_Periodic_Advertiser_List")``

**CLI usage:**
``blengine send LE_Clear_Periodic_Advertiser_List``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2049

The HCI_LE_Clear_Periodic_Advertiser_List command is used to remove all
  |  entries from the list of Periodic Advertisers in the Controller.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4920", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Periodic_Advertiser_List_Size:


LE_Read_Periodic_Advertiser_List_Size_
--------------------------------------

**API usage:** 
``engine.send("LE_Read_Periodic_Advertiser_List_Size")``

**CLI usage:**
``blengine send LE_Read_Periodic_Advertiser_List_Size``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x204a

The HCI_LE_Periodic_Advertising_Terminate_Sync command is used to stop
  |  reception of the periodic advertising train identified by the Sync_Handle
  |  parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4a20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Periodic_Advertiser_List_Size**", "1", "<B", "|  0x01 to 0xFF Total number of Periodic Advertiser list entries that can be stored in the
  |      Controller
  |  0x00 Reserved for future use"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Transmit_Power:


LE_Read_Transmit_Power_
-----------------------

**API usage:** 
``engine.send("LE_Read_Transmit_Power")``

**CLI usage:**
``blengine send LE_Read_Transmit_Power``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x204b

The HCI_LE_Read_Transmit_Power command is used to read the minimum
  |  and maximum transmit powers supported by the Controller across all
  |  supported PHYs.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4b20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Min_TX_Power**", "1", "rssi", "|  0xXX Range: -127 to +20
  |  Units: dBm"
	"**Max_TX_Power**", "1", "rssi", "|  0xXX Range: -127 to +20
  |  Units: dBm"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_RF_Path_Compensation:


LE_Read_RF_Path_Compensation_
-----------------------------

**API usage:** 
``engine.send("LE_Read_RF_Path_Compensation")``

**CLI usage:**
``blengine send LE_Read_RF_Path_Compensation``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x204c

The HCI_LE_Read_RF_Path_Compensation command is used to read the RF
  |  Path Compensation Values parameter used in the Tx Power Level and RSSI
  |  calculation.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4c20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**RF_TX_Path_Compensation_Value**", "1", "<B", "|  0xXXXX Range: -128.0 dB (0xFB00) to 128.0 dB (0x0500)
  |  Units: 0.1 dB"
	"**RF_RX_Path_Compensation_Value**", "1", "<B", "|  0xXXXX Range: -128.0 dB (0xFB00) to 128.0 dB (0x0500)
  |  Units: 0.1 dB"

.. raw:: html
    
    <hr>

.. _pkt-LE_Write_RF_Path_Compensation:


LE_Write_RF_Path_Compensation_
------------------------------

**API usage:** 
``engine.send("LE_Write_RF_Path_Compensation", RF_TX_Path_Compensation_Value=0xXx,RF_RX_Path_Compensation_Value=0xXx)``

**CLI usage:**
``blengine send LE_Write_RF_Path_Compensation --RF_TX_Path_Compensation_Value=0xXx --RF_RX_Path_Compensation_Value=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x204d

The HCI_LE_Write_RF_Path_Compensation command is used to indicate the
  |  RF path gain or loss between the RF transceiver and the antenna contributed
  |  by intermediate components. A positive value means a net RF path gain and a
  |  negative value means a net RF path loss. The RF Tx Path Compensation
  |  Value parameter shall be used by the Controller to calculate radiative Tx Power
  |  Level used in HCI commands, HCI events, Advertising physical channel PDUs,
  |  and Link Layer Control PDUs using the following equation:
  |  Radiative Tx Power Level = Tx Power Level at RF transceiver output + RF Tx
  |  Path Compensation Value



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4d20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**RF_TX_Path_Compensation_Value**", "", "2", "<H", "|  0xXXXX Range: -128.0 dB (0xFB00) to 128.0 dB (0x0500)
  |  Units: 0.1 dB"
	"**RF_RX_Path_Compensation_Value**", "", "2", "<H", "|  0xXXXX Range: -128.0 dB (0xFB00) to 128.0 dB (0x0500)
  |  Units: 0.1 dB"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Privacy_Mode:


LE_Set_Privacy_Mode_
--------------------

**API usage:** 
``engine.send("LE_Set_Privacy_Mode", Peer_Identity_Address_Type=0xXx,Peer_Identity_Address=0xXx,Privacy_Mode=0xXx)``

**CLI usage:**
``blengine send LE_Set_Privacy_Mode --Peer_Identity_Address_Type=0xXx --Peer_Identity_Address=0xXx --Privacy_Mode=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x204e

The HCI_LE_Set_Privacy_Mode command is used to allow the Host to specify
  |  the privacy mode to be used for a given entry on the resolving list. The effect of
  |  this setting is specified in [Vol 6] Part B, Section 4.7.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x4e20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Peer_Identity_Address_Type**", "", "1", "<B", "|  0x00 Public Identity Address
  |  0x01 Random (static) Identity Address
  |  All other values Reserved for future use"
	"**Peer_Identity_Address**", "", "6", "mac", "|  0xXXXXXXXXXXXX Public Identity Address or Random (static) Identity Address of the
  |      advertiser"
	"**Privacy_Mode**", "", "1", "<B", "|  0x00 Use Network Privacy Mode for this peer device (default)
  |  0x01 Use Device Privacy Mode for this peer device
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Connectionless_CTE_Transmit_Parameters:


LE_Set_Connectionless_CTE_Transmit_Parameters_
----------------------------------------------

**API usage:** 
``engine.send("LE_Set_Connectionless_CTE_Transmit_Parameters", Advertising_Handle=0xXx,CTE_Length=0xXx,CTE_Type=0xXx,CTE_Count=0xXx,Switching_Pattern_Length=0xXx,Antenna_IDs=0xXx)``

**CLI usage:**
``blengine send LE_Set_Connectionless_CTE_Transmit_Parameters --Advertising_Handle=0xXx --CTE_Length=0xXx --CTE_Type=0xXx --CTE_Count=0xXx --Switching_Pattern_Length=0xXx --Antenna_IDs=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2051

The HCI_LE_Set_Connectionless_CTE_Transmit_Parameters command is
  |  used to set the type, length, and antenna switching pattern for the transmission
  |  of Constant Tone Extensions in any periodic advertising on the advertising set
  |  identified by the Advertising_Handle parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5120", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "", "1", "<B", "|  0xXX Used to identify an advertising set
  |  Range: 0x00 to 0xEF"
	"**CTE_Length**", "", "1", "<B", "|  0x02 to 0x14 Constant Tone Extension length in 8 s units
  |  All other values Reserved for future use"
	"**CTE_Type**", "", "1", "<B", "|  0x00 AoA Constant Tone Extension
  |  0x01 AoD Constant Tone Extension with 1 s slots
  |  0x02 AoD Constant Tone Extension with 2 s slots
  |  All other values Reserved for future use"
	"**CTE_Count**", "", "1", "<B", "|  0xXX The number of Constant Tone Extensions to transmit in each periodic
  |  advertising interval
  |  Range: 0x01 to 0x10"
	"**Switching_Pattern_Length**", "", "1", "<B", "|  0x02 to 0x4B The number of Antenna IDs in the pattern
  |  All other values Reserved for future use"
	"**Antenna_IDs**", "", "0", "None", "|  Size: Switching_Pattern_Length * 1 octet
  |  0xXX List of Antenna IDs in the pattern."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Connectionless_CTE_Transmit_Enable:


LE_Set_Connectionless_CTE_Transmit_Enable_
------------------------------------------

**API usage:** 
``engine.send("LE_Set_Connectionless_CTE_Transmit_Enable", Advertising_Handle=0xXx,CTE_Enable=0xXx)``

**CLI usage:**
``blengine send LE_Set_Connectionless_CTE_Transmit_Enable --Advertising_Handle=0xXx --CTE_Enable=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2052

The HCI_LE_Set_Connectionless_CTE_Transmit_Enable command is used to
  |  request that the Controller enables or disables the use of Constant Tone
  |  Extensions in any periodic advertising on the advertising set identified by
  |  Advertising_Handle.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5220", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "", "1", "<B", "|  0xXX Identifier for the advertising set in which Constant Tone Extension is
  |  being enabled or disabled
  |  Range: 0x00 to 0xEF"
	"**CTE_Enable**", "", "1", "<B", "|  0x00 Advertising with Constant Tone Extension is disabled (default)
  |  0x01 Advertising with Constant Tone Extension is enabled
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Connectionless_IQ_Sampling_Enable:


LE_Set_Connectionless_IQ_Sampling_Enable_
-----------------------------------------

**API usage:** 
``engine.send("LE_Set_Connectionless_IQ_Sampling_Enable", Sync_Handle=0xXx,Sampling_Enable=0xXx,Slot_Durations=0xXx,Max_Sampled_CTEs=0xXx,Switching_Pattern_Length=0xXx,Antenna_IDs=0xXx)``

**CLI usage:**
``blengine send LE_Set_Connectionless_IQ_Sampling_Enable --Sync_Handle=0xXx --Sampling_Enable=0xXx --Slot_Durations=0xXx --Max_Sampled_CTEs=0xXx --Switching_Pattern_Length=0xXx --Antenna_IDs=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2053

The HCI_LE_Set_Connectionless_IQ_Sampling_Enable command is used to
  |  request that the Controller enables or disables capturing IQ samples from the
  |  Constant Tone Extension of periodic advertising packets in the periodic
  |  advertising train identified by the Sync_Handle parameter. If that periodic
  |  advertising train does not exist, then the Controller shall return the error code
  |  Unknown Advertising Identifier (0x42).



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5320", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Sync_Handle**", "", "2", "<H", "|  0xXXXX Sync_Handle identifying the periodic advertising train.
  |  Range: 0x0000 to 0x0EFF"
	"**Sampling_Enable**", "", "1", "<B", "|  0x00 Connectionless IQ sampling is disabled (default)
  |  0x01 Connectionless IQ sampling is enabled
  |  All other values Reserved for future use"
	"**Slot_Durations**", "", "1", "<B", "|  0x01 Switching and sampling slots are 1 s each
  |  0x02 Switching and sampling slots are 2 s each
  |  All other values Reserved for future use"
	"**Max_Sampled_CTEs**", "", "1", "<B", "|  0x00 Sample and report all available Constant Tone Extensions
  |  0xXX The maximum number of Constant Tone Extensions to sample and
  |      report in each periodic advertising interval
  |      Range: 0x01 to 0x10"
	"**Switching_Pattern_Length**", "", "1", "<B", "|  0x02 to 0x4B The number of Antenna IDs in the pattern
  |  All other values Reserved for future use"
	"**Antenna_IDs**", "", "0", "None", "|  Size: Switching_Pattern_Length  1 octet
  |  0xXX List of Antenna IDs in the pattern."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Sync_Handle**", "2", "<H", "|  0xXXXX Sync_Handle identifying the periodic advertising.
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Connection_CTE_Receive_Parameters:


LE_Set_Connection_CTE_Receive_Parameters_
-----------------------------------------

**API usage:** 
``engine.send("LE_Set_Connection_CTE_Receive_Parameters", Connection_Handle=0xXx,Sampling_Enable=0xXx,Slot_Durations=0xXx,Switching_Pattern_Length=0xXx,Antenna_IDs=0xXx)``

**CLI usage:**
``blengine send LE_Set_Connection_CTE_Receive_Parameters --Connection_Handle=0xXx --Sampling_Enable=0xXx --Slot_Durations=0xXx --Switching_Pattern_Length=0xXx --Antenna_IDs=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2054

The HCI_LE_Set_Connection_CTE_Receive_Parameters command is used to
  |  enable or disable sampling received Constant Tone Extension fields on the
  |  connection identified by the Connection_Handle parameter and to set the
  |  antenna switching pattern and switching and sampling slot durations to be
  |  used.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5420", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"
	"**Sampling_Enable**", "", "1", "<B", "|  0x00 Connection IQ sampling is disabled (default)
  |  0x01 Connection IQ sampling is enabled
  |  All other values Reserved for future use"
	"**Slot_Durations**", "", "1", "<B", "|  0x01 Switching and sampling slots are 1 s each
  |  0x02 Switching and sampling slots are 2 s each
  |  All other values Reserved for future use"
	"**Switching_Pattern_Length**", "", "1", "<B", "|  0x02 to 0x4B The number of Antenna IDs in the pattern
  |  All other values Reserved for future use"
	"**Antenna_IDs**", "", "0", "None", "|  Size: Switching_Pattern_Length  1 octet
  |  0xXX List of Antenna IDs in the pattern."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Connection_CTE_Transmit_Parameters:


LE_Set_Connection_CTE_Transmit_Parameters_
------------------------------------------

**API usage:** 
``engine.send("LE_Set_Connection_CTE_Transmit_Parameters", Connection_Handle=0xXx,CTE_Types=0xXx,Switching_Pattern_Length=0xXx,Antenna_IDs=0xXx)``

**CLI usage:**
``blengine send LE_Set_Connection_CTE_Transmit_Parameters --Connection_Handle=0xXx --CTE_Types=0xXx --Switching_Pattern_Length=0xXx --Antenna_IDs=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2055

The HCI_LE_Set_Connection_CTE_Transmit_Parameters command is used
  |  to set the antenna switching pattern and permitted Constant Tone Extension
  |  types used for transmitting Constant Tone Extensions requested by the peer
  |  device on the connection identified by the Connection_Handle parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5520", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"
	"**CTE_Types**", "", "1", "<B", "|  bit 0 Allow AoA Constant Tone Extension Response
  |  bit 1 Allow AoD Constant Tone Extension Response with 1 s slots
  |  bit 2 Allow AoD Constant Tone Extension Response with 2 s slots
  |  All other values Reserved for future use"
	"**Switching_Pattern_Length**", "", "1", "<B", "|  0x02 to 0x4B The number of Antenna IDs in the pattern
  |  All other values Reserved for future use"
	"**Antenna_IDs**", "", "0", "None", "|  Size: Switching_Pattern_Length  1 octet
  |  0xXX List of Antenna IDs in the pattern."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Connection_CTE_Request_Enable:


LE_Connection_CTE_Request_Enable_
---------------------------------

**API usage:** 
``engine.send("LE_Connection_CTE_Request_Enable", Connection_Handle=0xXx,Enable=0xXx,CTE_Request_Interval=0xXx,Requested_CTE_Length=0xXx,Requested_CTE_Type=0xXx)``

**CLI usage:**
``blengine send LE_Connection_CTE_Request_Enable --Connection_Handle=0xXx --Enable=0xXx --CTE_Request_Interval=0xXx --Requested_CTE_Length=0xXx --Requested_CTE_Type=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2056

The HCI_LE_Connection_CTE_Request_Enable command is used to request
  |  the Controller to start or stop initiating the Constant Tone Extension Request
  |  procedure (see [Vol 6] Part B, Section 5.1.12) on a connection identified by the
  |  Connection_Handle parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5620", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"
	"**Enable**", "", "1", "<B", "|  0x00 Disable Constant Tone Extension Request for the connection (default)
  |  0x01 Enable Constant Tone Extension Request for the connection
  |  All other values Reserved for future use"
	"**CTE_Request_Interval**", "", "2", "<H", "|  0x0000 Initiate the Constant Tone Extension Request procedure once, at the
  |      earliest practical opportunity
  |  0x0001 to 0xFFFF
  |      Requested interval for initiating the Constant Tone Extension Request
  |      procedure in number of connection events."
	"**Requested_CTE_Length**", "", "1", "<B", "|  0x02 to 0x14 Minimum length of the Constant Tone Extension being requested in 8 s units
  |  All other values Reserved for future use"
	"**Requested_CTE_Type**", "", "1", "<B", "|  0x00 AoA Constant Tone Extension
  |  0x01 AoD Constant Tone Extension with 1 s slots
  |  0x02 AoD Constant Tone Extension with 2 s slots
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Connection_CTE_Response_Enable:


LE_Connection_CTE_Response_Enable_
----------------------------------

**API usage:** 
``engine.send("LE_Connection_CTE_Response_Enable", Connection_Handle=0xXx,Enable=0xXx)``

**CLI usage:**
``blengine send LE_Connection_CTE_Response_Enable --Connection_Handle=0xXx --Enable=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2057

The HCI_LE_Connection_CTE_Response_Enable command is used to
  |  request the Controller to respond to LL_CTE_REQ PDUs with LL_CTE_RSP
  |  PDUs on the specified connection.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5720", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"
	"**Enable**", "", "1", "<B", "|  0x00 Disable Constant Tone Extension Request for the connection (default)
  |  0x01 Enable Constant Tone Extension Request for the connection
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Antenna_Information:


LE_Read_Antenna_Information_
----------------------------

**API usage:** 
``engine.send("LE_Read_Antenna_Information")``

**CLI usage:**
``blengine send LE_Read_Antenna_Information``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2058

The HCI_LE_Read_Antenna_Information command allows the Host to read
  |  the switching rates, the sampling rates, the number of antennae, and the
  |  maximum length of a transmitted Constant Tone Extension supported by the
  |  Controller.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5820", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Supported_Switching_Sampling_Rates**", "1", "<B", "|  0 1 s switching supported for AoD transmission
  |  1 1 s sampling supported for AoD reception
  |  2 1 s switching and sampling supported for AoA reception
  |  3 to 7 Reserved for future use"
	"**Num_Antennae**", "1", "<B", "|  0x01 to 0x4B The number of antennae supported by the Controller
  |  All other values Reserved for future use"
	"**Max_Switching_Pattern_Length**", "1", "<B", "|  0x02 to 0x4B Maximum length of antenna switching pattern supported by the Controller
  |  All other values Reserved for future use"
	"**Max_CTE_Length**", "1", "<B", "|  0x02 to 0x14 Maximum length of a transmitted Constant Tone Extension supported in
  |      8 s units
  |  All other values Reserved for future use"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Periodic_Advertising_Receive_Enable:


LE_Set_Periodic_Advertising_Receive_Enable_
-------------------------------------------

**API usage:** 
``engine.send("LE_Set_Periodic_Advertising_Receive_Enable", Sync_Handle=0xXx,Enable=0xXx)``

**CLI usage:**
``blengine send LE_Set_Periodic_Advertising_Receive_Enable --Sync_Handle=0xXx --Enable=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2059

The HCI_LE_Set_Periodic_Advertising_Receive_Enable command will enable
  |  or disable reports for the periodic advertising train identified by the
  |  Sync_Handle parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5920", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Sync_Handle**", "", "2", "<H", "|  0xXXXX Sync_Handle identifying the periodic advertising train.
  |  Range: 0x0000 to 0x0EFF"
	"**Enable**", "", "1", "<B", "|  0x00 Reporting disabled
  |  0x01 Reporting enabled
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Periodic_Advertising_Sync_Transfer:


LE_Periodic_Advertising_Sync_Transfer_
--------------------------------------

**API usage:** 
``engine.send("LE_Periodic_Advertising_Sync_Transfer", Connection_Handle=0xXx,Service_Data=0xXx,Sync_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Periodic_Advertising_Sync_Transfer --Connection_Handle=0xXx --Service_Data=0xXx --Sync_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x205a

The HCI_LE_Periodic_Advertising_Sync_Transfer command is used to
  |  instruct the Controller to send synchronization information about the periodic
  |  advertising train identified by the Sync_Handle parameter to a connected
  |  device.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5a20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"
	"**Service_Data**", "", "2", "<H", "|  0xXXXX A value provided by the Host"
	"**Sync_Handle**", "", "2", "<H", "|  0xXXXX Sync_Handle identifying the periodic advertising train.
  |  Range: 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Periodic_Advertising_Set_Info_Transfer:


LE_Periodic_Advertising_Set_Info_Transfer_
------------------------------------------

**API usage:** 
``engine.send("LE_Periodic_Advertising_Set_Info_Transfer", Connection_Handle=0xXx,Service_Data=0xXx,Advertising_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Periodic_Advertising_Set_Info_Transfer --Connection_Handle=0xXx --Service_Data=0xXx --Advertising_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x205b

The HCI_LE_Periodic_Advertising_Set_Info_Transfer command is used to
  |  instruct the Controller to send synchronization information about the periodic
  |  advertising in an advertising set to a connected device.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5b20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"
	"**Service_Data**", "", "2", "<H", "|  0xXXXX A value provided by the Host"
	"**Advertising_Handle**", "", "2", "<H", "|  0x000xEF Used to identify an advertising set
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Periodic_Advertising_Sync_Transfer_Parameters:


LE_Set_Periodic_Advertising_Sync_Transfer_Parameters_
-----------------------------------------------------

**API usage:** 
``engine.send("LE_Set_Periodic_Advertising_Sync_Transfer_Parameters", Connection_Handle=0xXx,Mode=0xXx,Skip=0xXx,Sync_Timeout=0xXx,CTE_Type=0xXx)``

**CLI usage:**
``blengine send LE_Set_Periodic_Advertising_Sync_Transfer_Parameters --Connection_Handle=0xXx --Mode=0xXx --Skip=0xXx --Sync_Timeout=0xXx --CTE_Type=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x205c

The HCI_LE_Periodic_Advertising_Set_Info_Transfer command is used to
  |  instruct the Controller to send synchronization information about the periodic
  |  advertising in an advertising set to a connected device.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5c20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"
	"**Mode**", "", "1", "<B", "|  0x00 No attempt is made to synchronize to the periodic advertising and no
  |      HCI_LE_Periodic_Advertising_Sync_Transfer_Received event is sent
  |      to the Host.
  |  0x01 An HCI_LE_Periodic_Advertising_Sync_Transfer_Received event is
  |      sent to the Host. HCI_LE_Periodic_Advertising_Report events will be
  |      disabled.
  |  0x02 An HCI_LE_Periodic_Advertising_Sync_Transfer_Received event is
  |      sent to the Host. HCI_LE_Periodic_Advertising_Report events will be
  |      enabled.
  |  All other values Reserved for future use"
	"**Skip**", "", "2", "<H", "|  0xXXXX The number of periodic advertising packets that can be skipped after a
  |  successful receive
  |  Range: 0x0000 to 0x01F3"
	"**Sync_Timeout**", "", "2", "<H", "|  N=0xXXXX Synchronization timeout for the periodic advertising train
  |  Range: 0x000A to 0x4000
  |  Time = N*10 ms
  |  Time Range: 100 ms to 163.84 s"
	"**CTE_Type**", "", "1", "<B", "|  0 Do not sync to packets with an AoA Constant Tone Extension
  |  1 Do not sync to packets with an AoD Constant Tone Extension with 1 s
  |  slots
  |  2 Do not sync to packets with an AoD Constant Tone Extension with 2 s
  |  slots
  |  4 Do not sync to packets without a Constant Tone Extension
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Default_Periodic_Advertising_Sync_Transfer_Parameters:


LE_Set_Default_Periodic_Advertising_Sync_Transfer_Parameters_
-------------------------------------------------------------

**API usage:** 
``engine.send("LE_Set_Default_Periodic_Advertising_Sync_Transfer_Parameters", Mode=0xXx,Skip=0xXx,Sync_Timeout=0xXx,CTE_Type=0xXx)``

**CLI usage:**
``blengine send LE_Set_Default_Periodic_Advertising_Sync_Transfer_Parameters --Mode=0xXx --Skip=0xXx --Sync_Timeout=0xXx --CTE_Type=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x205d

The HCI_LE_Set_Default_Periodic_Advertising_Sync_Transfer_Parameters
  |  command is used to specify the initial value for the mode, skip, timeout, and
  |  Constant Tone Extension type (set by the
  |  HCI_LE_Set_Periodic_Advertising_Sync_Transfer_Parameters command;
  |  see Section 7.8.91) to be used for all subsequent connections over the LE
  |  transport.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5d20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Mode**", "", "1", "<B", "|  0x00 No attempt is made to synchronize to the periodic advertising and no
  |      HCI_LE_Periodic_Advertising_Sync_Transfer_Received event is sent
  |      to the Host.
  |  0x01 An HCI_LE_Periodic_Advertising_Sync_Transfer_Received event is
  |      sent to the Host. HCI_LE_Periodic_Advertising_Report events will be
  |      disabled.
  |  0x02 An HCI_LE_Periodic_Advertising_Sync_Transfer_Received event is
  |      sent to the Host. HCI_LE_Periodic_Advertising_Report events will be
  |      enabled.
  |  All other values Reserved for future use"
	"**Skip**", "", "2", "<H", "|  0xXXXX The number of periodic advertising packets that can be skipped after a
  |  successful receive
  |  Range: 0x0000 to 0x01F3"
	"**Sync_Timeout**", "", "2", "<H", "|  N=0xXXXX Synchronization timeout for the periodic advertising train
  |  Range: 0x000A to 0x4000
  |  Time = N*10 ms
  |  Time Range: 100 ms to 163.84 s"
	"**CTE_Type**", "", "1", "<B", "|  0 Do not sync to packets with an AoA Constant Tone Extension
  |  1 Do not sync to packets with an AoD Constant Tone Extension with 1 s
  |  slots
  |  2 Do not sync to packets with an AoD Constant Tone Extension with 2 s
  |  slots
  |  4 Do not sync to packets without a Constant Tone Extension
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Modify_Sleep_Clock_Accuracy:


LE_Modify_Sleep_Clock_Accuracy_
-------------------------------

**API usage:** 
``engine.send("LE_Modify_Sleep_Clock_Accuracy", Action=0xXx)``

**CLI usage:**
``blengine send LE_Modify_Sleep_Clock_Accuracy --Action=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x205f

This command is used to request that the Controller changes its sleep clock
  |  accuracy for testing purposes. It should not be used under other
  |  circumstances.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x5f20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Action**", "", "1", "<B", "|  0x00 Switch to a more accurate clock
  |  0x01 Switch to a less accurate clock
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_ISO_TX_Sync:


LE_Read_ISO_TX_Sync_
--------------------

**API usage:** 
``engine.send("LE_Read_ISO_TX_Sync", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Read_ISO_TX_Sync --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2061

This command is used to read the Time_Stamp and Time_Offset of a
  |  transmitted SDU identified by the Packet_Sequence_Number on a CIS or BIS
  |  identified by the Connection_Handle parameter on the central or peripheral.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6120", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXX Connection handle of the CIS or BIS
  |  Range: 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXX Connection handle of the CIS or BIS
  |  Range: 0x0000 to 0x0EFF"
	"**Packet_Sequence_Number**", "2", "<H", "|  0x0000 to 0xFFFF
  |      The packet sequence number of an SDU"
	"**Time_Stamp**", "4", "<L", "|  0x00000000 to 0xFFFFFFFF
  |      The time stamp, in microseconds, of the reference anchor point of a
  |      transmitted SDU."
	"**Time_Offset**", "3", "<3s", "|  0x000000 to 0xFFFFFF
  |      The time offset, in microseconds, that is associated with a transmitted
  |      SDU."

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_CIG_Parameters:


LE_Set_CIG_Parameters_
----------------------

**API usage:** 
``engine.send("LE_Set_CIG_Parameters")``

**CLI usage:**
``blengine send LE_Set_CIG_Parameters``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2062

The HCI_LE_Set_CIG_Parameters command is used by a centrals Host to
  |  set the parameters of one or more CISes that are associated with a CIG in the
  |  Controller. If none of the CISes in that CIG have been created, this command
  |  may also be used to modify or add CIS(s) to that CIG



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6220", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**CIG_ID**", "0x00", "1", "<B", "|  0x00 to 0xEF Used to identify the CIG.
  |  All other values Reserved for future use"
	"**SDU_Interval_C_To_P**", "0x204e", "3", "<3s", "|  0x0000FF to
  |  0x0FFFFF
  |  The interval, in microseconds, of periodic SDUs.
  |  All other values Reserved for future use"
	"**SDU_Interval_P_To_C**", "0x204e", "3", "<3s", "|  0x0000FF to
  |  0x0FFFFF
  |  The interval, in microseconds, of periodic SDUs.
  |  All other values Reserved for future use"
	"**Worst_Case_SCA**", "0x01", "1", "<B", "|  0x00 251 ppm to 500 ppm
  |  0x01 151 ppm to 250 ppm
  |  0x02 101 ppm to 150 ppm
  |  0x03 76 ppm to 100 ppm
  |  0x04 51 ppm to 75 ppm
  |  0x05 31 ppm to 50 ppm
  |  0x06 21 ppm to 30 ppm
  |  0x07 0 ppm to 20 ppm
  |  All other values Reserved for future use"
	"**Packing**", "0x00", "1", "<B", "|  0x00 Sequential
  |  0x01 Interleaved
  |  All other values Reserved for future use"
	"**Framing**", "0x00", "1", "<B", "|  0x00 Unframed
  |  0x01 Framed
  |  All other values Reserved for future use"
	"**Max_Transport_Latency_C_To_P**", "0x28", "2", "<H", "|  0x0005 to 0x0-FA0
  |      Maximum time, in milliseconds, for an SDU to be transported from the
  |      central Controller to peripheral Controller.
  |  All other values Reserved for future use"
	"**Max_Transport_Latency_P_To_C**", "0x28", "2", "<H", "|  0x0005 to 0x0-FA0
  |      Maximum time, in milliseconds, for an SDU to be transported from the
  |      peripheral Controller to central Controller.
  |  All other values Reserved for future use"
	"**CIS_Count**", "0x01", "1", "<B", "|  0x00 to 0x1F Total number of CISes in the CIG being added or modified.
  |  All other values Reserved for future use"
	"**CIS_ID**", "0x00", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0x00 to 0xEF Used to identify a CIS
  |  All other values Reserved for future use"
	"**Max_SDU_C_To_P**", "0x0a", "2", "<H", "|  Size: CIS_Count * 2 octets
  |  0x0000 to 0x0FFF
  |  Maximum size, in octets, of the payload from the centrals Host"
	"**Max_SDU_P_To_C**", "0x0a", "2", "<H", "|  Size: CIS_Count * 2 octets
  |  0x0000 to 0x0FFF
  |  Maximum size, in octets, of the payload from the peripherals Host"
	"**PHY_C_To_P**", "0x00", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0 The transmitter PHY of packets from the central is LE 1M
  |  1 The transmitter PHY of packets from the central is LE 2M
  |  2 The transmitter PHY of packets from the central is LE Coded
  |  All other bits Reserved for future use"
	"**PHY_P_To_C**", "0x00", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0 The transmitter PHY of packets from the peripheral is LE 1M
  |  1 The transmitter PHY of packets from the peripheral is LE 2M
  |  2 The transmitter PHY of packets from the peripheral is LE Coded
  |  All other bits Reserved for future use"
	"**RTN_C_To_P**", "0x03", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0x00 to 0x0F Maximum number of times every CIS Data PDU should be retransmitted
  |  from the central to peripheral
  |  All other values Reserved for future use"
	"**RTN_P_To_C**", "0x03", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0x00 to 0x0F Maximum number of times every CIS Data PDU should be retransmitted
  |  from the peripheral to central
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**CIG_ID**", "1", "<B", "|  0x00 to 0xEF Used to identify a CIG
  |  All other values Reserved for future use"
	"**CIS_Count**", "1", "<B", "|  0x00 to 0x10 Total number of CISes added or modified by this command
  |  All other values Reserved for future use"
	"**Connection_Handle**", "2", "<H", "|  Size: CIS_Count * 2 octets (12 bits meaningful)
  |  0xXXXX Connection handle of the CIS in the CIG.
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_CIG_Parameters_Test:


LE_Set_CIG_Parameters_Test_
---------------------------

**API usage:** 
``engine.send("LE_Set_CIG_Parameters_Test", CIG_ID=0xXx,SDU_Interval_C_To_P=0xXx,SDU_Interval_P_To_C=0xXx,FT_C_To_P=0xXx,FT_P_To_C=0xXx,ISO_Interval=0xXx,Worst_Case_SCA=0xXx,Packing=0xXx,Framing=0xXx,CIS_Count=0xXx,CIS_ID=0xXx,NSE=0xXx,Max_SDU_C_To_P=0xXx,Max_SDU_P_To_C=0xXx,Max_PDU_C_To_P=0xXx,Max_PDU_P_To_C=0xXx,PHY_C_To_P=0xXx,PHY_P_To_C=0xXx,BN_C_To_P=0xXx,BN_P_To_C=0xXx)``

**CLI usage:**
``blengine send LE_Set_CIG_Parameters_Test --CIG_ID=0xXx --SDU_Interval_C_To_P=0xXx --SDU_Interval_P_To_C=0xXx --FT_C_To_P=0xXx --FT_P_To_C=0xXx --ISO_Interval=0xXx --Worst_Case_SCA=0xXx --Packing=0xXx --Framing=0xXx --CIS_Count=0xXx --CIS_ID=0xXx --NSE=0xXx --Max_SDU_C_To_P=0xXx --Max_SDU_P_To_C=0xXx --Max_PDU_C_To_P=0xXx --Max_PDU_P_To_C=0xXx --PHY_C_To_P=0xXx --PHY_P_To_C=0xXx --BN_C_To_P=0xXx --BN_P_To_C=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2063

The HCI_LE_Set_CIG_Parameters_Test command should only be used for
  |  testing purposes.
  |  The command is used by a centrals Host to set the parameters of one or more
  |  CISes that are associated with a CIG in the Controller. If none of the CISes in
  |  that CIG have been created, this command may also be used to modify or add
  |  CIS(s) to that CIG.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6320", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**CIG_ID**", "", "1", "<B", "|  0x00 to 0xEF Used to identify the CIG.
  |  All other values Reserved for future use"
	"**SDU_Interval_C_To_P**", "", "3", "<3s", "|  0x0000FF to
  |  0x0FFFFF
  |  The interval, in microseconds, of periodic SDUs.
  |  All other values Reserved for future use"
	"**SDU_Interval_P_To_C**", "", "3", "<3s", "|  0x0000FF to
  |  0x0FFFFF
  |  The interval, in microseconds, of periodic SDUs.
  |  All other values Reserved for future use"
	"**FT_C_To_P**", "", "1", "<B", "|  0xXX The flush timeout in multiples of ISO_Interval for each payload sent
  |  from the central to peripheral.
  |  Range: 0x01 to 0xFF"
	"**FT_P_To_C**", "", "1", "<B", "|  0xXX The flush timeout in multiples of ISO_Interval for each payload sent
  |      from the peripheral to central.
  |      Range: 0x01 to 0xFF"
	"**ISO_Interval**", "", "2", "<H", "|  N = 0xXXXX Time between consecutive CIS anchor points.
  |  Range: 0x0004 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 5 ms to 4 s"
	"**Worst_Case_SCA**", "", "1", "<B", "|  0x00 251 ppm to 500 ppm
  |  0x01 151 ppm to 250 ppm
  |  0x02 101 ppm to 150 ppm
  |  0x03 76 ppm to 100 ppm
  |  0x04 51 ppm to 75 ppm
  |  0x05 31 ppm to 50 ppm
  |  0x06 21 ppm to 30 ppm
  |  0x07 0 ppm to 20 ppm
  |  All other values Reserved for future use"
	"**Packing**", "", "1", "<B", "|  0x00 Sequential
  |  0x01 Interleaved
  |  All other values Reserved for future use"
	"**Framing**", "", "1", "<B", "|  0x00 Unframed
  |  0x01 Framed
  |  All other values Reserved for future use"
	"**CIS_Count**", "", "1", "<B", "|  0x00 to 0x1F Total number of CISes in the CIG being added or modified.
  |  All other values Reserved for future use"
	"**CIS_ID**", "", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0x00 to 0xEF Used to identify a CIS
  |  All other values Reserved for future use"
	"**NSE**", "", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0x01 to 0x1F Maximum number of subevents in each CIS event
  |  All other values Reserved for future use"
	"**Max_SDU_C_To_P**", "", "2", "<H", "|  Size: CIS_Count * 2 octets
  |  0x0000 to 0x0FFF
  |  Maximum size, in octets, of the payload from the centrals Host"
	"**Max_SDU_P_To_C**", "", "2", "<H", "|  Size: CIS_Count * 2 octets
  |  0x0000 to 0x0FFF
  |  Maximum size, in octets, of the payload from the peripherals Host"
	"**Max_PDU_C_To_P**", "", "2", "<H", "|  Size: CIS_Count * 2 octets
  |  0x0000 to 0x00FB
  |  Maximum size, in octets, of the payload from central Link Layer to peripheral
  |  Link Layer.
  |  All other values Reserved for future use"
	"**Max_PDU_P_To_C**", "", "2", "<H", "|  Size: CIS_Count * 2 octets
  |  0x0000 to 0x00FB
  |  Maximum size, in octets, of the payload from peripheral Link Layer to central
  |  Link Layer.
  |  All other values Reserved for future use"
	"**PHY_C_To_P**", "", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0 The transmitter PHY of packets from the central is LE 1M
  |  1 The transmitter PHY of packets from the central is LE 2M
  |  2 The transmitter PHY of packets from the central is LE Coded
  |  All other bits Reserved for future use"
	"**PHY_P_To_C**", "", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0 The transmitter PHY of packets from the peripheral is LE 1M
  |  1 The transmitter PHY of packets from the peripheral is LE 2M
  |  2 The transmitter PHY of packets from the peripheral is LE Coded
  |  All other bits Reserved for future use"
	"**BN_C_To_P**", "", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0x00 to 0x0F Maximum number of times every CIS Data PDU should be retransmitted
  |  from the central to peripheral
  |  All other values Reserved for future use"
	"**BN_P_To_C**", "", "1", "<B", "|  Size: CIS_Count * 1 octet(s)
  |  0x00 to 0x0F Maximum number of times every CIS Data PDU should be retransmitted
  |  from the peripheral to central
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**CIG_ID**", "1", "<B", "|  0x00 to 0xEF Used to identify a CIG
  |  All other values Reserved for future use"
	"**CIS_Count**", "1", "<B", "|  0x00 to 0x10 Total number of CISes added or modified by this command
  |  All other values Reserved for future use"
	"**Connection_Handle**", "1", "<B", "|  Size: CIS_Count * 2 octets (12 bits meaningful)
  |  0xXXXX Connection handle of the CIS in the CIG.
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Create_CIS:


LE_Create_CIS_
--------------

**API usage:** 
``engine.send("LE_Create_CIS", CIS_Count=0xXx,CIS_Connection_Handle=0xXx,ACL_Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Create_CIS --CIS_Count=0xXx --CIS_Connection_Handle=0xXx --ACL_Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2064





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6420", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**CIS_Count**", "", "1", "<B", "|  0x01 to 0x1F Total number of CISes to be created.
  |  All other values Reserved for future use"
	"**CIS_Connection_Handle**", "", "2", "<H", "|  Size: CIS_Count * 2 octets (12 bits meaningful)
  |  0xXXXX List of connection handles of CISes
  |  Range: 0x0000 to 0x0EFF"
	"**ACL_Connection_Handle**", "", "2", "<H", "|  Size: CIS_Count * 2 octets (12 bits meaningful)
  |  0xXXXX List of connection handles of ACLs
  |  Range: 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Remove_CIG:


LE_Remove_CIG_
--------------

**API usage:** 
``engine.send("LE_Remove_CIG", CIG_ID=0xXx)``

**CLI usage:**
``blengine send LE_Remove_CIG --CIG_ID=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2065

The HCI_LE_Remove_CIG command is used by the centrals Host to remove
  |  all the CISes associated with the CIG identified by CIG_ID. This command
  |  shall not be issued when any CIS in the CIG has already been established or is
  |  pending establishment. An established CIS or pending establishment of CIS
  |  can be terminated using the HCI_Disconnect command.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6520", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**CIG_ID**", "", "1", "<B", "|  0x00 to 0xEF Identifier of a CIG
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**CIG_ID**", "1", "<B", "|  0x00 to 0xEF Identifier of a CIG
  |  All other values Reserved for future use"

.. raw:: html
    
    <hr>

.. _pkt-LE_Accept_CIS_Request:


LE_Accept_CIS_Request_
----------------------

**API usage:** 
``engine.send("LE_Accept_CIS_Request", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Accept_CIS_Request --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2066

The HCI_LE_Accept_CIS_Request command is used by the peripherals Host to
  |  inform the Controller to accept the request for the CIS that is identified by the
  |  Connection_Handle.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6620", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS
  |  Range: 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Reject_CIS_Request:


LE_Reject_CIS_Request_
----------------------

**API usage:** 
``engine.send("LE_Reject_CIS_Request", Connection_Handle=0xXx,Reason=0xXx)``

**CLI usage:**
``blengine send LE_Reject_CIS_Request --Connection_Handle=0xXx --Reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2067

The HCI_LE_Reject_CIS_Request command is used by the peripherals Host to
  |  inform the Controller to reject the request for the CIS that is identified by the
  |  Connection_Handle.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6720", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS to be rejected
  |  Range: 0x0000 to 0x0EFF"
	"**Reason**", "", "1", "<B", "|  0xXX Reason the CIS request was rejected. See [Vol 1] Part F, Controller
  |  Error Codes for a list of error codes and descriptions."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX The connection handle of the CIS to be rejected
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Create_BIG:


LE_Create_BIG_
--------------

**API usage:** 
``engine.send("LE_Create_BIG", BIG_Handle=0xXx,Advertising_Handle=0xXx,Num_BIS=0xXx,SDU_Interval=0xXx,Max_SDU=0xXx,Max_Transport_Latency=0xXx,RTN=0xXx,PHY=0xXx,Packing=0xXx,Framing=0xXx,Encryption=0xXx,Broadcast_Code=0xXx)``

**CLI usage:**
``blengine send LE_Create_BIG --BIG_Handle=0xXx --Advertising_Handle=0xXx --Num_BIS=0xXx --SDU_Interval=0xXx --Max_SDU=0xXx --Max_Transport_Latency=0xXx --RTN=0xXx --PHY=0xXx --Packing=0xXx --Framing=0xXx --Encryption=0xXx --Broadcast_Code=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2068

The HCI_LE_Create_BIG command is used to create a BIG with one or more
  |  BISes (see [Vol 6] Part B, Section 4.4.6). All BISes in a BIG have the same
  |  value for all parameters.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6820", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**BIG_Handle**", "", "1", "<B", "|  0x00 to 0xEF Used to identify the BIG.
  |  All other values Reserved for future use"
	"**Advertising_Handle**", "", "1", "<B", "|  0x00 to 0xEF Used to identify the periodic advertising train.
  |  All other values Reserved for future use"
	"**Num_BIS**", "", "1", "<B", "|  0x01 to 0x1F Total number of BISes in the BIG.
  |  All other values Reserved for future use"
	"**SDU_Interval**", "", "3", "<3s", "|  0x000100 to 0x0FFFFF
  |  The interval, in microseconds, of periodic SDUs.
  |  All other values Reserved for future use"
	"**Max_SDU**", "", "2", "<H", "|  0x0001 to 0x0FFF
  |  Maximum size of an SDU, in octets.
  |  All other values Reserved for future use"
	"**Max_Transport_Latency**", "", "2", "<H", "|  0x0000 to 0x0-FA0
  |  Maximum time, in milliseconds, for transmitting an SDU.
  |  All other values Reserved for future use"
	"**RTN**", "", "1", "<B", "|  0x00 to 0x0F The maximum number of times that every BIS Data PDU should be
  |  retransmitted.
  |  All other values Reserved for future use"
	"**PHY**", "", "1", "<B", "|  0 The transmitter PHY of packets is LE 1M.
  |  1 The transmitter PHY of packets is LE 2M.
  |  2 The transmitter PHY of packets is LE Coded.
  |  All other bits Reserved for future use"
	"**Packing**", "", "1", "<B", "|  0x00 Sequential
  |  0x01 Interleaved
  |  All other values Reserved for future use"
	"**Framing**", "", "1", "<B", "|  0x00 Unframed
  |  0x01 Framed
  |  All other values Reserved for future use"
	"**Encryption**", "", "1", "<B", "|  0x00 Unencrypted
  |  0x01 Encrypted
  |  All other values Reserved for future use"
	"**Broadcast_Code**", "", "16", "<16s", "|  0xXXXXXXXXXX
  |  XXXXXXXXXXX
  |  XXXXXXXXXXX
  |  The code used to derive the session key that is used to encrypt and
  |  decrypt BIS payloads."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Create_BIG_Test:


LE_Create_BIG_Test_
-------------------

**API usage:** 
``engine.send("LE_Create_BIG_Test", BIG_Handle=0xXx,Advertising_Handle=0xXx,Num_BIS=0xXx,SDU_Interval=0xXx,ISO_Interval=0xXx,NSE=0xXx,Max_SDU=0xXx,Max_PDU=0xXx,PHY=0xXx,Packing=0xXx,Framing=0xXx,BN=0xXx,IRC=0xXx,PTO=0xXx,Encryption=0xXx,Broadcast_Code=0xXx)``

**CLI usage:**
``blengine send LE_Create_BIG_Test --BIG_Handle=0xXx --Advertising_Handle=0xXx --Num_BIS=0xXx --SDU_Interval=0xXx --ISO_Interval=0xXx --NSE=0xXx --Max_SDU=0xXx --Max_PDU=0xXx --PHY=0xXx --Packing=0xXx --Framing=0xXx --BN=0xXx --IRC=0xXx --PTO=0xXx --Encryption=0xXx --Broadcast_Code=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2069

The HCI_LE_Create_BIG_Test command should only be used for testing
  |  purposes.
  |  The command is used to create one or more BISes of a BIG (see [Vol 6] Part B,
  |  Section 4.4.6). All BISes in the BIG have the same values for all parameters.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6920", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**BIG_Handle**", "", "1", "<B", "|  0x00 to 0xEF Used to identify the BIG.
  |  All other values Reserved for future use"
	"**Advertising_Handle**", "", "1", "<B", "|  0x00 to 0xEF Used to identify the periodic advertising train.
  |  All other values Reserved for future use"
	"**Num_BIS**", "", "1", "<B", "|  0x01 to 0x1F Total number of BISes in the BIG.
  |  All other values Reserved for future use"
	"**SDU_Interval**", "", "1", "<B", "|  0x000100 to 0x0FFFFF
  |  The interval, in microseconds, of periodic SDUs.
  |  All other values Reserved for future use"
	"**ISO_Interval**", "", "2", "<H", "|  N = 0xXXXX The time between consecutive BIG anchor points.
  |  Range: 0x0004 to 0x0C80
  |  Time = N * 1.25 ms
  |  Time Range: 5 ms to 4 s"
	"**NSE**", "", "1", "<B", "|  0x01 to 0x1F The total number of subevents in each interval of each BIS in the BIG.
  |  All other values Reserved for future use"
	"**Max_SDU**", "", "1", "<B", "|  0x0001 to 0x0FFF
  |  Maximum size of an SDU, in octets.
  |  All other values Reserved for future use"
	"**Max_PDU**", "", "2", "<H", "|  0x0001 to 0x00FB
  |  Maximum size, in octets, of payload
  |  All other values Reserved for future use"
	"**PHY**", "", "1", "<B", "|  0 The transmitter PHY of packets is LE 1M.
  |  1 The transmitter PHY of packets is LE 2M.
  |  2 The transmitter PHY of packets is LE Coded.
  |  All other bits Reserved for future use"
	"**Packing**", "", "1", "<B", "|  0x00 Sequential
  |  0x01 Interleaved
  |  All other values Reserved for future use"
	"**Framing**", "", "1", "<B", "|  0x00 Unframed
  |  0x01 Framed
  |  All other values Reserved for future use"
	"**BN**", "", "1", "<B", "|  0x01 to 0x07 The number of new payloads in each interval for each BIS.
  |  All other values Reserved for future use"
	"**IRC**", "", "1", "<B", "|  0x01 to 0x0F The number of times the scheduled payload(s) are transmitted in a
  |      given event.
  |  All other values Reserved for future use"
	"**PTO**", "", "1", "<B", "|  0x00 to 0x0F Offset used for pre-transmissions
  |  All other values Reserved for future use"
	"**Encryption**", "", "1", "<B", "|  0x00 Unencrypted
  |  0x01 Encrypted
  |  All other values Reserved for future use"
	"**Broadcast_Code**", "", "16", "<16s", "|  0xXXXXXXXXXX
  |  XXXXXXXXXXX
  |  XXXXXXXXXXX
  |  The code used to derive the session key that is used to encrypt and
  |  decrypt BIS payloads."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Terminate_BIG:


LE_Terminate_BIG_
-----------------

**API usage:** 
``engine.send("LE_Terminate_BIG", BIG_Handle=0xXx,Reason=0xXx)``

**CLI usage:**
``blengine send LE_Terminate_BIG --BIG_Handle=0xXx --Reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x206a

The HCI_LE_Terminate_BIG command is used to terminate a BIG identified by
  |  the BIG_Handle parameter. The command also terminates the transmission of
  |  all BISes of the BIG, destroys the associated connection handles of the BISes
  |  in the BIG and removes the data paths for all BISes in the BIG.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6a20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**BIG_Handle**", "", "1", "<B", "|  0x00 to 0xEF Used to identify the BIG.
  |  All other values Reserved for future use"
	"**Reason**", "", "1", "<B", "|  0xXX Reason the BIG is terminated. See [Vol 1] Part F, Controller Error
  |  Codes for a list of error codes and descriptions."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_BIG_Create_Sync:


LE_BIG_Create_Sync_
-------------------

**API usage:** 
``engine.send("LE_BIG_Create_Sync", BIG_Handle=0xXx,Sync_Handle=0xXx,Encryption=0xXx,Broadcast_Code=0xXx,MSE=0xXx,BIG_Sync_Timeout=0xXx,Num_BIS=0xXx,BIS=0xXx)``

**CLI usage:**
``blengine send LE_BIG_Create_Sync --BIG_Handle=0xXx --Sync_Handle=0xXx --Encryption=0xXx --Broadcast_Code=0xXx --MSE=0xXx --BIG_Sync_Timeout=0xXx --Num_BIS=0xXx --BIS=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x206b

The HCI_LE_BIG_Create_Sync command is used to synchronize to a BIG
  |  described in the periodic advertising train specified by the Sync_Handle
  |  parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6b20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**BIG_Handle**", "", "1", "<B", "|  0x00 to 0xEF Used to identify the BIG
  |  All other values Reserved for future use"
	"**Sync_Handle**", "", "2", "<H", "|  0xXXXX Identifier of the periodic advertising train
  |  Range: 0x0000 to 0x0EFF"
	"**Encryption**", "", "1", "<B", "|  0x00 Unencrypted
  |  0x01 Encrypted
  |  All other values Reserved for future use"
	"**Broadcast_Code**", "", "16", "<16s", "|  0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  |      128-bit code used for deriving the session key for decrypting payloads
  |  of BISes in the BIG."
	"**MSE**", "", "1", "<B", "|  0x00 The Controller can schedule reception of any number of subevents up
  |      to NSE.
  |  0x01 to 0x1F Maximum number of subevents that should be used to receive data
  |      payloads in each BIS event
  |  All other values Reserved for future use"
	"**BIG_Sync_Timeout**", "", "2", "<H", "|  N = 0xXXXX Synchronization timeout for the BIG
  |  Range: 0x000A to 0x4000
  |  Time = N*10 ms
  |  Time Range: 100 ms to 163.84 s"
	"**Num_BIS**", "", "1", "<B", "|  0x01 to 0x1F Total number of BISes to synchronize
  |  All other values Reserved for future use"
	"**BIS**", "", "0", "None", "|  Size: Num_BIS * 1 octet(s)
  |  0x01 to 0x1F List of indices of BISes
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_BIG_Terminate_Sync:


LE_BIG_Terminate_Sync_
----------------------

**API usage:** 
``engine.send("LE_BIG_Terminate_Sync", BIG_Handle=0xXx)``

**CLI usage:**
``blengine send LE_BIG_Terminate_Sync --BIG_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x206c

The HCI_LE_BIG_Terminate_Sync command is used to stop synchronizing or
  |  cancel the process of synchronizing to the BIG identified by the BIG_Handle
  |  parameter. The command also terminates the reception of BISes in the BIG
  |  specified in the HCI_LE_BIG_Create_Sync command, destroys the associated
  |  connection handles of the BISes in the BIG and removes the data paths for all
  |  BISes in the BIG.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6c20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**BIG_Handle**", "", "1", "<B", "|  0x00 to 0xEF Identifer of the BIG
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**BIG_Handle**", "1", "<B", "|  0x00 to 0xEF Identifer of the BIG
  |  All other values Reserved for future use"

.. raw:: html
    
    <hr>

.. _pkt-LE_Request_Peer_SCA:


LE_Request_Peer_SCA_
--------------------

**API usage:** 
``engine.send("LE_Request_Peer_SCA", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Request_Peer_SCA --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x206d

This command is used to read the Sleep Clock Accuracy (SCA) of the peer
  |  device.
  |  The Connection_Handle parameter is the connection handle of the ACL
  |  connection.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6d20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "1", "<B", "|  0xXXXX Connection handle of the ACL
  |  Range 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Setup_ISO_Data_Path:


LE_Setup_ISO_Data_Path_
-----------------------

**API usage:** 
``engine.send("LE_Setup_ISO_Data_Path", Connection_Handle=0xXx,Data_Path_Direction=0xXx,Data_Path_ID=0xXx,Codec_ID=0xXx,Controller_Delay=0xXx,Codec_Configuration_Length=0xXx,Codec_Configuration=0xXx)``

**CLI usage:**
``blengine send LE_Setup_ISO_Data_Path --Connection_Handle=0xXx --Data_Path_Direction=0xXx --Data_Path_ID=0xXx --Codec_ID=0xXx --Controller_Delay=0xXx --Codec_Configuration_Length=0xXx --Codec_Configuration=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x206e

The HCI_LE_Setup_ISO_Data_Path command is used to identify and create
  |  the isochronous data path between the Host and the Controller for an
  |  established CIS or BIS identified by the Connection_Handle parameter. This
  |  command can also be used to configure a codec for each data path.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6e20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS or BIS
  |  Range: 0x0000 to 0x0EFF"
	"**Data_Path_Direction**", "", "1", "<B", "|  0x00 Input (Host to Controller)
  |  0x01 Output (Controller to Host)
  |  All other values Reserved for future use"
	"**Data_Path_ID**", "", "1", "<B", "|  0x00 HCI
  |  0x01 to 0xFE
  |  Logical_Channel_Number. The meaning of the logical channel is vendorspecific.
  |  0xFF Disabled"
	"**Codec_ID**", "", "5", "<5s", "|  Octet 0 See Assigned Numbers for Coding Format
  |  Octets 1 to 2 Company ID, see Assigned Numbers for Company Identifier.
  |      Shall be ignored if octet 0 is not 0xFF.
  |  Octets 3 to 4 Vendor-defined codec ID.
  |      Shall be ignored if octet 0 is not 0xFF."
	"**Controller_Delay**", "", "3", "<3s", "|  0xXXXXXX Controller delay in microseconds
  |  Range: 0x000000 to 0x3D0900
  |  Time range: 0 s to 4 s"
	"**Codec_Configuration_Length**", "", "1", "<B", "|  0xXX Length of codec configuration"
	"**Codec_Configuration**", "", "1", "<B", "|  Variable Codec-specific configuration data"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "1", "<B", "|  0xXXXX Connection handle of the CIS or BIS
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Remove_ISO_Data_Path:


LE_Remove_ISO_Data_Path_
------------------------

**API usage:** 
``engine.send("LE_Remove_ISO_Data_Path", Connection_Handle=0xXx,Data_Path_Direction=0xXx)``

**CLI usage:**
``blengine send LE_Remove_ISO_Data_Path --Connection_Handle=0xXx --Data_Path_Direction=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x206f

The HCI_LE_Remove_ISO_Data_Path command is used to remove the input
  |  and/or output data path(s) associated with a CIS or BIS identified by the
  |  Connection_Handle parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x6f20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS or BIS.
  |  Range: 0x0000 to 0x0EFF"
	"**Data_Path_Direction**", "", "1", "<B", "|  0 Remove input data path
  |  1 Remove output data path
  |  All other bits Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection handle of the CIS or BIS
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_ISO_Transmit_Test:


LE_ISO_Transmit_Test_
---------------------

**API usage:** 
``engine.send("LE_ISO_Transmit_Test", Connection_Handle=0xXx,Payload_Type=0xXx)``

**CLI usage:**
``blengine send LE_ISO_Transmit_Test --Connection_Handle=0xXx --Payload_Type=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2070

The HCI_LE_ISO_Transmit_Test command should only be used in the ISO
  |  Test mode and only for testing purposes.
  |  The command is used to configure an established CIS or BIS specified by the
  |  Connection_Handle parameter, and transmit test payloads which are
  |  generated by the Controller.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7020", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS or BIS
  |  Range 0x0000 to 0x0EFF"
	"**Payload_Type**", "", "1", "<B", "|  0x00 Zero length payload
  |  0x01 Variable length payload
  |  0x02 Maximum length payload
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection handle of a CIS or BIS
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_ISO_Receive_Test:


LE_ISO_Receive_Test_
--------------------

**API usage:** 
``engine.send("LE_ISO_Receive_Test", Connection_Handle=0xXx,Payload_Type=0xXx)``

**CLI usage:**
``blengine send LE_ISO_Receive_Test --Connection_Handle=0xXx --Payload_Type=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2071

The HCI_LE_ISO_Receive_Test command should only be used in the ISO Test
  |  mode and only for testing purposes.
  |  The command is used to configure an established CIS or a synchronized BIG
  |  specified by the Connection_Handle parameter to receive payloads.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7120", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS or BIS
  |  Range 0x0000 to 0x0EFF"
	"**Payload_Type**", "", "1", "<B", "|  0x00 Zero length payload
  |  0x01 Variable length payload
  |  0x02 Maximum length payload
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection handle of a CIS or BIS
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_ISO_Read_Test_Counters:


LE_ISO_Read_Test_Counters_
--------------------------

**API usage:** 
``engine.send("LE_ISO_Read_Test_Counters", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_ISO_Read_Test_Counters --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2072

The HCI_LE_ISO_Read_Test_Counters command should only be used in the
  |  ISO Test mode and only for testing purposes.
  |  The command is used to read the test counters (see [Vol 6] Part B, Section 7)
  |  in the Controller which is configured in ISO Receive Test mode for a CIS or BIS
  |  specified by the Connection_Handle. Reading the test counters does not reset
  |  the test counters.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7220", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS or BIS
  |  Range 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection handle of a CIS or BIS
  |  Range: 0x0000 to 0x0EFF"
	"**Received_Packet_Count**", "4", "<L", "|  0xXXXXXXXX Number in the Received_Packet_Count"
	"**Missed_Packet_Count**", "4", "<L", "|  0xXXXXXXXX Number in the Missed_Packet_Count"
	"**Failed_Packet_Count**", "4", "<L", "|  0xXXXXXXXX Number in the Failed_Packet_Count"

.. raw:: html
    
    <hr>

.. _pkt-LE_ISO_Test_End:


LE_ISO_Test_End_
----------------

**API usage:** 
``engine.send("LE_ISO_Test_End", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_ISO_Test_End --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2073

The HCI_LE_ISO_Test_End command should only be used in the ISO Test
  |  mode and only for testing purposes.
  |  The command is used to terminate the ISO Transmit and/or Receive Test
  |  mode for a CIS or BIS specified by the Connection_Handle parameter but does
  |  not terminate the CIS or BIS.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7320", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS or BIS
  |  Range 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection handle of a CIS or BIS
  |  Range: 0x0000 to 0x0EFF"
	"**Received_Packet_Count**", "4", "<L", "|  0xXXXXXXXX Number in the Received_Packet_Count"
	"**Missed_Packet_Count**", "4", "<L", "|  0xXXXXXXXX Number in the Missed_Packet_Count"
	"**Failed_Packet_Count**", "4", "<L", "|  0xXXXXXXXX Number in the Failed_Packet_Count"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Host_Feature:


LE_Set_Host_Feature_
--------------------

**API usage:** 
``engine.send("LE_Set_Host_Feature", Bit_Number=0xXx,Bit_Value=0xXx)``

**CLI usage:**
``blengine send LE_Set_Host_Feature --Bit_Number=0xXx --Bit_Value=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2074





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7420", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Bit_Number**", "", "1", "<B", "|  0x00 to 0x3F Bit position in the FeatureSet
  |  All other values Reserved for future use"
	"**Bit_Value**", "", "1", "<B", "|  0x00 The Host feature is disabled and so the bit in the FeatureSet shall be
  |  set to 0
  |  0x01 The Host feature is enabled and so the bit in the FeatureSet shall be set
  |  to 1
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_ISO_Link_Quality:


LE_Read_ISO_Link_Quality_
-------------------------

**API usage:** 
``engine.send("LE_Read_ISO_Link_Quality", Connection_Handle=0xXx)``

**CLI usage:**
``blengine send LE_Read_ISO_Link_Quality --Connection_Handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2075

This command returns the values of various counters related to link quality that
  |  are associated with the isochronous stream specified by the
  |  Connection_Handle parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7520", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS or BIS
  |  Range 0x0000 to 0x0EFF"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection handle of a CIS or BIS
  |  Range: 0x0000 to 0x0EFF"
	"**Tx_UnACKed_Packets**", "4", "<L", "|  0xXXXXXXXX Value of the Tx_UnACKed_Packets counter"
	"**Tx_Flushed_Packets**", "4", "<L", "|  0xXXXXXXXX Value of the Tx_Flushed_Packets counter"
	"**Tx_Last_Subevent_Packets**", "4", "<L", "|  0xXXXXXXXX Value of the Tx_Last_Subevent_Packets counter"
	"**Retransmitted_Packets**", "4", "<L", "|  0xXXXXXXXX Value of the Retransmitted_Packets counter"
	"**CRC_Error_Packets**", "4", "<L", "|  0xXXXXXXXX Value of the CRC_Error_Packets counter"
	"**Rx_Unreceived_Packets**", "4", "<L", "|  0xXXXXXXXX Value of the Rx_Unreceived_Packets counter"
	"**Duplicate_Packets**", "4", "<L", "|  0xXXXXXXXX Value of the Duplicate_Packets counter"

.. raw:: html
    
    <hr>

.. _pkt-LE_Enhanced_Read_Transmit_Power_Level:


LE_Enhanced_Read_Transmit_Power_Level_
--------------------------------------

**API usage:** 
``engine.send("LE_Enhanced_Read_Transmit_Power_Level", Connection_Handle=0xXx,PHY=0xXx)``

**CLI usage:**
``blengine send LE_Enhanced_Read_Transmit_Power_Level --Connection_Handle=0xXx --PHY=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2076

The HCI_LE_ISO_Test_End command should only be used in the ISO Test
  |  mode and only for testing purposes.
  |  The command is used to terminate the ISO Transmit and/or Receive Test
  |  mode for a CIS or BIS specified by the Connection_Handle parameter but does
  |  not terminate the CIS or BIS.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7620", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS or BIS
  |  Range 0x0000 to 0x0EFF"
	"**PHY**", "", "1", "<B", "|  0x01 LE 1M PHY
  |  0x02 LE 2M PHY
  |  0x03 LE Coded PHY with S=8 data coding
  |  0x04 LE Coded PHY with S=2 data coding
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection handle of a CIS or BIS
  |  Range: 0x0000 to 0x0EFF"
	"**PHY**", "1", "<B", "|  0x01 LE 1M PHY
  |  0x02 LE 2M PHY
  |  0x03 LE Coded PHY with S=8 data coding
  |  0x04 LE Coded PHY with S=2 data coding
  |  All other values Reserved for future use"
	"**Current_Transmit_Power_Level,**", "1", "<B", "|  0xXX Current transmit power level
  |  Range: -127 to 20
  |  Units: dBm
  |  0x7F Current transmit power level is unavailable"
	"**Max_Transmit_Power_Level**", "1", "<B", "|  0xXX Maximum transmit power level
  |  Range: -127 to 20
  |  Units: dBm"

.. raw:: html
    
    <hr>

.. _pkt-LE_Read_Remote_Transmit_Power_Level:


LE_Read_Remote_Transmit_Power_Level_
------------------------------------

**API usage:** 
``engine.send("LE_Read_Remote_Transmit_Power_Level", Connection_Handle=0xXx,PHY=0xXx)``

**CLI usage:**
``blengine send LE_Read_Remote_Transmit_Power_Level --Connection_Handle=0xXx --PHY=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2077

The HCI_LE_Read_Remote_Transmit_Power_Level command is used to read
  |  the transmit power level used by the remote Controller on the ACL connection
  |  that is identified by the Connection_Handle parameter and the PHY indicated
  |  by the PHY parameter.
  |  The local Controller may use the remote transmit power level value obtained
  |  from a prior Power Change Indication or Power Control Request procedure
  |  (see [Vol 6] Part B, Section 5.1.17 and [Vol 6] Part B, Section 5.1.18).
  |  Otherwise or when no prior remote transmit power level value is available, the
  |  local Controller shall initiate a new Power Control Request procedure to obtain
  |  the remote transmit power level.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7720", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection handle of the CIS or BIS
  |  Range 0x0000 to 0x0EFF"
	"**PHY**", "", "1", "<B", "|  0x01 LE 1M PHY
  |  0x02 LE 2M PHY
  |  0x03 LE Coded PHY with S=8 data coding
  |  0x04 LE Coded PHY with S=2 data coding
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Path_Loss_Reporting_Parameters:


LE_Set_Path_Loss_Reporting_Parameters_
--------------------------------------

**API usage:** 
``engine.send("LE_Set_Path_Loss_Reporting_Parameters", Connection_Handle=0xXx,High_Threshold=0xXx,High_Hysteresis=0xXx,Low_Threshold=0xXx,Low_Hysteresis=0xXx,Min_Time_Spent=0xXx)``

**CLI usage:**
``blengine send LE_Set_Path_Loss_Reporting_Parameters --Connection_Handle=0xXx --High_Threshold=0xXx --High_Hysteresis=0xXx --Low_Threshold=0xXx --Low_Hysteresis=0xXx --Min_Time_Spent=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2078

The HCI_LE_Set_Path_Loss_Reporting_Parameters command is used to set
  |  the path loss threshold reporting parameters for the ACL connection identified
  |  by the Connection_Handle parameter.
  |  The path loss threshold-based mechanism is described in [Vol 6] Part B,
  |  Section 5.6. For each zone boundary, the upwards boundary shall equal the
  |  threshold plus the hysteresis and the downwards boundary shall equal the
  |  threshold minus the hysteresis.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7820", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x00000x0EFF"
	"**High_Threshold**", "", "1", "<B", "|  0xXX High threshold for the path loss
  |  Units: dB
  |  0xFF High Threshold unused"
	"**High_Hysteresis**", "", "1", "<B", "|  0xXX Hysteresis value for the high threshold
  |  Units: dB"
	"**Low_Threshold**", "", "1", "<B", "|  0xXX Low threshold for the path loss
  |  Units: dB"
	"**Low_Hysteresis**", "", "1", "<B", "|  0xXX Hysteresis value for the low threshold
  |  Units: dB"
	"**Min_Time_Spent**", "", "2", "<H", "|  0xXXXX Minimum time in number of connection events to be observed once the
  |  path crosses the threshold before an event is generated"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x00000x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Path_Loss_Reporting_Enable:


LE_Set_Path_Loss_Reporting_Enable_
----------------------------------

**API usage:** 
``engine.send("LE_Set_Path_Loss_Reporting_Enable", Connection_Handle=0xXx,Enable=0xXx)``

**CLI usage:**
``blengine send LE_Set_Path_Loss_Reporting_Enable --Connection_Handle=0xXx --Enable=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2079

The HCI_LE_Set_Path_Loss_Reporting_Enable command is used to enable
  |  or disable path loss reporting for the ACL connection identified by the
  |  Connection_Handle parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7920", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x00000x0EFF"
	"**Enable**", "", "1", "<B", "|  0x00 Reporting disabled
  |  0x01 Reporting enabled
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x00000x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Transmit_Power_Reporting_Enable:


LE_Set_Transmit_Power_Reporting_Enable_
---------------------------------------

**API usage:** 
``engine.send("LE_Set_Transmit_Power_Reporting_Enable", Connection_Handle=0xXx,Local_Enable=0xXx,Remote_Enable=0xXx)``

**CLI usage:**
``blengine send LE_Set_Transmit_Power_Reporting_Enable --Connection_Handle=0xXx --Local_Enable=0xXx --Remote_Enable=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x207a

The HCI_LE_Set_Transmit_Power_Reporting_Enable command is used to
  |  enable or disable the reporting to the local Host of transmit power level
  |  changes in the local and remote Controllers for the ACL connection identified
  |  by the Connection_Handle parameter.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x7a20", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Connection_Handle**", "", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x00000x0EFF"
	"**Local_Enable**", "", "1", "<B", "|  0x00 Disable local transmit power reports
  |  0x01 Enable local transmit power reports
  |  All other values Reserved for future use"
	"**Remote_Enable**", "", "1", "<B", "|  0x00 Disable remote transmit power reports
  |  0x01 Enable remote transmit power reports
  |  All other values Reserved for future use"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Connection_Handle**", "2", "<H", "|  0xXXXX Connection_Handle
  |  Range: 0x00000x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Periodic_Advertising_Subevent_Data:


LE_Set_Periodic_Advertising_Subevent_Data_
------------------------------------------

**API usage:** 
``engine.send("LE_Set_Periodic_Advertising_Subevent_Data", Advertising_Handle=0xXx,Num_Subevents=0xXx,Subevent=0xXx,Response_Slot_Start=0xXx,Response_Slot_Count=0xXx,Subevent_Data_Length=0xXx,Subevent_Data=0xXx)``

**CLI usage:**
``blengine send LE_Set_Periodic_Advertising_Subevent_Data --Advertising_Handle=0xXx --Num_Subevents=0xXx --Subevent=0xXx --Response_Slot_Start=0xXx --Response_Slot_Count=0xXx --Subevent_Data_Length=0xXx --Subevent_Data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2082

The HCI_LE_Set_Periodic_Advertising_Subevent_Data command is used by
  |  the Host to set the data for one or more subevents of PAwR in reply to an
  |  HCI_LE_Periodic_Advertising_Subevent_Data_Request event.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x8220", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Advertising_Handle**", "", "1", "<B", "|  0xXX Used to identify a periodic advertising train
  |  Range: 0x00 to 0xEF"
	"**Num_Subevents**", "", "1", "<B", "|  0x01 to 0x0F Number of subevent data in the command.
  |  All other values Reserved for future use"
	"**Subevent**", "", "0", "None", "|  0x00 The subevent index of the data contained in this command.
  |  Range: 0x00 to 0x7F"
	"**Response_Slot_Start**", "", "0", "None", "|  0x00 The first response slots to be used in this subevent."
	"**Response_Slot_Count**", "", "0", "None", "|  0x00 The number of response slots to be used."
	"**Subevent_Data_Length**", "", "0", "None", "|  0 to 251 The number of octets in the Subevent_Data parameter.
  |  All other values Reserved for future use"
	"**Subevent_Data**", "", "0", "None", "|  Variable Advertising data formatted as defined in [Vol 3] Part C, Section 11."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Advertising_Handle**", "1", "<B", "|  0xXX Used to identify a periodic advertising train
  |  Range: 0x00 to 0xEF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Periodic_Advertising_Response_Data:


LE_Set_Periodic_Advertising_Response_Data_
------------------------------------------

**API usage:** 
``engine.send("LE_Set_Periodic_Advertising_Response_Data", Sync_Handle=0xXx,Request_Event=0xXx,Request_Subevent=0xXx,Response_Subevent=0xXx,Response_Slot=0xXx,Response_Data_Length=0xXx,Response_Data=0xXx)``

**CLI usage:**
``blengine send LE_Set_Periodic_Advertising_Response_Data --Sync_Handle=0xXx --Request_Event=0xXx --Request_Subevent=0xXx --Response_Subevent=0xXx --Response_Slot=0xXx --Response_Data_Length=0xXx --Response_Data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2083

The HCI_LE_Set_Periodic_Advertising_Response_Data command is used by
  |  the Host to set the data for a response slot in a specific subevent of the PAwR
  |  identified by the Sync_Handle.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x8320", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Sync_Handle**", "", "2", "<H", "|  0xXXXX Sync_Handle identifying the PAwR train
  |  Range: 0x0000 to 0x0EFF"
	"**Request_Event**", "", "2", "<H", "|  0xXXXX The value of paEventCounter (see [Vol 6] Part B, Section 4.4.2.1) for
  |  the periodic advertising packet that the Host is responding to"
	"**Request_Subevent**", "", "1", "<B", "|  0xXX The subevent for the periodic advertising packet that the Host is
  |  responding to"
	"**Response_Subevent**", "", "1", "<B", "|  0xXX Used to identify the subevent of the PAwR train
  |  Range: 0x00 to 0xFF"
	"**Response_Slot**", "", "1", "<B", "|  0xXX Used to identify the response slot of the PAwR train
  |  Range: 0x00 to 0xFF"
	"**Response_Data_Length**", "", "1", "<B", "|  0 to 251 The number of octets in the Response_Data parameter.
  |  All other values Reserved for future use"
	"**Response_Data**", "", "0", "None", "|  Variable Advertising data formatted as defined in [Vol 3] Part C, Section 11."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Sync_Handle**", "2", "<H", "|  0xXXXX Sync_Handle identifying the PAwR train
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

.. _pkt-LE_Set_Periodic_Sync_Subevent:


LE_Set_Periodic_Sync_Subevent_
------------------------------

**API usage:** 
``engine.send("LE_Set_Periodic_Sync_Subevent", Sync_Handle=0xXx,Periodic_Advertising_Properties=0xXx,Num_Subevents=0xXx,Subevent=0xXx)``

**CLI usage:**
``blengine send LE_Set_Periodic_Sync_Subevent --Sync_Handle=0xXx --Periodic_Advertising_Properties=0xXx --Num_Subevents=0xXx --Subevent=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01)
:identifier: 0x2084

The HCI_LE_Set_Periodic_Sync_Subevent command is used to instruct the
  |  Controller to synchronize with a subset of the subevents within a PAwR train
  |  identified by the Sync_Handle parameter, listen for packets sent by the peer
  |  device and pass any received data up to the Host. If the Controller is synchronized
  |  with any subevents that are not in the subset of subevents in this
  |  command, then the Controller shall no longer synchronize with those subevents.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**opcode**", "0x8420", "2", "<H", "|  Command OpCode"
	"**length**", "auto", "auto", "<B", "|  Packet Length"
	"**Sync_Handle**", "", "2", "<H", "|  0xXXXX Sync_Handle identifying the PAwR train
  |  Range: 0x0000 to 0x0EFF"
	"**Periodic_Advertising_Properties**", "", "2", "<H", "|  6 bit Include TxPower in the advertising PDU
  |  All other bits Reserved for future use"
	"**Num_Subevents**", "", "1", "<B", "|  0xXX Number of subevents.
  |  Range: 0x01 to 0x80"
	"**Subevent**", "", "1", "<B", "|  0xXX The subevent to synchronize with..
  |  Range: 0x00 to 0x7F"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Response Status"
	"**Sync_Handle**", "2", "<H", "|  0xXXXX Sync_Handle identifying the periodic advertising train
  |  Range: 0x0000 to 0x0EFF"

.. raw:: html
    
    <hr>

