
.. this file is auto generated by docs/packets.py

=============================
em.system.hi.cmd.dm 
=============================

.. contents:: Index
   :local:
   :depth: 2

.. raw:: html

    <input class="search input" type="text" placeholder="Live Search" style="width: 100%; padding: 10px;">
    <div>&nbsp</div>
    <div id="search-loader" style="display:none;">please wait...</div>
    <div id="count">220 Packets</div>


.. _pkt-EMSHI_DM_Welcome:


EMSHI_DM_Welcome_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_Welcome")``

**CLI usage:**
``blengine send EMSHI_DM_Welcome``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b00

Welcome to the DM



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x00", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_Register:


EMSHI_DM_Register_
------------------

**API usage:** 
``engine.send("EMSHI_DM_Register")``

**CLI usage:**
``blengine send EMSHI_DM_Register``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b01

Registering DM



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x01", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_FindAdType:


EMSHI_DM_FindAdType_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_FindAdType", adtype=0xXx,dataLen=0xXx,Data=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_FindAdType --adtype=0xXx --dataLen=0xXx --Data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b02

Find an adv data element



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x02", "1", "<B", "|  No Description"
	"**adtype**", "", "1", "<B", "|  adv type"
	"**dataLen**", "", "2", "<H", "|  length of the data"
	"**Data**", "", "1", "<B", "|  Adv data"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**advData**", "0", "None", "|  Array of Adv Data with required AD Type"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvInit:


EMSHI_DM_AdvInit_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_AdvInit")``

**CLI usage:**
``blengine send EMSHI_DM_AdvInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b03

Initialize DM legacy advertising



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x03", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ExtAdvInit:


EMSHI_DM_ExtAdvInit_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_ExtAdvInit")``

**CLI usage:**
``blengine send EMSHI_DM_ExtAdvInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b04

Initialize DM extended advertising



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x04", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvModeLeg:


EMSHI_DM_AdvModeLeg_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvModeLeg")``

**CLI usage:**
``blengine send EMSHI_DM_AdvModeLeg``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b05

Whether DM advertising is in legacy mode



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x05", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**mode**", "1", "<B", "|  Legacy Advertising mode"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvModeExt:


EMSHI_DM_AdvModeExt_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvModeExt")``

**CLI usage:**
``blengine send EMSHI_DM_AdvModeExt``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b06

Whether DM advertising is in extended mode



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x06", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**mode**", "1", "<B", "|  Extended Advertising mode"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvConfig:


EMSHI_DM_AdvConfig_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvConfig", advHandle=0xXx,adtype=0xXx,peerAddrType=0xXx,PeerAddr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvConfig --advHandle=0xXx --adtype=0xXx --peerAddrType=0xXx --PeerAddr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b07

Set the advertising parameters using the given advertising type, and peer address



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x07", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle."
	"**adtype**", "", "1", "<B", "|  Advertising type"
	"**peerAddrType**", "", "1", "<B", "|  Peer address type"
	"**PeerAddr**", "", "6", "mac", "|  Peer address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvSetData:


EMSHI_DM_AdvSetData_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvSetData", advHandle=0xXx,op=0xXx,location=0xXx,len=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvSetData --advHandle=0xXx --op=0xXx --location=0xXx --len=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b08

Set the advertising or scan response data
  |               to the given data



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x08", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**op**", "", "1", "<B", "|  Data operation"
	"**location**", "", "1", "<B", "|  Data location"
	"**len**", "", "1", "<B", "|  Length of the data.Maximum length is 236 bytes"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvStart:


EMSHI_DM_AdvStart_
------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvStart", numSets=0xXx,AdvHandles=0xXx,Duration=0xXx,MaxEaEvents=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvStart --numSets=0xXx --AdvHandles=0xXx --Duration=0xXx --MaxEaEvents=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b09

Start advertising using the given advertising set and duration



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x09", "1", "<B", "|  No Description"
	"**numSets**", "", "1", "<B", "|  Number of advertising sets to enable"
	"**AdvHandles**", "", "1", "<B", "|  Advertising handles array"
	"**Duration**", "", "2", "<H", "|  Advertising duration (in milliseconds) array ."
	"**MaxEaEvents**", "", "1", "<B", "|  Maximum number of extended advertising events array"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvStop:


EMSHI_DM_AdvStop_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_AdvStop", numSets=0xXx,AdvHandles=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvStop --numSets=0xXx --AdvHandles=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b0a

Stop advertising for the given advertising set



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x0a", "1", "<B", "|  No Description"
	"**numSets**", "", "1", "<B", "|  Number of advertising sets"
	"**AdvHandles**", "", "0", "None", "|  Advertising Handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvRemoveAdvSet:


EMSHI_DM_AdvRemoveAdvSet_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvRemoveAdvSet", AdvHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvRemoveAdvSet --AdvHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b0b

Remove an advertising set



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x0b", "1", "<B", "|  No Description"
	"**AdvHandle**", "", "1", "<B", "|  Advertising Handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvClearAdvSets:


EMSHI_DM_AdvClearAdvSets_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvClearAdvSets")``

**CLI usage:**
``blengine send EMSHI_DM_AdvClearAdvSets``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b0c

Clear advertising sets



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x0c", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvSetRandAddr:


EMSHI_DM_AdvSetRandAddr_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvSetRandAddr", advHandle=0xXx,Addr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvSetRandAddr --advHandle=0xXx --Addr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b0d

Set the random device address for a given advertising set



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x0d", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**Addr**", "", "6", "mac", "|  Random device address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvSetInterval:


EMSHI_DM_AdvSetInterval_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvSetInterval", advHandle=0xXx,intervalMin=0xXx,intervalMax=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvSetInterval --advHandle=0xXx --intervalMin=0xXx --intervalMax=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b0e

Set the minimum and maximum advertising intervals



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x0e", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**intervalMin**", "", "2", "<H", "|  Minimum advertising interval"
	"**intervalMax**", "", "2", "<H", "|  Maximum advertising interval"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvSetChannelMap:


EMSHI_DM_AdvSetChannelMap_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvSetChannelMap", AdvHandle=0xXx,channelMap=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvSetChannelMap --AdvHandle=0xXx --channelMap=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b0f

Include or exclude certain channels from the advertising channel map



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x0f", "1", "<B", "|  No Description"
	"**AdvHandle**", "", "1", "<B", "|  Advertising handle"
	"**channelMap**", "", "1", "<B", "|  Advertising channel map"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvSetAddrType:


EMSHI_DM_AdvSetAddrType_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvSetAddrType", addrType=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvSetAddrType --addrType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b10

Set the local address type used while advertising



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x10", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Address type"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvSetAdValue:


EMSHI_DM_AdvSetAdValue_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvSetAdValue", adType=0xXx,len=0xXx,advDataBufLen=0xXx,Value=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvSetAdValue --adType=0xXx --len=0xXx --advDataBufLen=0xXx --Value=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b11

Set the value of an advertising data element
  |                in the given advertising or scan response data.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x11", "1", "<B", "|  No Description"
	"**adType**", "", "1", "<B", "|  Advertising data element type"
	"**len**", "", "1", "<B", "|  Length of the value.Maximum length is 29 bytes."
	"**advDataBufLen**", "", "2", "<H", "|  Length of the advertising or scan response data"
	"**Value**", "", "0", "None", "|  Advertising data value"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Set Adv Value status"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvSetName:


EMSHI_DM_AdvSetName_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvSetName", len=0xXx,advDataBufLen=0xXx,pValue=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvSetName --len=0xXx --advDataBufLen=0xXx --pValue=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b12

Set the device name in the given advertising or scan response data



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x12", "1", "<B", "|  No Description"
	"**len**", "", "1", "<B", "|  Length of the name.Maximum length is 29 bytes."
	"**advDataBufLen**", "", "2", "<H", "|  Length of the advertising or scan response data buffer"
	"**pValue**", "", "0", "None", "|  name input required in UTF-8 format"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevPrivInit:


EMSHI_DM_DevPrivInit_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_DevPrivInit")``

**CLI usage:**
``blengine send EMSHI_DM_DevPrivInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b13

Initialize device privacy module



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x13", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevPrivStart:


EMSHI_DM_DevPrivStart_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_DevPrivStart", changeInterval=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_DevPrivStart --changeInterval=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b14

Start using a private resolvable address.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x14", "1", "<B", "|  No Description"
	"**changeInterval**", "", "2", "<H", "|  Interval between automatic address changes, in seconds"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevPrivStop:


EMSHI_DM_DevPrivStop_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_DevPrivStop")``

**CLI usage:**
``blengine send EMSHI_DM_DevPrivStop``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b15

Stop using a private resolvable address



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x15", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvUseLegacyPdu:


EMSHI_DM_AdvUseLegacyPdu_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvUseLegacyPdu", advHandle=0xXx,useLegacyPdu=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvUseLegacyPdu --advHandle=0xXx --useLegacyPdu=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b16

Set whether or not to use legacy advertising PDUs with extended advertising



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x16", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**useLegacyPdu**", "", "1", "<B", "|  Whether to use legacy advertising 
  |                PDUs (default value is TRUE)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvOmitAdvAddr:


EMSHI_DM_AdvOmitAdvAddr_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvOmitAdvAddr", advHandle=0xXx,omitAdvAddr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvOmitAdvAddr --advHandle=0xXx --omitAdvAddr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b17

Set whether or not to omit advertiser's address from all PDUs (anonymous advertising)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x17", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**omitAdvAddr**", "", "1", "<B", "|  Whether to omit advertiser's address from all PDUs (default value is FALSE)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvIncTxPwr:


EMSHI_DM_AdvIncTxPwr_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvIncTxPwr", advHandle=0xXx,incTxPwr=0xXx,advTxPwr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvIncTxPwr --advHandle=0xXx --incTxPwr=0xXx --advTxPwr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b18

Set whether or not to include TxPower in extended header of advertising PDU



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x18", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**incTxPwr**", "", "1", "<B", "|  Whether to include TxPower in extended header of advertising PDU"
	"**advTxPwr**", "", "1", "<B", "|  Advertising tx power (127 = no preference)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvSetPhyParam:


EMSHI_DM_AdvSetPhyParam_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvSetPhyParam", advHandle=0xXx,priAdvPhy=0xXx,secAdvMaxSkip=0xXx,secAdvPhy=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvSetPhyParam --advHandle=0xXx --priAdvPhy=0xXx --secAdvMaxSkip=0xXx --secAdvPhy=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b19

Set extended advertising PHY parameters



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x19", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**priAdvPhy**", "", "1", "<B", "|  Primary advertising Phy"
	"**secAdvMaxSkip**", "", "1", "<B", "|  Maximum advertising events Controller can skip before sending
  |                  AUX_ADV_IND on secondary advertising channel (0 = AUX_ADV_IND will be sent prior to next advertising event)"
	"**secAdvPhy**", "", "1", "<B", "|  "

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvScanReqNotifEnable:


EMSHI_DM_AdvScanReqNotifEnable_
-------------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvScanReqNotifEnable", advHandle=0xXx,scanReqNotifEna=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvScanReqNotifEnable --advHandle=0xXx --scanReqNotifEna=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b1a

Set scan request notification enable



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x1a", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**scanReqNotifEna**", "", "1", "<B", "|  Scan request notification enable"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvSetFragPref:


EMSHI_DM_AdvSetFragPref_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvSetFragPref", advHandle=0xXx,fragPref=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvSetFragPref --advHandle=0xXx --fragPref=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b1b

Set fragment preference for advertising data



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x1b", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**fragPref**", "", "1", "<B", "|  Fragment preference"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AdvSetSid:


EMSHI_DM_AdvSetSid_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_AdvSetSid", advHandle=0xXx,advSid=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AdvSetSid --advHandle=0xXx --advSid=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b1c

Set advertising SID for the given advertising handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x1c", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**advSid**", "", "1", "<B", "|  Advertsing SID"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PerAdvConfig:


EMSHI_DM_PerAdvConfig_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_PerAdvConfig", advHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PerAdvConfig --advHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b1d

Set the advertising parameters for periodic advertising



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x1d", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PerAdvSetData:


EMSHI_DM_PerAdvSetData_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_PerAdvSetData", advHandle=0xXx,op=0xXx,len=0xXx,Data=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PerAdvSetData --advHandle=0xXx --op=0xXx --len=0xXx --Data=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b1e

Whether DM advertising is in extended mode



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x1e", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**op**", "", "1", "<B", "|  Data operation"
	"**len**", "", "1", "<B", "|  Length of the data.Maximum length is 236 bytes"
	"**Data**", "", "0", "None", "|  Adv Data"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PerAdvStart:


EMSHI_DM_PerAdvStart_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_PerAdvStart", advHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PerAdvStart --advHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b1f

Whether DM advertising is in extended mode



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x1f", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PerAdvStop:


EMSHI_DM_PerAdvStop_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_PerAdvStop", advHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PerAdvStop --advHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b20

Whether DM advertising is in extended mode



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x20", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PerAdvSetInterval:


EMSHI_DM_PerAdvSetInterval_
---------------------------

**API usage:** 
``engine.send("EMSHI_DM_PerAdvSetInterval", advHandle=0xXx,intervalMin=0xXx,intervalMax=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PerAdvSetInterval --advHandle=0xXx --intervalMin=0xXx --intervalMax=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b21

SetInterval



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x21", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**intervalMin**", "", "2", "<H", "|  Minimum Interval"
	"**intervalMax**", "", "2", "<H", "|  Maximum Interval"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PerAdvIncTxPwr:


EMSHI_DM_PerAdvIncTxPwr_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_PerAdvIncTxPwr", advHandle=0xXx,incTxPwr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PerAdvIncTxPwr --advHandle=0xXx --incTxPwr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b22

Set whether or not to include TxPower in extended header
  |               of advertising PDU for periodic advertising



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x22", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**incTxPwr**", "", "1", "<B", "|  Whether to include TxPower in
  |               extended header of advertising PDU (default value is FALSE)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PerAdvIncAdi:


EMSHI_DM_PerAdvIncAdi_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_PerAdvIncAdi", advHandle=0xXx,incAdi=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PerAdvIncAdi --advHandle=0xXx --incAdi=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b23

Whether DM advertising is in extended mode



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x23", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**incAdi**", "", "1", "<B", "|  Whether to include ADI in periodic 
  |               advertising (default value is FALSE)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PerAdvEnabled:


EMSHI_DM_PerAdvEnabled_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_PerAdvEnabled", advHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PerAdvEnabled --advHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b24

Get status of periodic advertising handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x24", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**status**", "1", "<B", "|  Periodic ADV enable status"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ExtMaxAdvDataLen:


EMSHI_DM_ExtMaxAdvDataLen_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_ExtMaxAdvDataLen", advType=0xXx,useLegacyPdu=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ExtMaxAdvDataLen --advType=0xXx --useLegacyPdu=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b25

Maximum advertising data length supported
  |               by Controller for a given advertising type



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x25", "1", "<B", "|  No Description"
	"**advType**", "", "1", "<B", "|  Advertising type."
	"**useLegacyPdu**", "", "1", "<B", "|  Whether to use legacy advertising PDUs 
  |               with extended advertising"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**maxLen**", "1", "<B", "|  Maximum Data Length of ADV"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivInit:


EMSHI_DM_PrivInit_
------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivInit")``

**CLI usage:**
``blengine send EMSHI_DM_PrivInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b26

Initialize DM privacy module



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x26", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivResolveAddr:


EMSHI_DM_PrivResolveAddr_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivResolveAddr", Addr=0xXx,Irk=0xXx,param=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrivResolveAddr --Addr=0xXx --Irk=0xXx --param=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b27

Resolve a private resolvable address



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x27", "1", "<B", "|  No Description"
	"**Addr**", "", "0", "None", "|  Peer device address."
	"**Irk**", "", "0", "None", "|  The peer's identity resolving key"
	"**param**", "", "2", "<H", "|  client-defined parameter returned with callback event"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivAddDevToResList:


EMSHI_DM_PrivAddDevToResList_
-----------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivAddDevToResList", addrType=0xXx,IdentityAddr=0xXx,PeerIrk=0xXx,LocalIrk=0xXx,enableLlPriv=0xXx,param=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrivAddDevToResList --addrType=0xXx --IdentityAddr=0xXx --PeerIrk=0xXx --LocalIrk=0xXx --enableLlPriv=0xXx --param=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b28

Add device to resolving list



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x28", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Peer identity address type"
	"**IdentityAddr**", "", "0", "None", "|  Peer identity address"
	"**PeerIrk**", "", "0", "None", "|  The peer's identity resolving key"
	"**LocalIrk**", "", "0", "None", "|  The local identity resolving key"
	"**enableLlPriv**", "", "1", "<B", "|  Set to TRUE to enable address resolution in LL"
	"**param**", "", "2", "<H", "|  client-defined parameter returned with callback event"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivRemDevFromResList:


EMSHI_DM_PrivRemDevFromResList_
-------------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivRemDevFromResList", addrType=0xXx,IdentityAddr=0xXx,param=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrivRemDevFromResList --addrType=0xXx --IdentityAddr=0xXx --param=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b29

Remove device from resolving list



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x29", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Peer identity address type"
	"**IdentityAddr**", "", "0", "None", "|  Peer identity address"
	"**param**", "", "1", "<B", "|  client-defined parameter returned with callback event"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivClearResList:


EMSHI_DM_PrivClearResList_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivClearResList")``

**CLI usage:**
``blengine send EMSHI_DM_PrivClearResList``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b2a

Clear resolving list



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x2a", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivReadPeerResolvableAddr:


EMSHI_DM_PrivReadPeerResolvableAddr_
------------------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivReadPeerResolvableAddr", addrType=0xXx,pIdentityAddr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrivReadPeerResolvableAddr --addrType=0xXx --pIdentityAddr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b2b

HCI read peer resolvable address command



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x2b", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Peer identity address type"
	"**pIdentityAddr**", "", "0", "None", "|  Peer identity address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivReadLocalResolvableAddr:


EMSHI_DM_PrivReadLocalResolvableAddr_
-------------------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivReadLocalResolvableAddr", addrType=0xXx,IdentityAddr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrivReadLocalResolvableAddr --addrType=0xXx --IdentityAddr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b2c

Read local resolvable address command



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x2c", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Peer identity address type"
	"**IdentityAddr**", "", "0", "None", "|  Peer identity address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivSetAddrResEnable:


EMSHI_DM_PrivSetAddrResEnable_
------------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivSetAddrResEnable", enable=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrivSetAddrResEnable --enable=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b2d

Enable or disable address resolution in LL



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x2d", "1", "<B", "|  No Description"
	"**enable**", "", "1", "<B", "|  Set to TRUE to enable address resolution or FALSE to disable it"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivSetResolvablePrivateAddrTimeout:


EMSHI_DM_PrivSetResolvablePrivateAddrTimeout_
---------------------------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivSetResolvablePrivateAddrTimeout", rpaTimeout=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrivSetResolvablePrivateAddrTimeout --rpaTimeout=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b2e

Set resolvable private address timeout



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x2e", "1", "<B", "|  No Description"
	"**rpaTimeout**", "", "2", "<H", "|  Timeout measured in seconds"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivSetPrivacyMode:


EMSHI_DM_PrivSetPrivacyMode_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivSetPrivacyMode", addrType=0xXx,IdentityAddr=0xXx,mode=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrivSetPrivacyMode --addrType=0xXx --IdentityAddr=0xXx --mode=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b2f

Set privacy mode for a given entry in the resolving list



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x2f", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Peer identity address type"
	"**IdentityAddr**", "", "0", "None", "|  Peer identity address"
	"**mode**", "", "1", "<B", "|  Privacy mode (by default, network privacy mode is used)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivGenerateAddr:


EMSHI_DM_PrivGenerateAddr_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivGenerateAddr", Irk=0xXx,param=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrivGenerateAddr --Irk=0xXx --param=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b30

Generate a Resolvable Private Address (RPA)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x30", "1", "<B", "|  No Description"
	"**Irk**", "", "0", "None", "|  The identity resolving key"
	"**param**", "", "2", "<H", "|  Client-defined parameter returned with callback event"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrivSetDataRelatedAddrChanges:


EMSHI_DM_PrivSetDataRelatedAddrChanges_
---------------------------------------

**API usage:** 
``engine.send("EMSHI_DM_PrivSetDataRelatedAddrChanges", advHandle=0xXx,changeReasons=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrivSetDataRelatedAddrChanges --advHandle=0xXx --changeReasons=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b31

Specify circumstances when the Controller
  |               should refresh any RPA used by the advertising set identified by the advHandle parameter,
  |               whether or not the address timeout period has been reached



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x31", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"
	"**changeReasons**", "", "1", "<B", "|  Change reasons (HCI_CHANGE_REASON_ADV_DATA_TRIG_BIT 
  |               and/or HCI_CHANGE_REASON_SCN_DATA_TRIG_BIT)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_LlPrivEnabled:


EMSHI_DM_LlPrivEnabled_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_LlPrivEnabled")``

**CLI usage:**
``blengine send EMSHI_DM_LlPrivEnabled``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b32

Whether LL Privacy is enabled



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x32", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ScanInit:


EMSHI_DM_ScanInit_
------------------

**API usage:** 
``engine.send("EMSHI_DM_ScanInit")``

**CLI usage:**
``blengine send EMSHI_DM_ScanInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b33

Initialize DM legacy scanning



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x33", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ExtScanInit:


EMSHI_DM_ExtScanInit_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_ExtScanInit")``

**CLI usage:**
``blengine send EMSHI_DM_ExtScanInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b34

Initialize DM extended scanning



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x34", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PastInit:


EMSHI_DM_PastInit_
------------------

**API usage:** 
``engine.send("EMSHI_DM_PastInit")``

**CLI usage:**
``blengine send EMSHI_DM_PastInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b35

Initialize DM Periodic Advertising Sync Transfer (PAST) module



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x35", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCteInit:


EMSHI_DM_ConnCteInit_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCteInit")``

**CLI usage:**
``blengine send EMSHI_DM_ConnCteInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b36

Initialize DM Connection Constant Tone Extension (CTE) module



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x36", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ScanModeLeg:


EMSHI_DM_ScanModeLeg_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_ScanModeLeg")``

**CLI usage:**
``blengine send EMSHI_DM_ScanModeLeg``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b37

Whether DM scanning is in legacy mode



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x37", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**state**", "1", "<B", "|  DM scanning legacy mode state"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ScanModeExt:


EMSHI_DM_ScanModeExt_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_ScanModeExt")``

**CLI usage:**
``blengine send EMSHI_DM_ScanModeExt``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b38

Whether DM scanning is in extended mode



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x38", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**state**", "1", "<B", "|  DM scanning extended mode state"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ScanStart:


EMSHI_DM_ScanStart_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_ScanStart", scanPhys=0xXx,mode=0xXx,ScanType=0xXx,filterDup=0xXx,duration=0xXx,period=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ScanStart --scanPhys=0xXx --mode=0xXx --ScanType=0xXx --filterDup=0xXx --duration=0xXx --period=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b39

Start scanning on the given PHYs



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x39", "1", "<B", "|  No Description"
	"**scanPhys**", "", "1", "<B", "|  Scanner PHYs"
	"**mode**", "", "1", "<B", "|  Discoverability mode"
	"**ScanType**", "", "1", "<B", "|  Scan type array"
	"**filterDup**", "", "1", "<B", "|  Filter duplicates.
  |                      Set to TRUE to filter duplicate responses received from the same device"
	"**duration**", "", "2", "<H", "|  The scan duration, in milliseconds"
	"**period**", "", "2", "<H", "|  The scan period in 1.28 sec units (only applicable to AE).
  |                      If set to zero, periodic scanning is disabled"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ScanStop:


EMSHI_DM_ScanStop_
------------------

**API usage:** 
``engine.send("EMSHI_DM_ScanStop")``

**CLI usage:**
``blengine send EMSHI_DM_ScanStop``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b3a

Stop scanning



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x3a", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ScanSetInterval:


EMSHI_DM_ScanSetInterval_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_ScanSetInterval", scanPhys=0xXx,scanInterval_arr=0xXx,scanWindow_arr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ScanSetInterval --scanPhys=0xXx --scanInterval_arr=0xXx --scanWindow_arr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b3b

Set the scan interval and window for the specified PHYs



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x3b", "1", "<B", "|  No Description"
	"**scanPhys**", "", "1", "<B", "|  No Description"
	"**scanInterval_arr**", "", "2", "<H", "|  No Description"
	"**scanWindow_arr**", "", "2", "<H", "|  "

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ScanSetAddrType:


EMSHI_DM_ScanSetAddrType_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_ScanSetAddrType", addrType=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ScanSetAddrType --addrType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b3c

Set the local address type used while scanning



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x3c", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  "

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SyncStart:


EMSHI_DM_SyncStart_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_SyncStart", advSid=0xXx,advAddrType=0xXx,AdvAddr=0xXx,skip=0xXx,syncTimeout=0xXx,syncCteType=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SyncStart --advSid=0xXx --advAddrType=0xXx --AdvAddr=0xXx --skip=0xXx --syncTimeout=0xXx --syncCteType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b3d

Synchronize with periodic advertising from the given advertiser,
  |               and start receiving periodic advertising packets



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x3d", "1", "<B", "|  No Description"
	"**advSid**", "", "1", "<B", "|  Advertising SID"
	"**advAddrType**", "", "1", "<B", "|  Advertiser address type"
	"**AdvAddr**", "", "0", "None", "|  Advertiser address"
	"**skip**", "", "2", "<H", "|  Number of periodic advertising packets that can be skipped
  |                       after successful receive"
	"**syncTimeout**", "", "2", "<H", "|  Synchronization timeout in the units of 10ms"
	"**syncCteType**", "", "1", "<B", "|  Whether to only synchronize to periodic advertising
  |                       with certain types of Constant Tone Extension (0 indicates that the presence or absence of
  |                       a Constant Tone Extension is irrelevant)"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**syncid**", "1", "<B", "|  Sync identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SyncStop:


EMSHI_DM_SyncStop_
------------------

**API usage:** 
``engine.send("EMSHI_DM_SyncStop", syncID=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SyncStop --syncID=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b3e

Stop reception of the periodic advertising 
  |                identified by the given sync identifier



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x3e", "1", "<B", "|  No Description"
	"**syncID**", "", "1", "<B", "|  Sync identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SyncSetEncrypt:


EMSHI_DM_SyncSetEncrypt_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_SyncSetEncrypt", syncHandle=0xXx,encrypt=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SyncSetEncrypt --syncHandle=0xXx --encrypt=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b3f

Find a sync control block with matching handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x3f", "1", "<B", "|  No Description"
	"**syncHandle**", "", "2", "<H", "|  Sync handle"
	"**encrypt**", "", "1", "<B", "|  FALSE(Unencrypted) or FALSE(Encrypted)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SyncEncrypted:


EMSHI_DM_SyncEncrypted_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_SyncEncrypted", syncHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SyncEncrypted --syncHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b40

Get the encryption mode of the BIG corresponding
  |               to the periodic advertising train identified by the sync handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x40", "1", "<B", "|  No Description"
	"**syncHandle**", "", "1", "<B", "|  Sync handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SyncEnabled:


EMSHI_DM_SyncEnabled_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_SyncEnabled", syncHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SyncEnabled --syncHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b41

Get the encryption mode of the BIG corresponding
  |                 to the periodic advertising train identified by the sync handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x41", "1", "<B", "|  No Description"
	"**syncHandle**", "", "1", "<B", "|  Sync handle"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**state**", "1", "<B", "|  Sync encryption state"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SyncInitialRptEnable:


EMSHI_DM_SyncInitialRptEnable_
------------------------------

**API usage:** 
``engine.send("EMSHI_DM_SyncInitialRptEnable", enable=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SyncInitialRptEnable --enable=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b42

DM enable or disable initial periodic advertising
  |                 reports once synchronized



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x42", "1", "<B", "|  No Description"
	"**enable**", "", "1", "<B", "|  TRUE to enable initial reporting, FALSE to
  |                 disable initial reporting"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SyncInitialDupFiltEnable:


EMSHI_DM_SyncInitialDupFiltEnable_
----------------------------------

**API usage:** 
``engine.send("EMSHI_DM_SyncInitialDupFiltEnable", enable=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SyncInitialDupFiltEnable --enable=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b43

DM enable or disable initial periodic advertising
  |                 duplicate filtering once synchronized



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x43", "1", "<B", "|  No Description"
	"**enable**", "", "1", "<B", "|  TRUE to enable initial duplicate filtering, FALSE
  |                 disable initial duplicate filtering"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigSyncStart:


EMSHI_DM_BigSyncStart_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_BigSyncStart", bigHandle=0xXx,syncHandle=0xXx,mse=0xXx,bigSyncTimeout=0xXx,numBis=0xXx,Bis=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigSyncStart --bigHandle=0xXx --syncHandle=0xXx --mse=0xXx --bigSyncTimeout=0xXx --numBis=0xXx --Bis=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b44

Synchronize to a Broadcast Isochronous Group (BIG) described
  |                 in the periodic advertising train specified by the sync handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x44", "1", "<B", "|  No Description"
	"**bigHandle**", "", "1", "<B", "|  BIG handle"
	"**syncHandle**", "", "2", "<H", "|  Periodic advertising train handle"
	"**mse**", "", "1", "<B", "|  Maximum number of subevents"
	"**bigSyncTimeout**", "", "2", "<H", "|  Synchronization timeout for the BIS,in the units of 10ms"
	"**numBis**", "", "1", "<B", "|  Total number of BISes in the BIG"
	"**Bis**", "", "0", "None", "|  List of indices of BISes (in ascending order)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigSyncStop:


EMSHI_DM_BigSyncStop_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_BigSyncStop", bigHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigSyncStop --bigHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b45

Stop synchronizing or cancel the process of synchronizing
  |               to the Broadcast Isochronous Group (BIG) identified by the handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x45", "1", "<B", "|  No Description"
	"**bigHandle**", "", "1", "<B", "|  BIG handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BisSyncInUse:


EMSHI_DM_BisSyncInUse_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_BisSyncInUse", handle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BisSyncInUse --handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b46

For internal use only. Return TRUE if the BIS sync is in use



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x46", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  BIS connection handle"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**state**", "1", "<B", "|  Big Sync state"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigSyncSetBcastCode:


EMSHI_DM_BigSyncSetBcastCode_
-----------------------------

**API usage:** 
``engine.send("EMSHI_DM_BigSyncSetBcastCode", bigHandle=0xXx,encrypt=0xXx,authen=0xXx,pBcastCode=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigSyncSetBcastCode --bigHandle=0xXx --encrypt=0xXx --authen=0xXx --pBcastCode=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b47

Set the Broadcast Code for 
  |                the given Broadcast Isochronous Group (BIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x47", "1", "<B", "|  No Description"
	"**bigHandle**", "", "1", "<B", "|  BIG handle"
	"**encrypt**", "", "1", "<B", "|  FALSE (Unencrypted) or TRUE (Encrypted)"
	"**authen**", "", "1", "<B", "|  FALSE (Unauthenticated) or TRUE (Authenticated)"
	"**pBcastCode**", "", "1", "<B", "|  Broadcast code"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigSyncSetSecLevel:


EMSHI_DM_BigSyncSetSecLevel_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_BigSyncSetSecLevel", bigHandle=0xXx,secLevel=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigSyncSetSecLevel --bigHandle=0xXx --secLevel=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b48

Set the security level of the LE Security Mode 3 for
  |               the given Broadcast Isochronous Group (BIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x48", "1", "<B", "|  No Description"
	"**bigHandle**", "", "1", "<B", "|  BIG handle"
	"**secLevel**", "", "1", "<B", "|  Security level"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigSyncGetSecLevel:


EMSHI_DM_BigSyncGetSecLevel_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_BigSyncGetSecLevel", handle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigSyncGetSecLevel --handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b49

Get the security level of the LE Security Mode 3 for
  |               the given Broadcast Isochronous Group (BIG) connection handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x49", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  BIS connection handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BisMasterInit:


EMSHI_DM_BisMasterInit_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_BisMasterInit")``

**CLI usage:**
``blengine send EMSHI_DM_BisMasterInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b4a

Initialize DM BIS manager for operation as master



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x4a", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_AddDeviceToPerAdvList:


EMSHI_DM_AddDeviceToPerAdvList_
-------------------------------

**API usage:** 
``engine.send("EMSHI_DM_AddDeviceToPerAdvList", advAddrType=0xXx,AdvAddr=0xXx,advSid=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_AddDeviceToPerAdvList --advAddrType=0xXx --AdvAddr=0xXx --advSid=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b4b

Add device to periodic advertiser list



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x4b", "1", "<B", "|  No Description"
	"**advAddrType**", "", "1", "<B", "|  Advertiser address type"
	"**AdvAddr**", "", "0", "None", "|  Advertiser address"
	"**advSid**", "", "1", "<B", "|  Advertising SID"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_RemoveDeviceFromPerAdvList:


EMSHI_DM_RemoveDeviceFromPerAdvList_
------------------------------------

**API usage:** 
``engine.send("EMSHI_DM_RemoveDeviceFromPerAdvList", advAddrType=0xXx,AdvAddr=0xXx,advSid=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_RemoveDeviceFromPerAdvList --advAddrType=0xXx --AdvAddr=0xXx --advSid=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b4c

Remove device from periodic advertiser list



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x4c", "1", "<B", "|  No Description"
	"**advAddrType**", "", "1", "<B", "|  Advertiser address type"
	"**AdvAddr**", "", "0", "None", "|  Advertiser address"
	"**advSid**", "", "1", "<B", "|  Advertising SID"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ClearPerAdvList:


EMSHI_DM_ClearPerAdvList_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_ClearPerAdvList")``

**CLI usage:**
``blengine send EMSHI_DM_ClearPerAdvList``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b4d

DM clear periodic advertiser list



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x4d", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PastRptRcvEnable:


EMSHI_DM_PastRptRcvEnable_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_PastRptRcvEnable", syncId=0xXx,enableBits=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PastRptRcvEnable --syncId=0xXx --enableBits=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b4e

Enable or disable reports and duplicate filtering
  |               for the periodic advertising identified by the sync id



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x4e", "1", "<B", "|  No Description"
	"**syncId**", "", "1", "<B", "|  Sync identifier"
	"**enableBits**", "", "1", "<B", "|  Whether to enable or disable 
  |               reporting and duplicate filtering"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PastSyncTrsf:


EMSHI_DM_PastSyncTrsf_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_PastSyncTrsf", connId=0xXx,serviceData=0xXx,syncId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PastSyncTrsf --connId=0xXx --serviceData=0xXx --syncId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b4f

Send synchronization information about
  |               the periodic advertising identified by the sync id to a connected device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x4f", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**serviceData**", "", "2", "<H", "|  Service data Value provided by the Host"
	"**syncId**", "", "1", "<B", "|  Sync identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PastSetInfoTrsf:


EMSHI_DM_PastSetInfoTrsf_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_PastSetInfoTrsf", connId=0xXx,serviceData=0xXx,advHandle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PastSetInfoTrsf --connId=0xXx --serviceData=0xXx --advHandle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b50

Send synchronization information about
  |               the periodic advertising in an advertising set to a connected device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x50", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**serviceData**", "", "2", "<H", "|  Value provided by the Host"
	"**advHandle**", "", "1", "<B", "|  Advertising handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PastConfig:


EMSHI_DM_PastConfig_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_PastConfig", connId=0xXx,mode=0xXx,skip=0xXx,syncTimeout=0xXx,cteType=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PastConfig --connId=0xXx --mode=0xXx --skip=0xXx --syncTimeout=0xXx --cteType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b51

Specify how the Controller should process periodic
  |               advertising synchronization information received from the device identified
  |               by the connection handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x51", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**mode**", "", "1", "<B", "|  Action to be taken when periodic advertising info is received"
	"**skip**", "", "1", "<B", "|  Number of consecutive periodic advertising packets that the
  |               receiver may skip after successfully receiving a periodic advertising packet"
	"**syncTimeout**", "", "1", "<B", "|  Maximum permitted time between successful receives. If
  |               this time is exceeded, synchronization is lost"
	"**cteType**", "", "1", "<B", "|  Whether to only synchronize to periodic advertising with certain 
  |               types of Constant Tone Extension"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PastDefaultConfig:


EMSHI_DM_PastDefaultConfig_
---------------------------

**API usage:** 
``engine.send("EMSHI_DM_PastDefaultConfig", mode=0xXx,skip=0xXx,syncTimeout=0xXx,cteType=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PastDefaultConfig --mode=0xXx --skip=0xXx --syncTimeout=0xXx --cteType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b52

Specify the initial value for the mode, skip, timeout,
  |                and Constant Tone Extension type to be used for all subsequent connections
  |                over the LE transport



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x52", "1", "<B", "|  No Description"
	"**mode**", "", "1", "<B", "|  Action to be taken when periodic advertising info is received"
	"**skip**", "", "1", "<B", "|  Number of consecutive periodic advertising packets that
  |                the receiver may skip after successfully receiving a periodic advertising packet"
	"**syncTimeout**", "", "1", "<B", "|  "
	"**cteType**", "", "1", "<B", "|  "

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCteRxSampleStart:


EMSHI_DM_ConnCteRxSampleStart_
------------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCteRxSampleStart", connId=0xXx,slotDurations=0xXx,switchPatternLen=0xXx,AntennaIDs=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnCteRxSampleStart --connId=0xXx --slotDurations=0xXx --switchPatternLen=0xXx --AntennaIDs=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b53

Enable sampling received CTE fields
  |                on the specified connection, and configure the antenna switching pattern,
  |                and switching and sampling slot durations to be used



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x53", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**slotDurations**", "", "1", "<B", "|  Switching and sampling slot durations to be 
  |                used while receiving CTE"
	"**switchPatternLen**", "", "1", "<B", "|  Number of Antenna IDs in switching pattern"
	"**AntennaIDs**", "", "1", "<B", "|  List of Antenna IDs in switching pattern"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCteRxSampleStop:


EMSHI_DM_ConnCteRxSampleStop_
-----------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCteRxSampleStop", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnCteRxSampleStop --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b54

Disable sampling received CTE fields
  |                on the specified connection.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x54", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection Identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCteTxConfig:


EMSHI_DM_ConnCteTxConfig_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCteTxConfig", connId=0xXx,cteTypeBits=0xXx,switchPatternLen=0xXx,AntennaIDs=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnCteTxConfig --connId=0xXx --cteTypeBits=0xXx --switchPatternLen=0xXx --AntennaIDs=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b55

Configure the antenna switching pattern, 
  |               and permitted CTE types used for transmitting CTEs requested by the peer device
  |               on the specified connection.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x55", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**cteTypeBits**", "", "1", "<B", "|  Permitted CTE type bits
  |               used for transmitting CTEs requested by peer"
	"**switchPatternLen**", "", "1", "<B", "|  Number of Antenna IDs in switching pattern"
	"**AntennaIDs**", "", "1", "<B", "|  List of Antenna IDs in switching pattern"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCteReqStart:


EMSHI_DM_ConnCteReqStart_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCteReqStart", connId=0xXx,cteReqInt=0xXx,reqCteLen=0xXx,reqCteType=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnCteReqStart --connId=0xXx --cteReqInt=0xXx --reqCteLen=0xXx --reqCteType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b56

Initiate the CTE Request procedure on the specified connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x56", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**cteReqInt**", "", "1", "<B", "|  CTE request interval"
	"**reqCteLen**", "", "1", "<B", "|  Minimum length of CTE being requested in 8 us units"
	"**reqCteType**", "", "1", "<B", "|  Requested CTE type"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCteReqStop:


EMSHI_DM_ConnCteReqStop_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCteReqStop", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnCteReqStop --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b57

Stop initiating the CTE Request procedure
  |               on the specified connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x57", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCteRspStart:


EMSHI_DM_ConnCteRspStart_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCteRspStart", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnCteRspStart --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b58

Start responding to LL_CTE_REQ PDUs with LL_CTE_RSP PDUs
  |               on the specified connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x58", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCteRspStop:


EMSHI_DM_ConnCteRspStop_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCteRspStop", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnCteRspStop --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b59

Stop responding to LL_CTE_REQ PDUs with LL_CTE_RSP PDUs
  |               on the specified connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x59", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCteGetReqState:


EMSHI_DM_ConnCteGetReqState_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCteGetReqState", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnCteGetReqState --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b5a

Returns the device manager's CTE request state
  |               for a given connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x5a", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**state**", "1", "<B", "|  CTE request state"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCteGetRspState:


EMSHI_DM_ConnCteGetRspState_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCteGetRspState", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnCteGetRspState --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b5b

Returns the device manager's CTE response state
  |               for a given connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x5b", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**state**", "1", "<B", "|  CTE response state"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ReadAntennaInfo:


EMSHI_DM_ReadAntennaInfo_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_ReadAntennaInfo")``

**CLI usage:**
``blengine send EMSHI_DM_ReadAntennaInfo``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b5c

Read the switching rates, the sampling rates,
  |               the number of antennae, and the maximum length of a transmitted
  |               Constant Tone Extension supported by the Controller



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x5c", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnInit:


EMSHI_DM_ConnInit_
------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnInit")``

**CLI usage:**
``blengine send EMSHI_DM_ConnInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b5d

Initialize DM connection manager



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x5d", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnMasterInit:


EMSHI_DM_ConnMasterInit_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnMasterInit")``

**CLI usage:**
``blengine send EMSHI_DM_ConnMasterInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b5e

Initialize DM connection manager
  |               for operation as legacy master



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x5e", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ExtConnMasterInit:


EMSHI_DM_ExtConnMasterInit_
---------------------------

**API usage:** 
``engine.send("EMSHI_DM_ExtConnMasterInit")``

**CLI usage:**
``blengine send EMSHI_DM_ExtConnMasterInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b5f

Initialize DM connection manager
  |               for operation as extended master.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x5f", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnSlaveInit:


EMSHI_DM_ConnSlaveInit_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnSlaveInit")``

**CLI usage:**
``blengine send EMSHI_DM_ConnSlaveInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b60

Initialize DM connection manager 
  |               for operation as legacy slave.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x60", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ExtConnSlaveInit:


EMSHI_DM_ExtConnSlaveInit_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_ExtConnSlaveInit")``

**CLI usage:**
``blengine send EMSHI_DM_ExtConnSlaveInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b61

Initialize DM connection manager
  |               for operation as extended slave.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x61", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnRegister:


EMSHI_DM_ConnRegister_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnRegister", clientId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnRegister --clientId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b62

register with the DM connection manager



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x62", "1", "<B", "|  No Description"
	"**clientId**", "", "1", "<B", "|  The client identifier."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnOpen:


EMSHI_DM_ConnOpen_
------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnOpen", clientId=0xXx,initPhys=0xXx,addrType=0xXx,Addr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnOpen --clientId=0xXx --initPhys=0xXx --addrType=0xXx --Addr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b63

Open a connection to a peer device with the given address



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x63", "1", "<B", "|  No Description"
	"**clientId**", "", "1", "<B", "|  The client identifier"
	"**initPhys**", "", "1", "<B", "|  Initiator PHYs"
	"**addrType**", "", "1", "<B", "|  Address type"
	"**Addr**", "", "6", "mac", "|  Peer device address"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**connId**", "1", "<B", "|  The connId of the local device"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnClose:


EMSHI_DM_ConnClose_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnClose", clientId=0xXx,connId=0xXx,reason=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnClose --clientId=0xXx --connId=0xXx --reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b64

Close the connection with the give connection identifier



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x64", "1", "<B", "|  No Description"
	"**clientId**", "", "1", "<B", "|  The client identifier"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**reason**", "", "1", "<B", "|  Reason connection is being closed"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnAccept:


EMSHI_DM_ConnAccept_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnAccept", clientId=0xXx,advHandle=0xXx,advType=0xXx,duration=0xXx,maxEaEvents=0xXx,addrType=0xXx,Addr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnAccept --clientId=0xXx --advHandle=0xXx --advType=0xXx --duration=0xXx --maxEaEvents=0xXx --addrType=0xXx --Addr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b65

Accept a connection from the given peer device
  |                by initiating directed advertising



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x65", "1", "<B", "|  No Description"
	"**clientId**", "", "1", "<B", "|  client identifier."
	"**advHandle**", "", "1", "<B", "|  Advertising handle."
	"**advType**", "", "1", "<B", "|  Advertising type"
	"**duration**", "", "2", "<H", "|  Advertising duration (in ms)"
	"**maxEaEvents**", "", "1", "<B", "|  Maximum number of extended advertising events"
	"**addrType**", "", "1", "<B", "|  Address type"
	"**Addr**", "", "1", "<B", "|  Peer device address."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**connId**", "1", "<B", "|  Connection Id"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnUpdate:


EMSHI_DM_ConnUpdate_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnUpdate", connId=0xXx,connIntervalMin=0xXx,connIntervalMax=0xXx,connLatency=0xXx,supTimeout=0xXx,minCeLen=0xXx,maxCeLen=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnUpdate --connId=0xXx --connIntervalMin=0xXx --connIntervalMax=0xXx --connLatency=0xXx --supTimeout=0xXx --minCeLen=0xXx --maxCeLen=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b66





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x66", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  "
	"**connIntervalMin**", "", "2", "<H", "|  "
	"**connIntervalMax**", "", "2", "<H", "|  "
	"**connLatency**", "", "2", "<H", "|  "
	"**supTimeout**", "", "2", "<H", "|  "
	"**minCeLen**", "", "2", "<H", "|  "
	"**maxCeLen**", "", "2", "<H", "|  "

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnSetScanInterval:


EMSHI_DM_ConnSetScanInterval_
-----------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnSetScanInterval", scanInterval=0xXx,scanWindow=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnSetScanInterval --scanInterval=0xXx --scanWindow=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b67

Set the scan interval and window for connections
  |                to be created with DmConnOpen()



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x67", "1", "<B", "|  No Description"
	"**scanInterval**", "", "1", "<B", "|  Scan Interval"
	"**scanWindow**", "", "1", "<B", "|  Scan Window"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ExtConnSetScanInterval:


EMSHI_DM_ExtConnSetScanInterval_
--------------------------------

**API usage:** 
``engine.send("EMSHI_DM_ExtConnSetScanInterval", initPhys=0xXx,scanInterval_arr=0xXx,scanWindow_arr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ExtConnSetScanInterval --initPhys=0xXx --scanInterval_arr=0xXx --scanWindow_arr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b68

Set the scan interval and window for 
  |                extended connections to be created with DmConnOpen()



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x68", "1", "<B", "|  No Description"
	"**initPhys**", "", "1", "<B", "|  Initiator PHYs"
	"**scanInterval_arr**", "", "1", "<B", "|  Scan interval array"
	"**scanWindow_arr**", "", "1", "<B", "|  Scan window array"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnSetConnSpec:


EMSHI_DM_ConnSetConnSpec_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnSetConnSpec", connIntervalMin=0xXx,connIntervalMax=0xXx,connLatency=0xXx,supTimeout=0xXx,minCeLen=0xXx,maxCeLen=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnSetConnSpec --connIntervalMin=0xXx --connIntervalMax=0xXx --connLatency=0xXx --supTimeout=0xXx --minCeLen=0xXx --maxCeLen=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b69

Set the connection spec parameters for connections
  |               to be created with DmConnOpen()



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x69", "1", "<B", "|  No Description"
	"**connIntervalMin**", "", "2", "<H", "|  Connection Interval Minimum"
	"**connIntervalMax**", "", "2", "<H", "|  Connection Interval Maximum"
	"**connLatency**", "", "2", "<H", "|  Connection Latency"
	"**supTimeout**", "", "2", "<H", "|  Supervision timeout Value"
	"**minCeLen**", "", "2", "<H", "|  Minimum CE length"
	"**maxCeLen**", "", "2", "<H", "|  Maximum CE length"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ExtConnSetConnSpec:


EMSHI_DM_ExtConnSetConnSpec_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_ExtConnSetConnSpec", initPhys=0xXx,ConnSpec=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ExtConnSetConnSpec --initPhys=0xXx --ConnSpec=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b6a

Set the extended connection spec parameters
  |                for extended connections to be created with DmConnOpen()



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x6a", "1", "<B", "|  No Description"
	"**initPhys**", "", "1", "<B", "|  The initiator PHYs."
	"**ConnSpec**", "", "0", "None", "|  Connection spec parameters array"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnSetAddrType:


EMSHI_DM_ConnSetAddrType_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnSetAddrType", addrType=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnSetAddrType --addrType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b6b

Set the local address type used for connections
  |               created with DmConnOpen()



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x6b", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Address type"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnSetIdle:


EMSHI_DM_ConnSetIdle_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnSetIdle", connId=0xXx,idleMask=0xXx,idle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnSetIdle --connId=0xXx --idleMask=0xXx --idle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b6c

Configure a bit in the connection idle state mask as busy or idle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x6c", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**idleMask**", "", "2", "<H", "|  Bit in the idle state mask to configure"
	"**idle**", "", "1", "<B", "|  DM_CONN_BUSY or DM_CONN_IDLE"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnCheckIdle:


EMSHI_DM_ConnCheckIdle_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnCheckIdle", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnCheckIdle --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b6d

Check if a connection is idle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x6d", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**idleMask**", "1", "<B", "|  Zero if connection is idle, nonzero if busy"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnReadRssi:


EMSHI_DM_ConnReadRssi_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnReadRssi", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnReadRssi --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b6e

Read RSSI of a given connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x6e", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_RemoteConnParamReqReply:


EMSHI_DM_RemoteConnParamReqReply_
---------------------------------

**API usage:** 
``engine.send("EMSHI_DM_RemoteConnParamReqReply", connId=0xXx,connIntervalMin=0xXx,connIntervalMax=0xXx,connLatency=0xXx,supTimeout=0xXx,minCeLen=0xXx,maxCeLen=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_RemoteConnParamReqReply --connId=0xXx --connIntervalMin=0xXx --connIntervalMax=0xXx --connLatency=0xXx --supTimeout=0xXx --minCeLen=0xXx --maxCeLen=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b6f





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x6f", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  "
	"**connIntervalMin**", "", "2", "<H", "|  "
	"**connIntervalMax**", "", "2", "<H", "|  "
	"**connLatency**", "", "2", "<H", "|  "
	"**supTimeout**", "", "2", "<H", "|  "
	"**minCeLen**", "", "2", "<H", "|  "
	"**maxCeLen**", "", "2", "<H", "|  "

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_RemoteConnParamReqNegReply:


EMSHI_DM_RemoteConnParamReqNegReply_
------------------------------------

**API usage:** 
``engine.send("EMSHI_DM_RemoteConnParamReqNegReply", connId=0xXx,reason=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_RemoteConnParamReqNegReply --connId=0xXx --reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b70

Negative reply to the HCI remote 
  |                connection parameter request event



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x70", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**reason**", "", "1", "<B", "|  Reason for rejection"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnSetDataLen:


EMSHI_DM_ConnSetDataLen_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnSetDataLen", connId=0xXx,txOctets=0xXx,txTime=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnSetDataLen --connId=0xXx --txOctets=0xXx --txTime=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b71

Set data length for a given connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x71", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**txOctets**", "", "1", "<B", "|  Maximum number of payload octets for a Data PDU"
	"**txTime**", "", "1", "<B", "|  Maximum number of microseconds for a Data PDU"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnRole:


EMSHI_DM_ConnRole_
------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnRole", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnRole --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b72

Return the connection role indicating master or slave



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x72", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**connRole**", "1", "<B", "|  Connection role"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_WriteAuthPayloadTimeout:


EMSHI_DM_WriteAuthPayloadTimeout_
---------------------------------

**API usage:** 
``engine.send("EMSHI_DM_WriteAuthPayloadTimeout", connId=0xXx,timeout=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_WriteAuthPayloadTimeout --connId=0xXx --timeout=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b73

Set authenticated payload timeout for a given connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x73", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**timeout**", "", "2", "<H", "|  Timeout period in units of 10ms"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnRequestPeerSca:


EMSHI_DM_ConnRequestPeerSca_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnRequestPeerSca", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnRequestPeerSca --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b74

Request the Sleep Clock Accuracy (SCA) of a peer device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x74", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_EcuInit:


EMSHI_DM_EcuInit_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_EcuInit")``

**CLI usage:**
``blengine send EMSHI_DM_EcuInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b75





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x75", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_EcuSetDefSubrate:


EMSHI_DM_EcuSetDefSubrate_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_EcuSetDefSubrate", Subrate=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_EcuSetDefSubrate --Subrate=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b76





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x76", "1", "<B", "|  No Description"
	"**Subrate**", "", "0", "None", "|  "

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_EcuUpdateSubrate:


EMSHI_DM_EcuUpdateSubrate_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_EcuUpdateSubrate", connId=0xXx,Subrate=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_EcuUpdateSubrate --connId=0xXx --Subrate=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b77





.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x77", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  "
	"**Subrate**", "", "0", "None", "|  "

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisInit:


EMSHI_DM_CisInit_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_CisInit")``

**CLI usage:**
``blengine send EMSHI_DM_CisInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b78

Initialize DM Connected Isochronous Stream (CIS) manager



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x78", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisMasterInit:


EMSHI_DM_CisMasterInit_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_CisMasterInit")``

**CLI usage:**
``blengine send EMSHI_DM_CisMasterInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b79

Initialize DM Connected Isochronous Stream (CIS) 
  |                manager for operation as master



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x79", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisSlaveInit:


EMSHI_DM_CisSlaveInit_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_CisSlaveInit")``

**CLI usage:**
``blengine send EMSHI_DM_CisSlaveInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b7a

Initialize DM Connected Isochronous Stream (CIS)
  |                manager for operation as slave.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x7a", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisCigSetSduInterval:


EMSHI_DM_CisCigSetSduInterval_
------------------------------

**API usage:** 
``engine.send("EMSHI_DM_CisCigSetSduInterval", cigId=0xXx,sduIntervalMToS=0xXx,sduIntervalSToM=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisCigSetSduInterval --cigId=0xXx --sduIntervalMToS=0xXx --sduIntervalSToM=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b7b

Set the interval, in microseconds,
  |                of periodic SDUs for the given Connected Isochronous Group (CIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x7b", "1", "<B", "|  No Description"
	"**cigId**", "", "1", "<B", "|  CIG ID"
	"**sduIntervalMToS**", "", "4", "<L", "|  Time interval between start of 
  |                consecutive SDUs from master Host"
	"**sduIntervalSToM**", "", "4", "<L", "|  Time interval between start of 
  |                consecutive SDUs from slave Host"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisCigSetSca:


EMSHI_DM_CisCigSetSca_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_CisCigSetSca", cigId=0xXx,sca=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisCigSetSca --cigId=0xXx --sca=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b7c

Set the slaves clock accuracy for the given
  |               Connected Isochronous Group (CIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x7c", "1", "<B", "|  No Description"
	"**cigId**", "", "1", "<B", "|  CIG identifier"
	"**sca**", "", "1", "<B", "|  Slaves clck accuracy (0 if unknown)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisCigSetPackingFraming:


EMSHI_DM_CisCigSetPackingFraming_
---------------------------------

**API usage:** 
``engine.send("EMSHI_DM_CisCigSetPackingFraming", cigId=0xXx,packing=0xXx,framing=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisCigSetPackingFraming --cigId=0xXx --packing=0xXx --framing=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b7d

Set the packing scheme and
  |               framing format for the given Connected Isochronous Group (CIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x7d", "1", "<B", "|  No Description"
	"**cigId**", "", "1", "<B", "|  CIG identifier"
	"**packing**", "", "1", "<B", "|  Packing scheme"
	"**framing**", "", "1", "<B", "|  Indicates format of CIS Data PDUs"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisCigSetTransLatInterval:


EMSHI_DM_CisCigSetTransLatInterval_
-----------------------------------

**API usage:** 
``engine.send("EMSHI_DM_CisCigSetTransLatInterval", cigId=0xXx,transLatMToS=0xXx,transLatSToM=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisCigSetTransLatInterval --cigId=0xXx --transLatMToS=0xXx --transLatSToM=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b7e

Set the maximum transport latency,
  |               in microseconds, for the given Connected Isochronous Group (CIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x7e", "1", "<B", "|  No Description"
	"**cigId**", "", "1", "<B", "|  CIG identifier"
	"**transLatMToS**", "", "1", "<B", "|  Maximum time for SDU to be transported 
  |                         from master Controller to slave Controller"
	"**transLatSToM**", "", "1", "<B", "|  Maximum time for SDU to be transported
  |                         from slave Controller to master Controller"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisCigConfig:


EMSHI_DM_CisCigConfig_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_CisCigConfig", cigId=0xXx,numCis=0xXx,CisParam=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisCigConfig --cigId=0xXx --numCis=0xXx --CisParam=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b7f

Set the parameters of one or more
  |               Connected Isochronous Streams (CISes) that are associated with
  |               the given Connected Isochronous Group (CIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x7f", "1", "<B", "|  No Description"
	"**cigId**", "", "1", "<B", "|  CIG identifier"
	"**numCis**", "", "1", "<B", "|  Number of CIS to be configured"
	"**CisParam**", "", "0", "None", "|  CIS parameters"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisCigRemove:


EMSHI_DM_CisCigRemove_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_CisCigRemove", cigId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisCigRemove --cigId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b80

Remove all the Connected Isochronous Streams (CISes) 
  |              associated with the given Connected Isochronous Group (CIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x80", "1", "<B", "|  No Description"
	"**cigId**", "", "1", "<B", "|  CIG identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisOpen:


EMSHI_DM_CisOpen_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_CisOpen", numCis=0xXx,CisHandle_arr=0xXx,ConnId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisOpen --numCis=0xXx --CisHandle_arr=0xXx --ConnId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b81

Create one or more Connected Isochronous Streams (CISes)
  |               using the connections identified by the ACL connection handles



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x81", "1", "<B", "|  No Description"
	"**numCis**", "", "1", "<B", "|  Total number of CISes to be created"
	"**CisHandle_arr**", "", "2", "<H", "|  List of connection handles of CISes"
	"**ConnId**", "", "0", "None", "|  List of DM connection identifiers"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisAccept:


EMSHI_DM_CisAccept_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_CisAccept", handle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisAccept --handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b82

Inform the Controller to accept the request
  |               for the Connected Isochronous Stream (CIS) that is identified by the connection handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x82", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  Connection handle of the CIS"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisReject:


EMSHI_DM_CisReject_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_CisReject", handle=0xXx,reason=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisReject --handle=0xXx --reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b83

Inform the Controller to reject the request
  |               for the Connected Isochronous Stream (CIS) that is identified by the connection handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x83", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  Connection handle of the CIS to be rejected"
	"**reason**", "", "1", "<B", "|  Reason the CIS request was rejected"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisClose:


EMSHI_DM_CisClose_
------------------

**API usage:** 
``engine.send("EMSHI_DM_CisClose", handle=0xXx,reason=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisClose --handle=0xXx --reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b84

Close the Connected Isochronous Stream (CIS)
  |               connection with the given handle.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x84", "1", "<B", "|  No Description"
	"**handle**", "", "2", "<H", "|  CIS connection handle"
	"**reason**", "", "1", "<B", "|  Reason connection is being closed"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisIdByHandle:


EMSHI_DM_CisIdByHandle_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_CisIdByHandle", handle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisIdByHandle --handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b85

For internal use only. Find the
  |               Connected Isochronous Stream (CIS) ID with matching handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x85", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  CIS connection handle"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**cisId**", "1", "<B", "|  CIS identifier or DM_CIS_ID_NONE if error"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisHandleById:


EMSHI_DM_CisHandleById_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_CisHandleById", cigId=0xXx,cisId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisHandleById --cigId=0xXx --cisId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b86

For internal use only.
  |               Find the Connected Isochronous Stream (CIS) handle with matching CIG and CIS identifiers



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x86", "1", "<B", "|  No Description"
	"**cigId**", "", "1", "<B", "|  CIG ID"
	"**cisId**", "", "1", "<B", "|  CIS ID"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**connHandle**", "2", "<H", "|  CIS connection handle or DM_CONN_HCI_HANDLE_NONE if error"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisConnInUse:


EMSHI_DM_CisConnInUse_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_CisConnInUse", handle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisConnInUse --handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b87

For internal use only. Return TRUE if 
  |                the Connected Isochronous Stream (CIS) connection is in use



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x87", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  CIS connection handle"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**state**", "1", "<B", "|  TRUE if the CIS connection is in use,FALSE otherwise"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisConnRole:


EMSHI_DM_CisConnRole_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_CisConnRole", handle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisConnRole --handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b88

For internal use only.Return the CIS connection role
  |                indicating master or slave.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x88", "1", "<B", "|  No Description"
	"**handle**", "", "2", "<H", "|  CIS connection handle"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**role**", "1", "<B", "|  CIS connection role"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisCigInUse:


EMSHI_DM_CisCigInUse_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_CisCigInUse", cigId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisCigInUse --cigId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b89

For internal use only.Return TRUE if
  |              Connected Isochronous Group (CIG) is in use



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x89", "1", "<B", "|  No Description"
	"**cigId**", "", "1", "<B", "|  CIG identifier"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**state**", "1", "<B", "|  TRUE if CIG is in use,
  |              FALSE otherwise"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_CisInUse:


EMSHI_DM_CisInUse_
------------------

**API usage:** 
``engine.send("EMSHI_DM_CisInUse", cigId=0xXx,cisId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_CisInUse --cigId=0xXx --cisId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b8a

For internal use only.Return TRUE if 
  |              the Connected Isochronous Stream (CIS) connection is in use



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x8a", "1", "<B", "|  No Description"
	"**cigId**", "", "1", "<B", "|  "
	"**cisId**", "", "1", "<B", "|  "


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**state**", "1", "<B", "|  TRUE if the CIS connection
  |              is in use, FALSE otherwise"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BisSlaveInit:


EMSHI_DM_BisSlaveInit_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_BisSlaveInit")``

**CLI usage:**
``blengine send EMSHI_DM_BisSlaveInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b8b

Initialize DM BIS manager for operation as slave



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x8b", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigStart:


EMSHI_DM_BigStart_
------------------

**API usage:** 
``engine.send("EMSHI_DM_BigStart", bigHandle=0xXx,advHandle=0xXx,numBis=0xXx,sduInterUsec=0xXx,maxSdu=0xXx,mtlMs=0xXx,rtn=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigStart --bigHandle=0xXx --advHandle=0xXx --numBis=0xXx --sduInterUsec=0xXx --maxSdu=0xXx --mtlMs=0xXx --rtn=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b8c

Start a Broadcast Isochronous Group (BIG)
  |               with one or more Broadcast Isochronous Streams (BISes)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x8c", "1", "<B", "|  No Description"
	"**bigHandle**", "", "1", "<B", "|  BIG identifier."
	"**advHandle**", "", "1", "<B", "|  Used to identify the periodic advertising train"
	"**numBis**", "", "1", "<B", "|  Total number of BISes in the BIG"
	"**sduInterUsec**", "", "1", "<B", "|  Interval, in microseconds of BIG SDUs"
	"**maxSdu**", "", "1", "<B", "|  Maximum size of SDU"
	"**mtlMs**", "", "1", "<B", "|  Maximum time, in milliseconds, for transmitting SDU."
	"**rtn**", "", "1", "<B", "|  Retransmission number"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigStop:


EMSHI_DM_BigStop_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_BigStop", bigHandle=0xXx,reason=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigStop --bigHandle=0xXx --reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b8d

Stop a Broadcast Isochronous Group (BIG)
  |               identified for the given handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x8d", "1", "<B", "|  No Description"
	"**bigHandle**", "", "1", "<B", "|  BIG handle"
	"**reason**", "", "1", "<B", "|  Reason BIG is terminated"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BisInUse:


EMSHI_DM_BisInUse_
------------------

**API usage:** 
``engine.send("EMSHI_DM_BisInUse", handle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BisInUse --handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b8e

For internal use only.Return TRUE if the BIS is in use



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x8e", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  BIG handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigSetPhy:


EMSHI_DM_BigSetPhy_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_BigSetPhy", bigHandle=0xXx,phyBits=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigSetPhy --bigHandle=0xXx --phyBits=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b8f

Set the PHYs used for transmission of PDUs
  |                of Broadcast Isochronous Streams (BISes) in Broadcast Isochronous Group (BIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x8f", "1", "<B", "|  No Description"
	"**bigHandle**", "", "1", "<B", "|  BIG handle"
	"**phyBits**", "", "1", "<B", "|  PHY bit field"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigSetPackingFraming:


EMSHI_DM_BigSetPackingFraming_
------------------------------

**API usage:** 
``engine.send("EMSHI_DM_BigSetPackingFraming", bigHandle=0xXx,packing=0xXx,framing=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigSetPackingFraming --bigHandle=0xXx --packing=0xXx --framing=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b90

Set the packing scheme and framing format
  |               for the given Broadcast Isochronous Group (BIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x90", "1", "<B", "|  No Description"
	"**bigHandle**", "", "1", "<B", "|  BIG handle."
	"**packing**", "", "1", "<B", "|  Packing scheme"
	"**framing**", "", "1", "<B", "|  Indicates format of BIS Data PDUs"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigSetBcastCode:


EMSHI_DM_BigSetBcastCode_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_BigSetBcastCode", bigHandle=0xXx,encrypt=0xXx,authen=0xXx,BcastCode=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigSetBcastCode --bigHandle=0xXx --encrypt=0xXx --authen=0xXx --BcastCode=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b91

Set the Broadcast Code for the given Broadcast
  |                Isochronous Group (BIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x91", "1", "<B", "|  No Description"
	"**bigHandle**", "", "1", "<B", "|  BIG handle"
	"**encrypt**", "", "1", "<B", "|  FALSE (Unencrypted) or TRUE (Encrypted)"
	"**authen**", "", "1", "<B", "|  FALSE (Unauthenticated) or TRUE (Authenticated)"
	"**BcastCode**", "", "0", "None", "|  Broadcast code"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigSetSecLevel:


EMSHI_DM_BigSetSecLevel_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_BigSetSecLevel", bigHandle=0xXx,secLevel=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigSetSecLevel --bigHandle=0xXx --secLevel=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b92

Set the security level of the LE Security Mode 3 for
  |               the given Broadcast Isochronous Group(BIG)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x92", "1", "<B", "|  No Description"
	"**bigHandle**", "", "1", "<B", "|  Big Handle"
	"**secLevel**", "", "1", "<B", "|  Security Level"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_BigGetSecLevel:


EMSHI_DM_BigGetSecLevel_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_BigGetSecLevel", handle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_BigGetSecLevel --handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b93

Get the security level of the LE Security Mode 3 for
  |               the given Broadcast Isochronous Group (BIG) connection handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x93", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  BIS connection handle"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_IsoInit:


EMSHI_DM_IsoInit_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_IsoInit")``

**CLI usage:**
``blengine send EMSHI_DM_IsoInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b94

Initialize DM ISO manager



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x94", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_IsoRegister:


EMSHI_DM_IsoRegister_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_IsoRegister", cisCback=0xXx,bisCback=0xXx,setupCback=0xXx,removeCback=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_IsoRegister --cisCback=0xXx --bisCback=0xXx --setupCback=0xXx --removeCback=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b95

Register CIS, BIS and setup callbacks for the HCI ISO data path.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x95", "1", "<B", "|  No Description"
	"**cisCback**", "", "1", "<B", "|  CIS data callback function (may be NULL)"
	"**bisCback**", "", "1", "<B", "|  BIS data callback function (may be NULL)"
	"**setupCback**", "", "1", "<B", "|  ISO data path setup callback function
  |                        (NULL when the codec in the LL)"
	"**removeCback**", "", "1", "<B", "|  ISO data path remove callback function (NULL when
  |                        the codec in the LL)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_IsoDataPathSetup:


EMSHI_DM_IsoDataPathSetup_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_IsoDataPathSetup", DataPathParam=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_IsoDataPathSetup --DataPathParam=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b96

Setup the isochronous data path between the Host and the Controller
  |              for an established Connected Isochronous Stream (CIS) or 
  |              Broadcast Isochronous Stream (BIS) identified by the connection handle parameter



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x96", "1", "<B", "|  No Description"
	"**DataPathParam**", "", "1", "<B", "|  Parameters to setup ISO data path"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_IsoDataPathRemove:


EMSHI_DM_IsoDataPathRemove_
---------------------------

**API usage:** 
``engine.send("EMSHI_DM_IsoDataPathRemove", handle=0xXx,directionBits=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_IsoDataPathRemove --handle=0xXx --directionBits=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b97

Remove the input and/or output data path(s) associated 
  |              with a Connected Isochronous Stream(CIS) or Broadcast Isochronous Stream (BIS)
  |              identified by the connection handle parameter



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x97", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  Connection handle of CIS or BIS"
	"**directionBits**", "", "1", "<B", "|  Data path direction bits"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ReadIsoLinkQual:


EMSHI_DM_ReadIsoLinkQual_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_ReadIsoLinkQual", pDataPathParam=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ReadIsoLinkQual --pDataPathParam=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b98

Read the values of various counters related to link quality
  |             that are associated with the isochronous stream specified by the connection handle parameter



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x98", "1", "<B", "|  No Description"
	"**pDataPathParam**", "", "1", "<B", "|  Connection handle
  |             of CIS (on Central or Peripheral) or BIS (on Synchronized Receiver)"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DataPathConfig:


EMSHI_DM_DataPathConfig_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_DataPathConfig", DataPathParam=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_DataPathConfig --DataPathParam=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b99

Request the Controller to configure the data transport path
  |              in a given direction between the Controller and the Host



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x99", "1", "<B", "|  No Description"
	"**DataPathParam**", "", "1", "<B", "|  Parameters for configuring data path"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ReadLocalSupCodecs:


EMSHI_DM_ReadLocalSupCodecs_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_ReadLocalSupCodecs")``

**CLI usage:**
``blengine send EMSHI_DM_ReadLocalSupCodecs``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b9a

Read a list of the codecs supported by the Controller,
  |             as well as vendor specific codecs, which are defined by an individual manufacturer



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x9a", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ReadLocalSupCodecCap:


EMSHI_DM_ReadLocalSupCodecCap_
------------------------------

**API usage:** 
``engine.send("EMSHI_DM_ReadLocalSupCodecCap", CodecParam=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ReadLocalSupCodecCap --CodecParam=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b9b

Read a list of codec capabilities supported
  |             by the Controller for a given codec



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x9b", "1", "<B", "|  No Description"
	"**CodecParam**", "", "1", "<B", "|  Parameters for reading local 
  |             supported codec capabilities."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ReadLocalSupCtrDly:


EMSHI_DM_ReadLocalSupCtrDly_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_ReadLocalSupCtrDly", DelayParam=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ReadLocalSupCtrDly --DelayParam=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b9c

Read the range of supported Controller delays for
  |              the codec specified by Codec ID on a given transport type specified by Logical Transport Type,
  |              in the direction specified by Direction,and with the codec configuration 
  |              specified by Codec Configuration



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x9c", "1", "<B", "|  No Description"
	"**DelayParam**", "", "1", "<B", "|  Parameter for reading local supported controller delay"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SendIsoData:


EMSHI_DM_SendIsoData_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_SendIsoData", handle=0xXx,len=0xXx,pData=0xXx,useTs=0xXx,ts=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SendIsoData --handle=0xXx --len=0xXx --pData=0xXx --useTs=0xXx --ts=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b9d

Send ISO Data packet



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x9d", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  ISO Handle to send data"
	"**len**", "", "1", "<B", "|  Length of data (Excluding header)"
	"**pData**", "", "1", "<B", "|  Pointer to start of ISO buffer"
	"**useTs**", "", "1", "<B", "|  TBD."
	"**ts**", "", "1", "<B", "|  TBD."

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SetDefaultPhy:


EMSHI_DM_SetDefaultPhy_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_SetDefaultPhy", allPhys=0xXx,txPhys=0xXx,rxPhys=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SetDefaultPhy --allPhys=0xXx --txPhys=0xXx --rxPhys=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b9e

Set the preferred values for the transmitter PHY
  |             and receiver PHY for all subsequent connections



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x9e", "1", "<B", "|  No Description"
	"**allPhys**", "", "1", "<B", "|  All PHYs preferences"
	"**txPhys**", "", "1", "<B", "|  Preferred transmitter PHYs"
	"**rxPhys**", "", "1", "<B", "|  Preferred receiver PHYs"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ReadPhy:


EMSHI_DM_ReadPhy_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_ReadPhy", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ReadPhy --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8b9f

Read the current transmitter PHY and receiver PHY for a given connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0x9f", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SetPhy:


EMSHI_DM_SetPhy_
----------------

**API usage:** 
``engine.send("EMSHI_DM_SetPhy", connId=0xXx,allPhys=0xXx,txPhys=0xXx,rxPhys=0xXx,phyOptions=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SetPhy --connId=0xXx --allPhys=0xXx --txPhys=0xXx --rxPhys=0xXx --phyOptions=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8ba0

Set the PHY preferences for a given connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xa0", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"
	"**allPhys**", "", "1", "<B", "|  All PHYs preferences"
	"**txPhys**", "", "1", "<B", "|  Preferred transmitter PHYs"
	"**rxPhys**", "", "1", "<B", "|  Preferred receiver PHYs"
	"**phyOptions**", "", "1", "<B", "|  PHY options"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PhyInit:


EMSHI_DM_PhyInit_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_PhyInit")``

**CLI usage:**
``blengine send EMSHI_DM_PhyInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8ba1

Initialize DM PHY



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xa1", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevReset:


EMSHI_DM_DevReset_
------------------

**API usage:** 
``engine.send("EMSHI_DM_DevReset")``

**CLI usage:**
``blengine send EMSHI_DM_DevReset``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8ba2

Reset the device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xa2", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevSetRandAddr:


EMSHI_DM_DevSetRandAddr_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_DevSetRandAddr", pAddr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_DevSetRandAddr --pAddr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8ba3

Set the random address to be used by the local device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xa3", "1", "<B", "|  No Description"
	"**pAddr**", "", "6", "mac", "|  Random address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevWhiteListAdd:


EMSHI_DM_DevWhiteListAdd_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_DevWhiteListAdd", addrType=0xXx,Addr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_DevWhiteListAdd --addrType=0xXx --Addr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8ba4

Add a peer device to the white list.
  |               Note that this function cannot be called while advertising, scanning, or connecting 
  |               with white list filtering active



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xa4", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Address type"
	"**Addr**", "", "6", "mac", "|  Peer device address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevWhiteListRemove:


EMSHI_DM_DevWhiteListRemove_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_DevWhiteListRemove", addrType=0xXx,Addr=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_DevWhiteListRemove --addrType=0xXx --Addr=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8ba5

Remove a peer device from the white list.
  |              Note that this function cannot be called while advertising, scanning, or connecting
  |               with white list filtering active



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xa5", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Address type"
	"**Addr**", "", "0", "None", "|  Peer device address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevWhiteListClear:


EMSHI_DM_DevWhiteListClear_
---------------------------

**API usage:** 
``engine.send("EMSHI_DM_DevWhiteListClear")``

**CLI usage:**
``blengine send EMSHI_DM_DevWhiteListClear``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8ba6

Clear the white list.Note that this function
  |               cannot be called while advertising, scanning, or connecting with white list filtering active



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xa6", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevSetFilterPolicy:


EMSHI_DM_DevSetFilterPolicy_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_DevSetFilterPolicy", mode=0xXx,policy=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_DevSetFilterPolicy --mode=0xXx --policy=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8ba7

Set the Advertising, Scanning or Initiator filter policy.
  |                *TRUE if the filter policy was successfully set, FALSE otherwise



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xa7", "1", "<B", "|  No Description"
	"**mode**", "", "1", "<B", "|  Policy mode"
	"**policy**", "", "1", "<B", "|  Filter policy"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevSetExtFilterPolicy:


EMSHI_DM_DevSetExtFilterPolicy_
-------------------------------

**API usage:** 
``engine.send("EMSHI_DM_DevSetExtFilterPolicy", advHandle=0xXx,mode=0xXx,policy=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_DevSetExtFilterPolicy --advHandle=0xXx --mode=0xXx --policy=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8ba8

Set the Advertising filter policy for the given
  |               advertising, Scanning or Initiator filter policy



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xa8", "1", "<B", "|  No Description"
	"**advHandle**", "", "1", "<B", "|  Advertising handle(only applicable to advertising)"
	"**mode**", "", "1", "<B", "|  Policy mode"
	"**policy**", "", "1", "<B", "|  Filter policy"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**state**", "1", "<B", "|  TRUE if the extended Filter Policy is in use,
  |               FALSE otherwise"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_DevVsInit:


EMSHI_DM_DevVsInit_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_DevVsInit", param=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_DevVsInit --param=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8ba9

Vendor-specific controller initialization function



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xa9", "1", "<B", "|  No Description"
	"**param**", "", "1", "<B", "|  Vendor-specific parameter"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecInit:


EMSHI_DM_SecInit_
-----------------

**API usage:** 
``engine.send("EMSHI_DM_SecInit")``

**CLI usage:**
``blengine send EMSHI_DM_SecInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8baa

Initialize DM security



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xaa", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecLescInit:


EMSHI_DM_SecLescInit_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_SecLescInit")``

**CLI usage:**
``blengine send EMSHI_DM_SecLescInit``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bab

Initialize DM LE Secure Connections security



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xab", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecPairReq:


EMSHI_DM_SecPairReq_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_SecPairReq", connId=0xXx,oob=0xXx,auth=0xXx,iKeyDist=0xXx,rKeyDist=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecPairReq --connId=0xXx --oob=0xXx --auth=0xXx --iKeyDist=0xXx --rKeyDist=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bac

This function is called by a master device to initiate pairing



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xac", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID"
	"**oob**", "", "1", "<B", "|  Out-of-band pairing data present or not present"
	"**auth**", "", "1", "<B", "|  Authentication and bonding flags"
	"**iKeyDist**", "", "1", "<B", "|  Initiator key distribution flags"
	"**rKeyDist**", "", "1", "<B", "|  Responder key distribution flags"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecPairRsp:


EMSHI_DM_SecPairRsp_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_SecPairRsp", connId=0xXx,oob=0xXx,auth=0xXx,iKeyDist=0xXx,rKeyDist=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecPairRsp --connId=0xXx --oob=0xXx --auth=0xXx --iKeyDist=0xXx --rKeyDist=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bad

This function is called by a slave device to proceed with pairing
  |                after a DM_SEC_PAIR_IND event is received



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xad", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID"
	"**oob**", "", "1", "<B", "|  Out-of-band pairing data present or not present"
	"**auth**", "", "1", "<B", "|  Authentication and bonding flags"
	"**iKeyDist**", "", "1", "<B", "|  Initiator key distribution flags"
	"**rKeyDist**", "", "1", "<B", "|  Responder key distribution flags"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecCancelReq:


EMSHI_DM_SecCancelReq_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_SecCancelReq", connId=0xXx,reason=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecCancelReq --connId=0xXx --reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bae

This function is called to cancel the pairing process



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xae", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID."
	"**reason**", "", "1", "<B", "|  Failure Reason"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecAuthRsp:


EMSHI_DM_SecAuthRsp_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_SecAuthRsp", connId=0xXx,authDataLen=0xXx,AuthData=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecAuthRsp --connId=0xXx --authDataLen=0xXx --AuthData=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8baf

This function is called in response to a DM_SEC_AUTH_REQ_IND
  |                event to provide PIN or OOB data during pairing



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xaf", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID"
	"**authDataLen**", "", "1", "<B", "|  Length of PIN or OOB data"
	"**AuthData**", "", "0", "None", "|  PIN or OOB data"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecSlaveReq:


EMSHI_DM_SecSlaveReq_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_SecSlaveReq", connId=0xXx,auth=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecSlaveReq --connId=0xXx --auth=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bb0

This function is called by a slave device to request
  |               that the master initiates pairing or link encryption



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xb0", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID"
	"**auth**", "", "1", "<B", "|  Authentication flags"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecEncryptReq:


EMSHI_DM_SecEncryptReq_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_SecEncryptReq", connId=0xXx,secLevel=0xXx,Ltk=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecEncryptReq --connId=0xXx --secLevel=0xXx --Ltk=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bb1

This function is called by a master device to initiate link encryption



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xb1", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID"
	"**secLevel**", "", "1", "<B", "|  Security level of pairing when key was exchanged"
	"**Ltk**", "", "16", "<16s", "|  Pointer to LTK parameter structure"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecLtkRsp:


EMSHI_DM_SecLtkRsp_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_SecLtkRsp", connId=0xXx,keyFound=0xXx,secLevel=0xXx,Key=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecLtkRsp --connId=0xXx --keyFound=0xXx --secLevel=0xXx --Key=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bb2

This function is called by a slave in response
  |                to a DM_SEC_LTK_REQ_IND event to provide the key used for encryption



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xb2", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID"
	"**keyFound**", "", "1", "<B", "|  TRUE if key found"
	"**secLevel**", "", "1", "<B", "|  Security level of pairing when key was exchanged"
	"**Key**", "", "0", "None", "|  Key array"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecSetLocalCsrk:


EMSHI_DM_SecSetLocalCsrk_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_SecSetLocalCsrk", Csrk=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecSetLocalCsrk --Csrk=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bb3

This function sets the local CSRK used by the device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xb3", "1", "<B", "|  No Description"
	"**Csrk**", "", "0", "None", "|  Pointer to CSRK"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecSetLocalIrk:


EMSHI_DM_SecSetLocalIrk_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_SecSetLocalIrk", Irk=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecSetLocalIrk --Irk=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bb4

This function sets the local IRK used by the device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xb4", "1", "<B", "|  No Description"
	"**Irk**", "", "0", "None", "|  local IRK"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecSetLocalIdentityAddr:


EMSHI_DM_SecSetLocalIdentityAddr_
---------------------------------

**API usage:** 
``engine.send("EMSHI_DM_SecSetLocalIdentityAddr", identityAddr=0xXx,addrType=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecSetLocalIdentityAddr --identityAddr=0xXx --addrType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bb5

This function sets the local identity address used by the device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xb5", "1", "<B", "|  No Description"
	"**identityAddr**", "", "0", "None", "|  Local identity address"
	"**addrType**", "", "1", "<B", "|  Local identity address type"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecGenerateEccKeyReq:


EMSHI_DM_SecGenerateEccKeyReq_
------------------------------

**API usage:** 
``engine.send("EMSHI_DM_SecGenerateEccKeyReq")``

**CLI usage:**
``blengine send EMSHI_DM_SecGenerateEccKeyReq``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bb6

This function generates an ECC key for use with LESC security



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xb6", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecSetEccKey:


EMSHI_DM_SecSetEccKey_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_SecSetEccKey", Key=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecSetEccKey --Key=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bb7

This function sets the local ECC key for use with LESC security



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xb7", "1", "<B", "|  No Description"
	"**Key**", "", "0", "None", "|  local ECC Key"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecGetEccKey:


EMSHI_DM_SecGetEccKey_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_SecGetEccKey")``

**CLI usage:**
``blengine send EMSHI_DM_SecGetEccKey``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bb8

This function gets the local ECC key for use with LESC security



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xb8", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecSetDebugEccKey:


EMSHI_DM_SecSetDebugEccKey_
---------------------------

**API usage:** 
``engine.send("EMSHI_DM_SecSetDebugEccKey")``

**CLI usage:**
``blengine send EMSHI_DM_SecSetDebugEccKey``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bb9

This function sets the ECC key for use with LESC security to standard debug keys values



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xb9", "1", "<B", "|  No Description"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecSetOob:


EMSHI_DM_SecSetOob_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_SecSetOob", connId=0xXx,localRandom=0xXx,localConfirm=0xXx,peerRandom=0xXx,peerConfirm=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecSetOob --connId=0xXx --localRandom=0xXx --localConfirm=0xXx --peerRandom=0xXx --peerConfirm=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bba

This function records the peer random value and peer confirm value
  |               exchanged via out-of-band (OOB) methods



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xba", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  ID of the connection"
	"**localRandom**", "", "16", "<16s", "|  Random value of the local device"
	"**localConfirm**", "", "16", "<16s", "|  Confirm value of the local device"
	"**peerRandom**", "", "16", "<16s", "|  Random value of the peer device"
	"**peerConfirm**", "", "16", "<16s", "|  Confirm value of the peer device"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecCalcOobReq:


EMSHI_DM_SecCalcOobReq_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_SecCalcOobReq", Rand=0xXx,PubKeyX=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecCalcOobReq --Rand=0xXx --PubKeyX=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bbb

This function calcualtes the local random and confirm values
  |               used in LESC OOB pairing



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xbb", "1", "<B", "|  No Description"
	"**Rand**", "", "0", "None", "|  Random value used in calculation"
	"**PubKeyX**", "", "0", "None", "|  X component of the local public key"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecCompareRsp:


EMSHI_DM_SecCompareRsp_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_SecCompareRsp", connId=0xXx,valid=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecCompareRsp --connId=0xXx --valid=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bbc

This function is called by the application in response
  |               to a DM_SEC_COMPARE_IND event.The valid parameter indicates if the compare value
  |               of the DM_SEC_COMPARE_IND was valid



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xbc", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  ID of the connection"
	"**valid**", "", "1", "<B", "|  TRUE if compare value was valid"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecGetCompareValue:


EMSHI_DM_SecGetCompareValue_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_SecGetCompareValue", confirmVal=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SecGetCompareValue --confirmVal=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bbd

This function returns the 6-digit compare value
  |               for the specified 128-bit confirm value



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xbd", "1", "<B", "|  No Description"
	"**confirmVal**", "", "4", "<L", "|  128-bit comfirm value."


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**cmpValue**", "0", "None", "|  Set Adv Value status"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_LlAddrType:


EMSHI_DM_LlAddrType_
--------------------

**API usage:** 
``engine.send("EMSHI_DM_LlAddrType", addrType=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_LlAddrType --addrType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bbe

Map an address type to a type used by LL



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xbe", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Address type used by LL"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**advType**", "1", "<B", "|  Get Adv type Value"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_HostAddrType:


EMSHI_DM_HostAddrType_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_HostAddrType", addrType=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_HostAddrType --addrType=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bbf

Map an address type to a type used by Host



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xbf", "1", "<B", "|  No Description"
	"**addrType**", "", "1", "<B", "|  Address type used by HOST"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**advType**", "1", "<B", "|  Get Adv type Value"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SizeOfEvt:


EMSHI_DM_SizeOfEvt_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_SizeOfEvt", DmEvt=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SizeOfEvt --DmEvt=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bc0

size of a DM callback event



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xc0", "1", "<B", "|  No Description"
	"**DmEvt**", "", "1", "<B", "|  DM callback event"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**evtSize**", "2", "<H", "|  return Size of Event"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_L2cConnUpdateCnf:


EMSHI_DM_L2cConnUpdateCnf_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_L2cConnUpdateCnf", handle=0xXx,reason=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_L2cConnUpdateCnf --handle=0xXx --reason=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bc1

For internal use only.L2C calls
  |               this function to send the result of an L2CAP connection update response to DM



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xc1", "1", "<B", "|  No Description"
	"**handle**", "", "2", "<H", "|  Connection handle"
	"**reason**", "", "2", "<H", "|  Connection update result code"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_L2cCmdRejInd:


EMSHI_DM_L2cCmdRejInd_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_L2cCmdRejInd", handle=0xXx,result=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_L2cCmdRejInd --handle=0xXx --result=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bc2

For internal use only. L2C calls this function
  |               to send the result of an L2CAP. Command Reject indication up to the application



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xc2", "1", "<B", "|  No Description"
	"**handle**", "", "2", "<H", "|  Connection handle"
	"**result**", "", "2", "<H", "|  Connection update result code"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_L2cConnUpdateInd:


EMSHI_DM_L2cConnUpdateInd_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_L2cConnUpdateInd", identifier=0xXx,handle=0xXx,ConnSpec=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_L2cConnUpdateInd --identifier=0xXx --handle=0xXx --ConnSpec=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bc3

For internal use only.L2C calls this function
  |              when it receives a connection update request from a peer device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xc3", "1", "<B", "|  No Description"
	"**identifier**", "", "1", "<B", "|  Identifier value"
	"**handle**", "", "2", "<H", "|  Connection handle"
	"**ConnSpec**", "", "0", "None", "|  Connection spec parameters"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnIdByHandle:


EMSHI_DM_ConnIdByHandle_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnIdByHandle", handle=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnIdByHandle --handle=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bc4

For internal use only. Find the connection ID
  |                with matching handle



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xc4", "1", "<B", "|  No Description"
	"**handle**", "", "1", "<B", "|  Handle to find"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**connId**", "1", "<B", "|  Connection ID or DM_CONN_ID_NONE if error"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnInUse:


EMSHI_DM_ConnInUse_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnInUse", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnInUse --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bc5

For internal use only.Return TRUE if the connection is in use



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xc5", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection ID"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**connState**", "1", "<B", "|  TRUE if the connection is in use,FALSE otherwise"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnPeerAddrType:


EMSHI_DM_ConnPeerAddrType_
--------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnPeerAddrType", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnPeerAddrType --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bc6

For internal use only.Return the peer address type



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xc6", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  "


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**addrType**", "1", "<B", "|  Peer address type"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnPeerAddr:


EMSHI_DM_ConnPeerAddr_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnPeerAddr", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnPeerAddr --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bc7

For internal use only.Return the peer device address



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xc7", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection ID"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**peerAddr**", "0", "None", "|  Peer address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnLocalAddrType:


EMSHI_DM_ConnLocalAddrType_
---------------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnLocalAddrType", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnLocalAddrType --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bc8

For internal use only.Return the local address type



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xc8", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection ID"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**addrType**", "1", "<B", "|  Local address type"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnLocalAddr:


EMSHI_DM_ConnLocalAddr_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnLocalAddr", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnLocalAddr --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bc9

For internal use only.Return the local address



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xc9", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection Id"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**localAddr**", "6", "mac", "|  Local address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnPeerRpa:


EMSHI_DM_ConnPeerRpa_
---------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnPeerRpa", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnPeerRpa --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bca

For internal use only.Return the peer
  |                resolvable private address(RPA)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xca", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection ID"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**peerAddr**", "0", "None", "|  Peer Rpa"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnLocalRpa:


EMSHI_DM_ConnLocalRpa_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnLocalRpa", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnLocalRpa --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bcb

For internal use only.Return the local resolvable private address (RPA)



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xcb", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection ID"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**localRpa**", "0", "None", "|  Local Rpa"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ConnSecLevel:


EMSHI_DM_ConnSecLevel_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_ConnSecLevel", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ConnSecLevel --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bcc

Return the security level of the connection



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xcc", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection ID"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**secLevel**", "1", "<B", "|  Security level of the connection"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SmpEncryptReq:


EMSHI_DM_SmpEncryptReq_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_SmpEncryptReq", connId=0xXx,secLevel=0xXx,encryptKey=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SmpEncryptReq --connId=0xXx --secLevel=0xXx --encryptKey=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bcd

For internal use only.This function is called
  |                by SMP to request encryption



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xcd", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  DM connection ID"
	"**secLevel**", "", "1", "<B", "|  Security level of pairing when key was exchanged"
	"**encryptKey**", "", "0", "None", "|  Encryption key"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SmpCbackExec:


EMSHI_DM_SmpCbackExec_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_SmpCbackExec", DmEvt=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_SmpCbackExec --DmEvt=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bce

For internal use only.Execute DM callback from SMP procedures



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xce", "1", "<B", "|  No Description"
	"**DmEvt**", "", "0", "None", "|  callback event data"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecGetLocalCsrk:


EMSHI_DM_SecGetLocalCsrk_
-------------------------

**API usage:** 
``engine.send("EMSHI_DM_SecGetLocalCsrk")``

**CLI usage:**
``blengine send EMSHI_DM_SecGetLocalCsrk``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bcf

This function gets the local CSRK used by the device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xcf", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**localCsrk**", "0", "None", "|  Local CSRK"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecGetLocalIrk:


EMSHI_DM_SecGetLocalIrk_
------------------------

**API usage:** 
``engine.send("EMSHI_DM_SecGetLocalIrk")``

**CLI usage:**
``blengine send EMSHI_DM_SecGetLocalIrk``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bd0

This function gets the local IRK used by the device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xd0", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**localIrk**", "0", "None", "|  Local IRK"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecGetLocalIdentityAddr:


EMSHI_DM_SecGetLocalIdentityAddr_
---------------------------------

**API usage:** 
``engine.send("EMSHI_DM_SecGetLocalIdentityAddr")``

**CLI usage:**
``blengine send EMSHI_DM_SecGetLocalIdentityAddr``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bd1

For internal use only.This function gets the local identity address
  |             used by the device.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xd1", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**idAddr**", "0", "None", "|  Identity Address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_SecGetLocalIdentityAddrType:


EMSHI_DM_SecGetLocalIdentityAddrType_
-------------------------------------

**API usage:** 
``engine.send("EMSHI_DM_SecGetLocalIdentityAddrType")``

**CLI usage:**
``blengine send EMSHI_DM_SecGetLocalIdentityAddrType``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bd2

For internal use only.This function gets the local
  |               identity address type used by the device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xd2", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**addrType**", "1", "<B", "|  return the local identity address type"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ReadRemoteFeatures:


EMSHI_DM_ReadRemoteFeatures_
----------------------------

**API usage:** 
``engine.send("EMSHI_DM_ReadRemoteFeatures", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ReadRemoteFeatures --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bd3

Read the features of the remote device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xd3", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_ReadRemoteVerInfo:


EMSHI_DM_ReadRemoteVerInfo_
---------------------------

**API usage:** 
``engine.send("EMSHI_DM_ReadRemoteVerInfo", connId=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_ReadRemoteVerInfo --connId=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bd4

Read the version info of the remote device



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xd4", "1", "<B", "|  No Description"
	"**connId**", "", "1", "<B", "|  Connection identifier"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrjSmpConfig:


EMSHI_DM_PrjSmpConfig_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_PrjSmpConfig", attemptTimeout=0xXx,ioCap=0xXx,minKeyLen=0xXx,maxKeyLen=0xXx,maxAttempts=0xXx,auth=0xXx,maxAttemptTimeout=0xXx,attemptDecTimeout=0xXx,attemptExp=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrjSmpConfig --attemptTimeout=0xXx --ioCap=0xXx --minKeyLen=0xXx --maxKeyLen=0xXx --maxAttempts=0xXx --auth=0xXx --maxAttemptTimeout=0xXx --attemptDecTimeout=0xXx --attemptExp=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bd5

Over write stack SMP configuration structure



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xd5", "1", "<B", "|  No Description"
	"**attemptTimeout**", "", "4", "<I", "|  Repeated attempts' timeout in msec"
	"**ioCap**", "", "1", "<B", "|  I/O Capability"
	"**minKeyLen**", "", "1", "<B", "|  Minimum encryption key length"
	"**maxKeyLen**", "", "1", "<B", "|  Maximum encryption key length"
	"**maxAttempts**", "", "1", "<B", "|  Attempts to trigger 'repeated attempts' timeout"
	"**auth**", "", "2", "<H", "|  Device authentication requirements"
	"**maxAttemptTimeout**", "", "4", "<I", "|  Maximum 'Repeated attempts' timeout in msec"
	"**attemptDecTimeout**", "", "4", "<I", "|  Time msec before attemptExp decreases"
	"**attemptExp**", "", "1", "<B", "|  Exponent to raise attemptTimeout on maxAttempts"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_Getconnhandle:


EMSHI_DM_Getconnhandle_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_Getconnhandle")``

**CLI usage:**
``blengine send EMSHI_DM_Getconnhandle``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bd6

To get conn_handle for GAP procedures



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xd6", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**ConnId**", "1", "<B", "|  Connection Id"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_Advdatacb:


EMSHI_DM_Advdatacb_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_Advdatacb", dataType=0xXx,dataLen=0xXx,pData=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_Advdatacb --dataType=0xXx --dataLen=0xXx --pData=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bd7

Populate the advertisement data at prj_emshi. Required to set AD values after



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xd7", "1", "<B", "|  No Description"
	"**dataType**", "", "1", "<B", "|  Scan Data = 0 or Adv data = 1"
	"**dataLen**", "", "1", "<B", "|  To populate the advertisement/scan data in prj_emshi"
	"**pData**", "", "0", "None", "|  Data array"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_PrjSecConfig:


EMSHI_DM_PrjSecConfig_
----------------------

**API usage:** 
``engine.send("EMSHI_DM_PrjSecConfig", auth=0xXx,iKeyDist=0xXx,rKeyDist=0xXx,oob=0xXx,initiateSec=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_PrjSecConfig --auth=0xXx --iKeyDist=0xXx --rKeyDist=0xXx --oob=0xXx --initiateSec=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bd8

To configure security parameters.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xd8", "1", "<B", "|  No Description"
	"**auth**", "", "1", "<B", "|  Authentication and bonding flags"
	"**iKeyDist**", "", "1", "<B", "|  Initiator key distribution flags"
	"**rKeyDist**", "", "1", "<B", "|  AdResponder key distribution flags"
	"**oob**", "", "1", "<B", "|  TRUE if Out-of-band pairing data is present"
	"**initiateSec**", "", "1", "<B", "|  TRUE to initiate security upon connection"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_IsBonded:


EMSHI_DM_IsBonded_
------------------

**API usage:** 
``engine.send("EMSHI_DM_IsBonded", address=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_IsBonded --address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bd9

To check if there is a bond with the said address



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xd9", "1", "<B", "|  No Description"
	"**address**", "", "6", "mac", "|  Peer Address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_RemoveBonding:


EMSHI_DM_RemoveBonding_
-----------------------

**API usage:** 
``engine.send("EMSHI_DM_RemoveBonding", address=0xXx)``

**CLI usage:**
``blengine send EMSHI_DM_RemoveBonding --address=0xXx``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bda

To remove bonding with the said address



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xda", "1", "<B", "|  No Description"
	"**address**", "", "6", "mac", "|  Peer Address"

.. raw:: html
    
    <hr>

.. _pkt-EMSHI_DM_GetBdAddr:


EMSHI_DM_GetBdAddr_
-------------------

**API usage:** 
``engine.send("EMSHI_DM_GetBdAddr")``

**CLI usage:**
``blengine send EMSHI_DM_GetBdAddr``

:wrapped by: :ref:`pkt-HCI_CMD` (0x01) > :ref:`pkt-EMSHI_PACKET` (0xffc0)
:identifier: 0x8bdb

Get device BD_ADDR from NVM info.



.. csv-table:: Parameters
  :header: "name", "value", "size", "struct", "description"
  :widths: 40,1,1,1,60

	"**em_opcode**", "0x8b", "1", "<B", "|  No Description"
	"**command**", "0xdb", "1", "<B", "|  No Description"


.. csv-table:: Expected Response
  :header: "name", "size", "struct", "description"
  :widths: 40,1,1,60

	"**LocalAddress**", "6", "mac", "|  localAddress value"

.. raw:: html
    
    <hr>

