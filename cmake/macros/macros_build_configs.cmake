# List of build configs.
SET(BUILD_CONFIGS CACHE INTERNAL "List of build configurations")

# Add a new build config.
MACRO(ARC_REGISTER_BUILD_CONFIG)
    # Default values.
    SET(config_var              "")
    SET(config_name             "")
    SET(config_postfix          "")
    SET(config_cflags           "")
    SET(config_bitstream        False)
    SET(config_checkjli         False)
    SET(config_linker_script    "linker.cmd")
    SET(config_bitstream_path   "${FPGA_DIR}")
    SET(config_irom_size        "${HW_IROM_SIZE}")
    SET(config_omit_tests       False)
    SET(config_all_target       False)
    SET(config_in_sdk           False)
    SET(config_check_rom_sha1   False)

    # Parse macro parameters.
    FOREACH(arg ${ARGN})
        IF(    ${arg} MATCHES "NAME")
            SET(config_var "name")
        ELSEIF(${arg} MATCHES "TARGET_POSTFIX")
            SET(config_var "postfix")
        ELSEIF(${arg} MATCHES "MAKE_BITSTREAM")
            SET(config_bitstream True)
        ELSEIF(${arg} MATCHES "CHECKJLI")
            SET(config_checkjli True)
        ELSEIF(${arg} MATCHES "ALL_TARGET")
            SET(config_all_target True)
        ELSEIF(${arg} MATCHES "OMIT_TESTS")
            SET(config_omit_tests True)
        ELSEIF(${arg} MATCHES "CFLAGS")
            SET(config_var "cflags")
        ELSEIF(${arg} MATCHES "LINKER_SCRIPT")
            # Replace, don't add.
            SET(config_linker_script "")
            SET(config_var "linker_script")
        ELSEIF(${arg} MATCHES "BITSTREAM_PATH")
            # Replace, don't add.
            SET(config_bitstream_path "")
            SET(config_var "bitstream_path")
        ELSEIF(${arg} MATCHES "IROM_SIZE")
            # Replace, don't add.
            SET(config_irom_size "")
            SET(config_var "irom_size")
        ELSEIF(${arg} MATCHES "IN_SDK")
            SET(config_in_sdk True)
        ELSEIF(${arg} MATCHES "CHECK_ROM_SHA1")
            SET(config_check_rom_sha1 True)
        ELSE()
            IF("${config_var}" STREQUAL "")
                MESSAGE(FATAL_ERROR "Argument '${arg}' to ARC_REGISTER_BUILD_CONFIG not preceded by option!")
            ENDIF("${config_var}" STREQUAL "")

            SET(config_${config_var} "${config_${config_var}} ${arg}")
            STRING(STRIP "${config_${config_var}}" config_${config_var})
            SET(config_var "")
        ENDIF()
    ENDFOREACH(arg)

    # No spaces allowed in the build postfix.
    STRING(REGEX REPLACE " " "_" config_postfix "${config_postfix}")

    # Check if the build config does not already exists.
    LIST(FIND BUILD_CONFIGS "_${config_postfix}" idx)
    if (${idx} GREATER -1)
        MESSAGE(FATAL_ERROR "Duplicated build postfix '${config_postfix}'!")
    endif()

    # Add the new build target in the list.
    SET(BUILD_CONFIGS ${BUILD_CONFIGS} "_${config_postfix}" CACHE INTERNAL "List of build configurations")
    SET(BUILD_NAME__${config_postfix}           "${config_name}")
    SET(BUILD_POSTFIX__${config_postfix}        "${config_postfix}")
    SET(BUILD_CFLAGS__${config_postfix}         "${config_cflags}")
    SET(BUILD_BITSTREAM__${config_postfix}      "${config_bitstream}")
    SET(BUILD_CHECKJLI__${config_postfix}       "${config_checkjli}")
    SET(BUILD_LINKER_SCRIPT__${config_postfix}  "${config_linker_script}")
    SET(BUILD_BITSTREAM_PATH__${config_postfix} "${config_bitstream_path}")
    SET(BUILD_IROM_SIZE__${config_postfix}      "${config_irom_size}")
    SET(BUILD_OMIT_TESTS__${config_postfix}     "${config_omit_tests}")
    SET(BUILD_ALL_TARGET__${config_postfix}     "${config_all_target}")
    SET(BUILD_IN_SDK__${config_postfix}         "${config_in_sdk}")
    SET(BUILD_CHECK_ROM_SHA1__${config_postfix} "${config_check_rom_sha1}")
ENDMACRO(ARC_REGISTER_BUILD_CONFIG)

# Get a build config parameters.
MACRO(ARC_GET_BUILD_CONFIG build)
    SET(build_name              "${BUILD_NAME_${build}}")
    SET(build_postfix           "${BUILD_POSTFIX_${build}}")
    SET(build_cflags            "${BUILD_CFLAGS_${build}}")
    SET(build_bitstream         "${BUILD_BITSTREAM_${build}}")
    SET(build_checkjli          "${BUILD_CHECKJLI_${build}}")
    SET(build_linker_script     "${BUILD_LINKER_SCRIPT_${build}}")
    SET(build_bitstream_path    "${BUILD_BITSTREAM_PATH_${build}}")
    SET(build_irom_size         "${BUILD_IROM_SIZE_${build}}")
    SET(build_omit_tests        "${BUILD_OMIT_TESTS_${build}}")
    SET(build_all_target        "${BUILD_ALL_TARGET_${build}}")
    SET(build_in_sdk            "${BUILD_IN_SDK_${build}}")
    SET(build_check_rom_sha1    "${BUILD_CHECK_ROM_SHA1_${build}}")
ENDMACRO(ARC_GET_BUILD_CONFIG)

# Get a build target parameters.
MACRO(ARC_GET_BUILD_TARGET build target)
    ARC_GET_BUILD_CONFIG(${build})
    SET(build_target "${target}${build_postfix}")
ENDMACRO(ARC_GET_BUILD_TARGET)
